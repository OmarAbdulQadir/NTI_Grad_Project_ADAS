
ADAS_Controler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007b98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00007b98  00007c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800196  00800196  00007d62  2**0
                  ALLOC
  3 .stab         00005afc  00000000  00000000  00007d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bb0  00000000  00000000  0000d860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000f410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000f5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000f7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00011df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000132c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000145d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000147b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00014ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000154d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__vector_1>
       8:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__vector_2>
       c:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 f3 39 	jmp	0x73e6	; 0x73e6 <__vector_5>
      18:	0c 94 e3 39 	jmp	0x73c6	; 0x73c6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 76 39 	jmp	0x72ec	; 0x72ec <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 09 39 	jmp	0x7212	; 0x7212 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e9 3a 	jmp	0x75d2	; 0x75d2 <__vector_13>
      38:	0c 94 1f 3b 	jmp	0x763e	; 0x763e <__vector_14>
      3c:	0c 94 2f 3b 	jmp	0x765e	; 0x765e <__vector_15>
      40:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	fb e7       	ldi	r31, 0x7B	; 123
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3b       	cpi	r26, 0xBB	; 187
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <main>
      8a:	0c 94 ca 3d 	jmp	0x7b94	; 0x7b94 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 3d 	jmp	0x7b26	; 0x7b26 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 3d 	jmp	0x7b5e	; 0x7b5e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 3d 	jmp	0x7b3e	; 0x7b3e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 3d 	jmp	0x7b76	; 0x7b76 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 3d 	jmp	0x7b3e	; 0x7b3e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 3d 	jmp	0x7b76	; 0x7b76 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 3d 	jmp	0x7b26	; 0x7b26 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 3d 	jmp	0x7b5e	; 0x7b5e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 3d 	jmp	0x7b36	; 0x7b36 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b7 3d 	jmp	0x7b6e	; 0x7b6e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9f 3d 	jmp	0x7b3e	; 0x7b3e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bb 3d 	jmp	0x7b76	; 0x7b76 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9f 3d 	jmp	0x7b3e	; 0x7b3e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bb 3d 	jmp	0x7b76	; 0x7b76 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9f 3d 	jmp	0x7b3e	; 0x7b3e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bb 3d 	jmp	0x7b76	; 0x7b76 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9c 3d 	jmp	0x7b38	; 0x7b38 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 b8 3d 	jmp	0x7b70	; 0x7b70 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 a3 3d 	jmp	0x7b46	; 0x7b46 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 bf 3d 	jmp	0x7b7e	; 0x7b7e <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 9b 3d 	jmp	0x7b36	; 0x7b36 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 b7 3d 	jmp	0x7b6e	; 0x7b6e <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e9 58       	subi	r30, 0x89	; 137
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_void_init>:

//Global variables
static void (*callback_functions_address)(u16 )= NULL;

/* Implementing of the driver functions */
void ADC_void_init(void ){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	 *	No inputs to the function.
	 *
	 *	No return from the function.
	 */
	// Assign the value of the left adjust bit
	agn_bit(ADC_ADMUX, ADC_ADLAR_pin, ADC_ADLAR);
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8f 7d       	andi	r24, 0xDF	; 223
     efe:	8c 93       	st	X, r24

	// Assign the values of the reference selection regesters
	agn_bit(ADC_ADMUX, ADC_REFS0_pin, ADC_REFS0);
     f00:	a7 e2       	ldi	r26, 0x27	; 39
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e2       	ldi	r30, 0x27	; 39
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 64       	ori	r24, 0x40	; 64
     f0c:	8c 93       	st	X, r24
	agn_bit(ADC_ADMUX, ADC_REFS1_pin, ADC_REFS1);
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 77       	andi	r24, 0x7F	; 127
     f1a:	8c 93       	st	X, r24

	// Assign the value of the enable bit
	agn_bit(ADC_ADCSRA, ADC_ADEN_pin, ADC_ADEN);
     f1c:	a6 e2       	ldi	r26, 0x26	; 38
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e6 e2       	ldi	r30, 0x26	; 38
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 68       	ori	r24, 0x80	; 128
     f28:	8c 93       	st	X, r24
}
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <ADC_void_config>:


void ADC_void_config(ADC_config_struct* ptr_config){
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <ADC_void_config+0x6>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
	 *		ptr_config>> Pointer to ADC configurations Struct.
	 *	
	 *	Function does not return any values, Hence it needs to be called every time you need to reconfigure the ADC.
	 */
	// Configure the analog channel and gain selection bits
	ADC_ADMUX &= ADC_MUX_clear;
     f3e:	a7 e2       	ldi	r26, 0x27	; 39
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e7 e2       	ldi	r30, 0x27	; 39
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 7e       	andi	r24, 0xE0	; 224
     f4a:	8c 93       	st	X, r24
	ADC_ADMUX |= ptr_config -> MUX;
     f4c:	a7 e2       	ldi	r26, 0x27	; 39
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e7 e2       	ldi	r30, 0x27	; 39
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	90 81       	ld	r25, Z
     f56:	e9 81       	ldd	r30, Y+1	; 0x01
     f58:	fa 81       	ldd	r31, Y+2	; 0x02
     f5a:	80 81       	ld	r24, Z
     f5c:	8f 71       	andi	r24, 0x1F	; 31
     f5e:	89 2b       	or	r24, r25
     f60:	8c 93       	st	X, r24

	// Configure the ADC prescaler select bits
	ADC_ADCSRA &= ADC_ADPS_clear;
     f62:	a6 e2       	ldi	r26, 0x26	; 38
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e6 e2       	ldi	r30, 0x26	; 38
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	88 7f       	andi	r24, 0xF8	; 248
     f6e:	8c 93       	st	X, r24
	ADC_ADCSRA |= ptr_config -> ADPS;
     f70:	a6 e2       	ldi	r26, 0x26	; 38
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e6 e2       	ldi	r30, 0x26	; 38
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	90 81       	ld	r25, Z
     f7a:	e9 81       	ldd	r30, Y+1	; 0x01
     f7c:	fa 81       	ldd	r31, Y+2	; 0x02
     f7e:	80 81       	ld	r24, Z
     f80:	82 95       	swap	r24
     f82:	86 95       	lsr	r24
     f84:	87 70       	andi	r24, 0x07	; 7
     f86:	89 2b       	or	r24, r25
     f88:	8c 93       	st	X, r24

	// Configure the ADC auto trigger source bits
	ADC_SFIOR &= ADC_ADTS_clear;
     f8a:	a0 e5       	ldi	r26, 0x50	; 80
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e0 e5       	ldi	r30, 0x50	; 80
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8f 71       	andi	r24, 0x1F	; 31
     f96:	8c 93       	st	X, r24
	ADC_SFIOR |= ptr_config -> ADTS;
     f98:	a0 e5       	ldi	r26, 0x50	; 80
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e0 e5       	ldi	r30, 0x50	; 80
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	90 81       	ld	r25, Z
     fa2:	e9 81       	ldd	r30, Y+1	; 0x01
     fa4:	fa 81       	ldd	r31, Y+2	; 0x02
     fa6:	81 81       	ldd	r24, Z+1	; 0x01
     fa8:	86 95       	lsr	r24
     faa:	87 70       	andi	r24, 0x07	; 7
     fac:	89 2b       	or	r24, r25
     fae:	8c 93       	st	X, r24

	// Configure the ADC auto trigger enable bit
	agn_bit(ADC_ADCSRA, ADC_ADATE_pin, ptr_config -> ADATE);
     fb0:	e9 81       	ldd	r30, Y+1	; 0x01
     fb2:	fa 81       	ldd	r31, Y+2	; 0x02
     fb4:	81 81       	ldd	r24, Z+1	; 0x01
     fb6:	81 70       	andi	r24, 0x01	; 1
     fb8:	88 23       	and	r24, r24
     fba:	41 f0       	breq	.+16     	; 0xfcc <ADC_void_config+0x9c>
     fbc:	a6 e2       	ldi	r26, 0x26	; 38
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e6 e2       	ldi	r30, 0x26	; 38
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 62       	ori	r24, 0x20	; 32
     fc8:	8c 93       	st	X, r24
     fca:	07 c0       	rjmp	.+14     	; 0xfda <ADC_void_config+0xaa>
     fcc:	a6 e2       	ldi	r26, 0x26	; 38
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e6 e2       	ldi	r30, 0x26	; 38
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	8f 7d       	andi	r24, 0xDF	; 223
     fd8:	8c 93       	st	X, r24

	// Configure the ADC interrupt enable bit
	agn_bit(ADC_ADCSRA, ADC_ADIE_pin, ptr_config -> ADIE);
     fda:	e9 81       	ldd	r30, Y+1	; 0x01
     fdc:	fa 81       	ldd	r31, Y+2	; 0x02
     fde:	81 81       	ldd	r24, Z+1	; 0x01
     fe0:	80 71       	andi	r24, 0x10	; 16
     fe2:	88 23       	and	r24, r24
     fe4:	41 f0       	breq	.+16     	; 0xff6 <ADC_void_config+0xc6>
     fe6:	a6 e2       	ldi	r26, 0x26	; 38
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e6 e2       	ldi	r30, 0x26	; 38
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	88 60       	ori	r24, 0x08	; 8
     ff2:	8c 93       	st	X, r24
     ff4:	07 c0       	rjmp	.+14     	; 0x1004 <ADC_void_config+0xd4>
     ff6:	a6 e2       	ldi	r26, 0x26	; 38
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e6 e2       	ldi	r30, 0x26	; 38
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	87 7f       	andi	r24, 0xF7	; 247
    1002:	8c 93       	st	X, r24

	// Configure the Global interupt bit
	agn_bit(ADC_SREG, ADC_Global_INT, ptr_config -> ADIE);
    1004:	e9 81       	ldd	r30, Y+1	; 0x01
    1006:	fa 81       	ldd	r31, Y+2	; 0x02
    1008:	81 81       	ldd	r24, Z+1	; 0x01
    100a:	80 71       	andi	r24, 0x10	; 16
    100c:	88 23       	and	r24, r24
    100e:	41 f0       	breq	.+16     	; 0x1020 <ADC_void_config+0xf0>
    1010:	af e5       	ldi	r26, 0x5F	; 95
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	ef e5       	ldi	r30, 0x5F	; 95
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	80 68       	ori	r24, 0x80	; 128
    101c:	8c 93       	st	X, r24
    101e:	07 c0       	rjmp	.+14     	; 0x102e <ADC_void_config+0xfe>
    1020:	af e5       	ldi	r26, 0x5F	; 95
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ef e5       	ldi	r30, 0x5F	; 95
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8f 77       	andi	r24, 0x7F	; 127
    102c:	8c 93       	st	X, r24
}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <ADC_void_start_conv>:

void ADC_void_start_conv(void){
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	 *	No inputs to the function.
	 *
	 *	No return from the function.
	 */
	// Enable ADC start conversion bit
	agn_bit(ADC_ADCSRA, ADC_ADSC_pin, ADC_ADSC);
    1040:	a6 e2       	ldi	r26, 0x26	; 38
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e6 e2       	ldi	r30, 0x26	; 38
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	80 64       	ori	r24, 0x40	; 64
    104c:	8c 93       	st	X, r24
}
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <ADC_void_read_data>:

void ADC_void_read_data(u16* ptr_result){
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <ADC_void_read_data+0x6>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	89 83       	std	Y+1, r24	; 0x01
	 *		ptr_result>> pointer to the ADC value container variable.
	 *	
	 *	Function does not retuen any data, Hence it needs to be called when a value update is needed.
	 */
	// Enable ADC start conversion bit
	agn_bit(ADC_ADCSRA, ADC_ADSC_pin, ADC_ADSC);
    1062:	a6 e2       	ldi	r26, 0x26	; 38
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e6 e2       	ldi	r30, 0x26	; 38
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	80 64       	ori	r24, 0x40	; 64
    106e:	8c 93       	st	X, r24

	// Polling on the ADC interrupt flag bit
	while(get_bit(ADC_ADCSRA, ADC_ADIF_pin) == 0);
    1070:	e6 e2       	ldi	r30, 0x26	; 38
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	82 95       	swap	r24
    1078:	8f 70       	andi	r24, 0x0F	; 15
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	81 70       	andi	r24, 0x01	; 1
    1080:	90 70       	andi	r25, 0x00	; 0
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	a9 f3       	breq	.-22     	; 0x1070 <ADC_void_read_data+0x1c>

	// Resit the ADC interrupt flag bit
	set_bit(ADC_ADCSRA, ADC_ADIF_pin);
    1086:	a6 e2       	ldi	r26, 0x26	; 38
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e6 e2       	ldi	r30, 0x26	; 38
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	80 61       	ori	r24, 0x10	; 16
    1092:	8c 93       	st	X, r24

	// Return the digital value
	*(ptr_result)= ADC_ADCD_16bit;
    1094:	e4 e2       	ldi	r30, 0x24	; 36
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	e9 81       	ldd	r30, Y+1	; 0x01
    109e:	fa 81       	ldd	r31, Y+2	; 0x02
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <ADC_void_INIT_callback>:


void ADC_void_INIT_callback(void (*ptr_callback_function)(u16 ) ){
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <ADC_void_INIT_callback+0x6>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	89 83       	std	Y+1, r24	; 0x01
	 *	Inputs::
	 *		ptr_callback_function>> pointer to the callback function.
	 *
	 *	Function does not return any value and anly called when addressing the callback function.
	 */
	callback_functions_address= ptr_callback_function;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	90 93 97 01 	sts	0x0197, r25
    10c4:	80 93 96 01 	sts	0x0196, r24
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <__vector_16>:

void __vector_16(void){
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	ADC flag ISR
	 */
	if(callback_functions_address != NULL){
    10fc:	80 91 96 01 	lds	r24, 0x0196
    1100:	90 91 97 01 	lds	r25, 0x0197
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	49 f0       	breq	.+18     	; 0x111a <__vector_16+0x48>
		callback_functions_address(ADC_ADCD_16bit);
    1108:	e0 91 96 01 	lds	r30, 0x0196
    110c:	f0 91 97 01 	lds	r31, 0x0197
    1110:	a4 e2       	ldi	r26, 0x24	; 36
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	8d 91       	ld	r24, X+
    1116:	9c 91       	ld	r25, X
    1118:	09 95       	icall
	}
}
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	bf 91       	pop	r27
    1124:	af 91       	pop	r26
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	7f 91       	pop	r23
    112c:	6f 91       	pop	r22
    112e:	5f 91       	pop	r21
    1130:	4f 91       	pop	r20
    1132:	3f 91       	pop	r19
    1134:	2f 91       	pop	r18
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti

00001140 <DIO_void_set_port_dir>:


/* Implementing of the driver functions */
/* Set direction of PORTx functions */
void DIO_void_set_port_dir(u8 copy_u8_port_id, u8 port_dir_copy)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <DIO_void_set_port_dir+0x6>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	6a 83       	std	Y+2, r22	; 0x02
	 *						1: for output pin
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = port_dir_copy;
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	fc 01       	movw	r30, r24
    115a:	e1 58       	subi	r30, 0x81	; 129
    115c:	fe 4f       	sbci	r31, 0xFE	; 254
    115e:	01 90       	ld	r0, Z+
    1160:	f0 81       	ld	r31, Z
    1162:	e0 2d       	mov	r30, r0
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	80 83       	st	Z, r24
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <DIO_void_set_port_in_pullUp>:


void DIO_void_set_port_in_pullUp(u8 copy_u8_port_id)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	0f 92       	push	r0
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	89 83       	std	Y+1, r24	; 0x01
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = INPUT;
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	fc 01       	movw	r30, r24
    118a:	e1 58       	subi	r30, 0x81	; 129
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	01 90       	ld	r0, Z+
    1190:	f0 81       	ld	r31, Z
    1192:	e0 2d       	mov	r30, r0
    1194:	10 82       	st	Z, r1
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	fc 01       	movw	r30, r24
    11a2:	e9 57       	subi	r30, 0x79	; 121
    11a4:	fe 4f       	sbci	r31, 0xFE	; 254
    11a6:	01 90       	ld	r0, Z+
    11a8:	f0 81       	ld	r31, Z
    11aa:	e0 2d       	mov	r30, r0
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	80 83       	st	Z, r24
}
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <DIO_u8_get_PortDir>:


u8 DIO_u8_get_PortDir(u8 copy_u8_port_id)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	0f 92       	push	r0
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01
	return *(DIO_DDRx_REF[copy_u8_port_id]);
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	fc 01       	movw	r30, r24
    11d0:	e1 58       	subi	r30, 0x81	; 129
    11d2:	fe 4f       	sbci	r31, 0xFE	; 254
    11d4:	01 90       	ld	r0, Z+
    11d6:	f0 81       	ld	r31, Z
    11d8:	e0 2d       	mov	r30, r0
    11da:	80 81       	ld	r24, Z
}
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <DIO_void_set_pin_dir>:

/* Set direction of PINx functions */
void DIO_void_set_pin_dir(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_dir_copy)
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <DIO_void_set_pin_dir+0x6>
    11ea:	0f 92       	push	r0
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	6a 83       	std	Y+2, r22	; 0x02
    11f4:	4b 83       	std	Y+3, r20	; 0x03
	 *				   1: for output pin
	 *
	 * Function does not return any output, yet it affects the 
	 * pin in the PORT Direction Register DDRx
	 */	
	agn_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_dir_copy);
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	88 23       	and	r24, r24
    11fa:	29 f1       	breq	.+74     	; 0x1246 <DIO_void_set_pin_dir+0x62>
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	fc 01       	movw	r30, r24
    1208:	e1 58       	subi	r30, 0x81	; 129
    120a:	fe 4f       	sbci	r31, 0xFE	; 254
    120c:	a0 81       	ld	r26, Z
    120e:	b1 81       	ldd	r27, Z+1	; 0x01
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	fc 01       	movw	r30, r24
    121c:	e1 58       	subi	r30, 0x81	; 129
    121e:	fe 4f       	sbci	r31, 0xFE	; 254
    1220:	01 90       	ld	r0, Z+
    1222:	f0 81       	ld	r31, Z
    1224:	e0 2d       	mov	r30, r0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <DIO_void_set_pin_dir+0x58>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <DIO_void_set_pin_dir+0x54>
    1240:	84 2b       	or	r24, r20
    1242:	8c 93       	st	X, r24
    1244:	25 c0       	rjmp	.+74     	; 0x1290 <DIO_void_set_pin_dir+0xac>
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	fc 01       	movw	r30, r24
    1252:	e1 58       	subi	r30, 0x81	; 129
    1254:	fe 4f       	sbci	r31, 0xFE	; 254
    1256:	a0 81       	ld	r26, Z
    1258:	b1 81       	ldd	r27, Z+1	; 0x01
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	fc 01       	movw	r30, r24
    1266:	e1 58       	subi	r30, 0x81	; 129
    1268:	fe 4f       	sbci	r31, 0xFE	; 254
    126a:	01 90       	ld	r0, Z+
    126c:	f0 81       	ld	r31, Z
    126e:	e0 2d       	mov	r30, r0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_void_set_pin_dir+0xa2>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_void_set_pin_dir+0x9e>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <DIO_void_set_pin_in_pullUP>:


void DIO_void_set_pin_in_pullUP(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <DIO_void_set_pin_in_pullUP+0x6>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	pin in the PORT Direction Register DDRx					  
	 */
	clr_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num);
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	fc 01       	movw	r30, r24
    12b6:	e1 58       	subi	r30, 0x81	; 129
    12b8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ba:	a0 81       	ld	r26, Z
    12bc:	b1 81       	ldd	r27, Z+1	; 0x01
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	fc 01       	movw	r30, r24
    12ca:	e1 58       	subi	r30, 0x81	; 129
    12cc:	fe 4f       	sbci	r31, 0xFE	; 254
    12ce:	01 90       	ld	r0, Z+
    12d0:	f0 81       	ld	r31, Z
    12d2:	e0 2d       	mov	r30, r0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_void_set_pin_in_pullUP+0x4c>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	2a 95       	dec	r18
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_void_set_pin_in_pullUP+0x48>
    12ec:	80 95       	com	r24
    12ee:	84 23       	and	r24, r20
    12f0:	8c 93       	st	X, r24
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	fc 01       	movw	r30, r24
    12fe:	e9 57       	subi	r30, 0x79	; 121
    1300:	fe 4f       	sbci	r31, 0xFE	; 254
    1302:	a0 81       	ld	r26, Z
    1304:	b1 81       	ldd	r27, Z+1	; 0x01
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	fc 01       	movw	r30, r24
    1312:	e9 57       	subi	r30, 0x79	; 121
    1314:	fe 4f       	sbci	r31, 0xFE	; 254
    1316:	01 90       	ld	r0, Z+
    1318:	f0 81       	ld	r31, Z
    131a:	e0 2d       	mov	r30, r0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_void_set_pin_in_pullUP+0x96>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DIO_void_set_pin_in_pullUP+0x92>
    1336:	84 2b       	or	r24, r20
    1338:	8c 93       	st	X, r24
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <DIO_u8_get_PinDir>:


u8 DIO_u8_get_PinDir(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <DIO_u8_get_PinDir+0x6>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	6a 83       	std	Y+2, r22	; 0x02
	return get_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num);
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	fc 01       	movw	r30, r24
    135e:	e1 58       	subi	r30, 0x81	; 129
    1360:	fe 4f       	sbci	r31, 0xFE	; 254
    1362:	01 90       	ld	r0, Z+
    1364:	f0 81       	ld	r31, Z
    1366:	e0 2d       	mov	r30, r0
    1368:	80 81       	ld	r24, Z
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a9 01       	movw	r20, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_u8_get_PinDir+0x38>
    1378:	55 95       	asr	r21
    137a:	47 95       	ror	r20
    137c:	8a 95       	dec	r24
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_u8_get_PinDir+0x34>
    1380:	ca 01       	movw	r24, r20
    1382:	81 70       	andi	r24, 0x01	; 1
}
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <DIO_void_set_port>:


/* Assign Value to output PORTx functions */
void DIO_void_set_port(u8 copy_u8_port_id)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	0f 92       	push	r0
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	fc 01       	movw	r30, r24
    13a6:	e9 57       	subi	r30, 0x79	; 121
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	01 90       	ld	r0, Z+
    13ac:	f0 81       	ld	r31, Z
    13ae:	e0 2d       	mov	r30, r0
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	80 83       	st	Z, r24
}
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <DIO_void_clear_port>:


void DIO_void_clear_port(u8 copy_u8_port_id)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = LOW;
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	fc 01       	movw	r30, r24
    13d4:	e9 57       	subi	r30, 0x79	; 121
    13d6:	fe 4f       	sbci	r31, 0xFE	; 254
    13d8:	01 90       	ld	r0, Z+
    13da:	f0 81       	ld	r31, Z
    13dc:	e0 2d       	mov	r30, r0
    13de:	10 82       	st	Z, r1
}
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <DIO_void_toggle_port>:


void DIO_void_toggle_port(u8 copy_u8_port_id)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	0f 92       	push	r0
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) ^= PORT_MAX;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	fc 01       	movw	r30, r24
    1400:	e9 57       	subi	r30, 0x79	; 121
    1402:	fe 4f       	sbci	r31, 0xFE	; 254
    1404:	a0 81       	ld	r26, Z
    1406:	b1 81       	ldd	r27, Z+1	; 0x01
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	fc 01       	movw	r30, r24
    1414:	e9 57       	subi	r30, 0x79	; 121
    1416:	fe 4f       	sbci	r31, 0xFE	; 254
    1418:	01 90       	ld	r0, Z+
    141a:	f0 81       	ld	r31, Z
    141c:	e0 2d       	mov	r30, r0
    141e:	80 81       	ld	r24, Z
    1420:	80 95       	com	r24
    1422:	8c 93       	st	X, r24
}
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <DIO_void_assign_port>:


void DIO_void_assign_port(u8 copy_u8_port_id, u8 port_val)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	00 d0       	rcall	.+0      	; 0x1432 <DIO_void_assign_port+0x6>
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = port_val;
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	fc 01       	movw	r30, r24
    1446:	e9 57       	subi	r30, 0x79	; 121
    1448:	fe 4f       	sbci	r31, 0xFE	; 254
    144a:	01 90       	ld	r0, Z+
    144c:	f0 81       	ld	r31, Z
    144e:	e0 2d       	mov	r30, r0
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	80 83       	st	Z, r24
}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <DIO_u8_get_PortOut>:


u8 DIO_u8_get_PortOut(u8 copy_u8_port_id)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	0f 92       	push	r0
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	return *(DIO_PORTx_REF[copy_u8_port_id]);
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	fc 01       	movw	r30, r24
    1476:	e9 57       	subi	r30, 0x79	; 121
    1478:	fe 4f       	sbci	r31, 0xFE	; 254
    147a:	01 90       	ld	r0, Z+
    147c:	f0 81       	ld	r31, Z
    147e:	e0 2d       	mov	r30, r0
    1480:	80 81       	ld	r24, Z
}
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <DIO_void_set_pin>:


/* Assign Value to output PINx functions */
void DIO_void_set_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <DIO_void_set_pin+0x6>
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	88 2f       	mov	r24, r24
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	fc 01       	movw	r30, r24
    14a4:	e9 57       	subi	r30, 0x79	; 121
    14a6:	fe 4f       	sbci	r31, 0xFE	; 254
    14a8:	a0 81       	ld	r26, Z
    14aa:	b1 81       	ldd	r27, Z+1	; 0x01
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	fc 01       	movw	r30, r24
    14b8:	e9 57       	subi	r30, 0x79	; 121
    14ba:	fe 4f       	sbci	r31, 0xFE	; 254
    14bc:	01 90       	ld	r0, Z+
    14be:	f0 81       	ld	r31, Z
    14c0:	e0 2d       	mov	r30, r0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_void_set_pin+0x4e>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_void_set_pin+0x4a>
    14dc:	84 2b       	or	r24, r20
    14de:	8c 93       	st	X, r24
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <DIO_void_clear_pin>:


void DIO_void_clear_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <DIO_void_clear_pin+0x6>
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	clr_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	88 2f       	mov	r24, r24
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	fc 01       	movw	r30, r24
    1504:	e9 57       	subi	r30, 0x79	; 121
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	a0 81       	ld	r26, Z
    150a:	b1 81       	ldd	r27, Z+1	; 0x01
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	fc 01       	movw	r30, r24
    1518:	e9 57       	subi	r30, 0x79	; 121
    151a:	fe 4f       	sbci	r31, 0xFE	; 254
    151c:	01 90       	ld	r0, Z+
    151e:	f0 81       	ld	r31, Z
    1520:	e0 2d       	mov	r30, r0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_void_clear_pin+0x4e>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_void_clear_pin+0x4a>
    153c:	80 95       	com	r24
    153e:	84 23       	and	r24, r20
    1540:	8c 93       	st	X, r24
}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <DIO_void_toggle_pin>:


void DIO_void_toggle_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <DIO_void_toggle_pin+0x6>
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	tgl_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	88 2f       	mov	r24, r24
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	fc 01       	movw	r30, r24
    1566:	e9 57       	subi	r30, 0x79	; 121
    1568:	fe 4f       	sbci	r31, 0xFE	; 254
    156a:	a0 81       	ld	r26, Z
    156c:	b1 81       	ldd	r27, Z+1	; 0x01
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	fc 01       	movw	r30, r24
    157a:	e9 57       	subi	r30, 0x79	; 121
    157c:	fe 4f       	sbci	r31, 0xFE	; 254
    157e:	01 90       	ld	r0, Z+
    1580:	f0 81       	ld	r31, Z
    1582:	e0 2d       	mov	r30, r0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_void_toggle_pin+0x4e>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_void_toggle_pin+0x4a>
    159e:	84 27       	eor	r24, r20
    15a0:	8c 93       	st	X, r24
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <DIO_void_assign_pin>:


void DIO_void_assign_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_val)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <DIO_void_assign_pin+0x6>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	6a 83       	std	Y+2, r22	; 0x02
    15bc:	4b 83       	std	Y+3, r20	; 0x03
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	agn_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_val);
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 23       	and	r24, r24
    15c2:	29 f1       	breq	.+74     	; 0x160e <DIO_void_assign_pin+0x62>
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	fc 01       	movw	r30, r24
    15d0:	e9 57       	subi	r30, 0x79	; 121
    15d2:	fe 4f       	sbci	r31, 0xFE	; 254
    15d4:	a0 81       	ld	r26, Z
    15d6:	b1 81       	ldd	r27, Z+1	; 0x01
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	88 2f       	mov	r24, r24
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	fc 01       	movw	r30, r24
    15e4:	e9 57       	subi	r30, 0x79	; 121
    15e6:	fe 4f       	sbci	r31, 0xFE	; 254
    15e8:	01 90       	ld	r0, Z+
    15ea:	f0 81       	ld	r31, Z
    15ec:	e0 2d       	mov	r30, r0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_void_assign_pin+0x58>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_void_assign_pin+0x54>
    1608:	84 2b       	or	r24, r20
    160a:	8c 93       	st	X, r24
    160c:	25 c0       	rjmp	.+74     	; 0x1658 <DIO_void_assign_pin+0xac>
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	fc 01       	movw	r30, r24
    161a:	e9 57       	subi	r30, 0x79	; 121
    161c:	fe 4f       	sbci	r31, 0xFE	; 254
    161e:	a0 81       	ld	r26, Z
    1620:	b1 81       	ldd	r27, Z+1	; 0x01
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	88 2f       	mov	r24, r24
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	fc 01       	movw	r30, r24
    162e:	e9 57       	subi	r30, 0x79	; 121
    1630:	fe 4f       	sbci	r31, 0xFE	; 254
    1632:	01 90       	ld	r0, Z+
    1634:	f0 81       	ld	r31, Z
    1636:	e0 2d       	mov	r30, r0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <DIO_void_assign_pin+0xa2>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <DIO_void_assign_pin+0x9e>
    1652:	80 95       	com	r24
    1654:	84 23       	and	r24, r20
    1656:	8c 93       	st	X, r24
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <DIO_u8_get_PinOut>:


u8 DIO_u8_get_PinOut(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <DIO_u8_get_PinOut+0x6>
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 *
	 */
	return get_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	fc 01       	movw	r30, r24
    167e:	e9 57       	subi	r30, 0x79	; 121
    1680:	fe 4f       	sbci	r31, 0xFE	; 254
    1682:	01 90       	ld	r0, Z+
    1684:	f0 81       	ld	r31, Z
    1686:	e0 2d       	mov	r30, r0
    1688:	80 81       	ld	r24, Z
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a9 01       	movw	r20, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <DIO_u8_get_PinOut+0x38>
    1698:	55 95       	asr	r21
    169a:	47 95       	ror	r20
    169c:	8a 95       	dec	r24
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <DIO_u8_get_PinOut+0x34>
    16a0:	ca 01       	movw	r24, r20
    16a2:	81 70       	andi	r24, 0x01	; 1
}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <DIO_u8_get_port>:


/* Get value from input PORTx functions */
u8 DIO_u8_get_port(u8 copy_u8_port_id)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	0f 92       	push	r0
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	89 83       	std	Y+1, r24	; 0x01
	 *	
	 *	Function does not affect any regester it only gets
	 *	from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return *(DIO_PINx_REF[copy_u8_port_id]);
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	88 2f       	mov	r24, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	fc 01       	movw	r30, r24
    16c6:	e9 58       	subi	r30, 0x89	; 137
    16c8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ca:	01 90       	ld	r0, Z+
    16cc:	f0 81       	ld	r31, Z
    16ce:	e0 2d       	mov	r30, r0
    16d0:	80 81       	ld	r24, Z
}
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <DIO_u8_get_pin>:


/* Get value from input PINx functions */
u8 DIO_u8_get_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <DIO_u8_get_pin+0x6>
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	6a 83       	std	Y+2, r22	; 0x02
	 *	
	 *	Function does not affect any regester it only gets the pin
	 *	value from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return get_bit(*(DIO_PINx_REF[copy_u8_port_id]), copy_u8_pin_num);
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	88 2f       	mov	r24, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	fc 01       	movw	r30, r24
    16f4:	e9 58       	subi	r30, 0x89	; 137
    16f6:	fe 4f       	sbci	r31, 0xFE	; 254
    16f8:	01 90       	ld	r0, Z+
    16fa:	f0 81       	ld	r31, Z
    16fc:	e0 2d       	mov	r30, r0
    16fe:	80 81       	ld	r24, Z
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a9 01       	movw	r20, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <DIO_u8_get_pin+0x38>
    170e:	55 95       	asr	r21
    1710:	47 95       	ror	r20
    1712:	8a 95       	dec	r24
    1714:	e2 f7       	brpl	.-8      	; 0x170e <DIO_u8_get_pin+0x34>
    1716:	ca 01       	movw	r24, r20
    1718:	81 70       	andi	r24, 0x01	; 1
}
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <EXTI_void_init>:
//Global variables
// Call back functions container
static void (*call_back_function[3])(void);

/* Implementing of the driver functions */
void EXTI_void_init(EXTI_init_config_struct* EXTI_config){
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <EXTI_void_init+0x6>
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
	 *	Function does not return any value, Hence function must be called every time you need
	 *	to change the configurations.
	 */
	// set sense level of INT0
	/* for more optimization its recommended to set all using clear all 3 bits then or the new value */
	agn_bit(EXTI_MCUCR, EXTI_ISC00, (get_bit((EXTI_config -> sen_lev_int0), 0)));
    1732:	e9 81       	ldd	r30, Y+1	; 0x01
    1734:	fa 81       	ldd	r31, Y+2	; 0x02
    1736:	80 81       	ld	r24, Z
    1738:	86 95       	lsr	r24
    173a:	83 70       	andi	r24, 0x03	; 3
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	81 70       	andi	r24, 0x01	; 1
    1742:	90 70       	andi	r25, 0x00	; 0
    1744:	88 23       	and	r24, r24
    1746:	41 f0       	breq	.+16     	; 0x1758 <EXTI_void_init+0x34>
    1748:	a5 e5       	ldi	r26, 0x55	; 85
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e5       	ldi	r30, 0x55	; 85
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	81 60       	ori	r24, 0x01	; 1
    1754:	8c 93       	st	X, r24
    1756:	07 c0       	rjmp	.+14     	; 0x1766 <EXTI_void_init+0x42>
    1758:	a5 e5       	ldi	r26, 0x55	; 85
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e5 e5       	ldi	r30, 0x55	; 85
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	8e 7f       	andi	r24, 0xFE	; 254
    1764:	8c 93       	st	X, r24
	agn_bit(EXTI_MCUCR, EXTI_ISC01, (get_bit((EXTI_config -> sen_lev_int0), 1)));
    1766:	e9 81       	ldd	r30, Y+1	; 0x01
    1768:	fa 81       	ldd	r31, Y+2	; 0x02
    176a:	80 81       	ld	r24, Z
    176c:	86 95       	lsr	r24
    176e:	83 70       	andi	r24, 0x03	; 3
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	82 70       	andi	r24, 0x02	; 2
    1776:	90 70       	andi	r25, 0x00	; 0
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	41 f0       	breq	.+16     	; 0x178c <EXTI_void_init+0x68>
    177c:	a5 e5       	ldi	r26, 0x55	; 85
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e5 e5       	ldi	r30, 0x55	; 85
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	82 60       	ori	r24, 0x02	; 2
    1788:	8c 93       	st	X, r24
    178a:	07 c0       	rjmp	.+14     	; 0x179a <EXTI_void_init+0x76>
    178c:	a5 e5       	ldi	r26, 0x55	; 85
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e5 e5       	ldi	r30, 0x55	; 85
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	8d 7f       	andi	r24, 0xFD	; 253
    1798:	8c 93       	st	X, r24

	// set sense level of INT1
	/* for more optimization its recommended to configure all using clear all 3 bits then or the new value */
	agn_bit(EXTI_MCUCR, EXTI_ISC10, (get_bit((EXTI_config -> sen_lev_int1), 0)));
    179a:	e9 81       	ldd	r30, Y+1	; 0x01
    179c:	fa 81       	ldd	r31, Y+2	; 0x02
    179e:	80 81       	ld	r24, Z
    17a0:	82 95       	swap	r24
    17a2:	8f 70       	andi	r24, 0x0F	; 15
    17a4:	83 70       	andi	r24, 0x03	; 3
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	81 70       	andi	r24, 0x01	; 1
    17ac:	90 70       	andi	r25, 0x00	; 0
    17ae:	88 23       	and	r24, r24
    17b0:	41 f0       	breq	.+16     	; 0x17c2 <EXTI_void_init+0x9e>
    17b2:	a5 e5       	ldi	r26, 0x55	; 85
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e5 e5       	ldi	r30, 0x55	; 85
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	84 60       	ori	r24, 0x04	; 4
    17be:	8c 93       	st	X, r24
    17c0:	07 c0       	rjmp	.+14     	; 0x17d0 <EXTI_void_init+0xac>
    17c2:	a5 e5       	ldi	r26, 0x55	; 85
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e5 e5       	ldi	r30, 0x55	; 85
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8b 7f       	andi	r24, 0xFB	; 251
    17ce:	8c 93       	st	X, r24
	agn_bit(EXTI_MCUCR, EXTI_ISC11, (get_bit((EXTI_config -> sen_lev_int1), 1)));
    17d0:	e9 81       	ldd	r30, Y+1	; 0x01
    17d2:	fa 81       	ldd	r31, Y+2	; 0x02
    17d4:	80 81       	ld	r24, Z
    17d6:	82 95       	swap	r24
    17d8:	8f 70       	andi	r24, 0x0F	; 15
    17da:	83 70       	andi	r24, 0x03	; 3
    17dc:	88 2f       	mov	r24, r24
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	82 70       	andi	r24, 0x02	; 2
    17e2:	90 70       	andi	r25, 0x00	; 0
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	41 f0       	breq	.+16     	; 0x17f8 <EXTI_void_init+0xd4>
    17e8:	a5 e5       	ldi	r26, 0x55	; 85
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e5 e5       	ldi	r30, 0x55	; 85
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	88 60       	ori	r24, 0x08	; 8
    17f4:	8c 93       	st	X, r24
    17f6:	07 c0       	rjmp	.+14     	; 0x1806 <EXTI_void_init+0xe2>
    17f8:	a5 e5       	ldi	r26, 0x55	; 85
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e5 e5       	ldi	r30, 0x55	; 85
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	87 7f       	andi	r24, 0xF7	; 247
    1804:	8c 93       	st	X, r24

	// set sense level of INT2
	agn_bit(EXTI_MCUCSR, EXTI_ISC2, (EXTI_config -> sen_lev_int2));
    1806:	e9 81       	ldd	r30, Y+1	; 0x01
    1808:	fa 81       	ldd	r31, Y+2	; 0x02
    180a:	80 81       	ld	r24, Z
    180c:	80 78       	andi	r24, 0x80	; 128
    180e:	88 23       	and	r24, r24
    1810:	41 f0       	breq	.+16     	; 0x1822 <EXTI_void_init+0xfe>
    1812:	a4 e5       	ldi	r26, 0x54	; 84
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e4 e5       	ldi	r30, 0x54	; 84
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	80 64       	ori	r24, 0x40	; 64
    181e:	8c 93       	st	X, r24
    1820:	07 c0       	rjmp	.+14     	; 0x1830 <EXTI_void_init+0x10c>
    1822:	a4 e5       	ldi	r26, 0x54	; 84
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e4 e5       	ldi	r30, 0x54	; 84
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8f 7b       	andi	r24, 0xBF	; 191
    182e:	8c 93       	st	X, r24

	// configure peripheral interrupt
	/* for more optimization its recommended to configure all using clear all 3 bits then or the new value */
	agn_bit(EXTI_GICR, EXTI_PIE0, (EXTI_config -> PIE_int0));
    1830:	e9 81       	ldd	r30, Y+1	; 0x01
    1832:	fa 81       	ldd	r31, Y+2	; 0x02
    1834:	80 81       	ld	r24, Z
    1836:	81 70       	andi	r24, 0x01	; 1
    1838:	88 23       	and	r24, r24
    183a:	41 f0       	breq	.+16     	; 0x184c <EXTI_void_init+0x128>
    183c:	ab e5       	ldi	r26, 0x5B	; 91
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	eb e5       	ldi	r30, 0x5B	; 91
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	80 64       	ori	r24, 0x40	; 64
    1848:	8c 93       	st	X, r24
    184a:	07 c0       	rjmp	.+14     	; 0x185a <EXTI_void_init+0x136>
    184c:	ab e5       	ldi	r26, 0x5B	; 91
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	eb e5       	ldi	r30, 0x5B	; 91
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	8f 7b       	andi	r24, 0xBF	; 191
    1858:	8c 93       	st	X, r24
	agn_bit(EXTI_GICR, EXTI_PIE1, (EXTI_config -> PIE_int1));
    185a:	e9 81       	ldd	r30, Y+1	; 0x01
    185c:	fa 81       	ldd	r31, Y+2	; 0x02
    185e:	80 81       	ld	r24, Z
    1860:	88 70       	andi	r24, 0x08	; 8
    1862:	88 23       	and	r24, r24
    1864:	41 f0       	breq	.+16     	; 0x1876 <EXTI_void_init+0x152>
    1866:	ab e5       	ldi	r26, 0x5B	; 91
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	eb e5       	ldi	r30, 0x5B	; 91
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	80 68       	ori	r24, 0x80	; 128
    1872:	8c 93       	st	X, r24
    1874:	07 c0       	rjmp	.+14     	; 0x1884 <EXTI_void_init+0x160>
    1876:	ab e5       	ldi	r26, 0x5B	; 91
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	eb e5       	ldi	r30, 0x5B	; 91
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 77       	andi	r24, 0x7F	; 127
    1882:	8c 93       	st	X, r24
	agn_bit(EXTI_GICR, EXTI_PIE2, (EXTI_config -> PIE_int2));
    1884:	e9 81       	ldd	r30, Y+1	; 0x01
    1886:	fa 81       	ldd	r31, Y+2	; 0x02
    1888:	80 81       	ld	r24, Z
    188a:	80 74       	andi	r24, 0x40	; 64
    188c:	88 23       	and	r24, r24
    188e:	41 f0       	breq	.+16     	; 0x18a0 <EXTI_void_init+0x17c>
    1890:	ab e5       	ldi	r26, 0x5B	; 91
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	eb e5       	ldi	r30, 0x5B	; 91
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	80 62       	ori	r24, 0x20	; 32
    189c:	8c 93       	st	X, r24
    189e:	07 c0       	rjmp	.+14     	; 0x18ae <EXTI_void_init+0x18a>
    18a0:	ab e5       	ldi	r26, 0x5B	; 91
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	eb e5       	ldi	r30, 0x5B	; 91
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	8f 7d       	andi	r24, 0xDF	; 223
    18ac:	8c 93       	st	X, r24

	// Enable global interrupt
	set_bit(EXTI_SREG, EXTI_GIE);
    18ae:	af e5       	ldi	r26, 0x5F	; 95
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ef e5       	ldi	r30, 0x5F	; 95
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	80 68       	ori	r24, 0x80	; 128
    18ba:	8c 93       	st	X, r24
}
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <EXTI_get_INT_flag>:

u8 EXTI_get_INT_flag(u8 copy_INT_id){
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <EXTI_get_INT_flag+0x6>
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <EXTI_get_INT_flag+0x8>
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	89 83       	std	Y+1, r24	; 0x01
	 *		copy_INT_id: Interrupt id of the selected interrupt
	 *	Function does not return any value, Hence the function is worthless when using interrupting method
	 *	as the ISR will always reset the flag when it is called.
	 */
	// Switching on the selected interrupt
	switch (copy_INT_id){
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	3c 83       	std	Y+4, r19	; 0x04
    18dc:	2b 83       	std	Y+3, r18	; 0x03
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	9c 81       	ldd	r25, Y+4	; 0x04
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	91 05       	cpc	r25, r1
    18e6:	a1 f0       	breq	.+40     	; 0x1910 <EXTI_get_INT_flag+0x4a>
    18e8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ea:	3c 81       	ldd	r19, Y+4	; 0x04
    18ec:	22 30       	cpi	r18, 0x02	; 2
    18ee:	31 05       	cpc	r19, r1
    18f0:	c1 f0       	breq	.+48     	; 0x1922 <EXTI_get_INT_flag+0x5c>
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	f1 f4       	brne	.+60     	; 0x1936 <EXTI_get_INT_flag+0x70>
	// Return the INT0 flag is selected
	case INT0:
		return get_bit(EXTI_GIFR, EXTI_PIF0);
    18fa:	ea e5       	ldi	r30, 0x5A	; 90
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	82 95       	swap	r24
    1902:	86 95       	lsr	r24
    1904:	86 95       	lsr	r24
    1906:	83 70       	andi	r24, 0x03	; 3
    1908:	98 2f       	mov	r25, r24
    190a:	91 70       	andi	r25, 0x01	; 1
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	14 c0       	rjmp	.+40     	; 0x1938 <EXTI_get_INT_flag+0x72>
	// Return the INT1 flag is selected
	case INT1:
		return get_bit(EXTI_GIFR, EXTI_PIF1);
    1910:	ea e5       	ldi	r30, 0x5A	; 90
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	28 2f       	mov	r18, r24
    1918:	22 1f       	adc	r18, r18
    191a:	22 27       	eor	r18, r18
    191c:	22 1f       	adc	r18, r18
    191e:	2a 83       	std	Y+2, r18	; 0x02
    1920:	0b c0       	rjmp	.+22     	; 0x1938 <EXTI_get_INT_flag+0x72>
	// Return the INT2 flag is selected
	case INT2:
		return get_bit(EXTI_GIFR, EXTI_PIF2);
    1922:	ea e5       	ldi	r30, 0x5A	; 90
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	82 95       	swap	r24
    192a:	86 95       	lsr	r24
    192c:	87 70       	andi	r24, 0x07	; 7
    192e:	38 2f       	mov	r19, r24
    1930:	31 70       	andi	r19, 0x01	; 1
    1932:	3a 83       	std	Y+2, r19	; 0x02
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <EXTI_get_INT_flag+0x72>
	// Return 0 if wrong flag value is passed
	default:
		return 0;
    1936:	1a 82       	std	Y+2, r1	; 0x02
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <EXTI_void_INT_callback>:

void EXTI_void_INT_callback(u8 copy_INT_id, void (*ptr_callback_function)(void)){
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <EXTI_void_INT_callback+0x6>
    194e:	0f 92       	push	r0
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	7b 83       	std	Y+3, r23	; 0x03
    1958:	6a 83       	std	Y+2, r22	; 0x02
	 *							when the flag is raised.
	 *	Function does not return any value, Hence the function will be called only to address the callback
	 *	function or change it.
	 */
	// Store the callback function address in the container is the passed INT selection is right
	if(copy_INT_id < 3)
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	83 30       	cpi	r24, 0x03	; 3
    195e:	60 f4       	brcc	.+24     	; 0x1978 <EXTI_void_INT_callback+0x30>
		call_back_function[copy_INT_id]= ptr_callback_function;
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	fc 01       	movw	r30, r24
    196c:	e8 56       	subi	r30, 0x68	; 104
    196e:	fe 4f       	sbci	r31, 0xFE	; 254
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	9b 81       	ldd	r25, Y+3	; 0x03
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
}
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <__vector_1>:

void __vector_1 (void){
    1984:	1f 92       	push	r1
    1986:	0f 92       	push	r0
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	0f 92       	push	r0
    198c:	11 24       	eor	r1, r1
    198e:	2f 93       	push	r18
    1990:	3f 93       	push	r19
    1992:	4f 93       	push	r20
    1994:	5f 93       	push	r21
    1996:	6f 93       	push	r22
    1998:	7f 93       	push	r23
    199a:	8f 93       	push	r24
    199c:	9f 93       	push	r25
    199e:	af 93       	push	r26
    19a0:	bf 93       	push	r27
    19a2:	ef 93       	push	r30
    19a4:	ff 93       	push	r31
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	External Interrupt 0 ISR.
	 */
	// call the callback function by reference is stored, else nothing will happen
	if(call_back_function[0] != NULL)
    19ae:	80 91 98 01 	lds	r24, 0x0198
    19b2:	90 91 99 01 	lds	r25, 0x0199
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	29 f0       	breq	.+10     	; 0x19c4 <__vector_1+0x40>
		call_back_function[0]();
    19ba:	e0 91 98 01 	lds	r30, 0x0198
    19be:	f0 91 99 01 	lds	r31, 0x0199
    19c2:	09 95       	icall
}
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	ff 91       	pop	r31
    19ca:	ef 91       	pop	r30
    19cc:	bf 91       	pop	r27
    19ce:	af 91       	pop	r26
    19d0:	9f 91       	pop	r25
    19d2:	8f 91       	pop	r24
    19d4:	7f 91       	pop	r23
    19d6:	6f 91       	pop	r22
    19d8:	5f 91       	pop	r21
    19da:	4f 91       	pop	r20
    19dc:	3f 91       	pop	r19
    19de:	2f 91       	pop	r18
    19e0:	0f 90       	pop	r0
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	0f 90       	pop	r0
    19e6:	1f 90       	pop	r1
    19e8:	18 95       	reti

000019ea <__vector_2>:

void __vector_2 (void){
    19ea:	1f 92       	push	r1
    19ec:	0f 92       	push	r0
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	0f 92       	push	r0
    19f2:	11 24       	eor	r1, r1
    19f4:	2f 93       	push	r18
    19f6:	3f 93       	push	r19
    19f8:	4f 93       	push	r20
    19fa:	5f 93       	push	r21
    19fc:	6f 93       	push	r22
    19fe:	7f 93       	push	r23
    1a00:	8f 93       	push	r24
    1a02:	9f 93       	push	r25
    1a04:	af 93       	push	r26
    1a06:	bf 93       	push	r27
    1a08:	ef 93       	push	r30
    1a0a:	ff 93       	push	r31
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	External Interrupt 1 ISR.
	 */
	// call the callback function by reference is stored, else nothing will happen
	if(call_back_function[1] != NULL)
    1a14:	80 91 9a 01 	lds	r24, 0x019A
    1a18:	90 91 9b 01 	lds	r25, 0x019B
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	29 f0       	breq	.+10     	; 0x1a2a <__vector_2+0x40>
		call_back_function[1]();
    1a20:	e0 91 9a 01 	lds	r30, 0x019A
    1a24:	f0 91 9b 01 	lds	r31, 0x019B
    1a28:	09 95       	icall
}
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	ff 91       	pop	r31
    1a30:	ef 91       	pop	r30
    1a32:	bf 91       	pop	r27
    1a34:	af 91       	pop	r26
    1a36:	9f 91       	pop	r25
    1a38:	8f 91       	pop	r24
    1a3a:	7f 91       	pop	r23
    1a3c:	6f 91       	pop	r22
    1a3e:	5f 91       	pop	r21
    1a40:	4f 91       	pop	r20
    1a42:	3f 91       	pop	r19
    1a44:	2f 91       	pop	r18
    1a46:	0f 90       	pop	r0
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	0f 90       	pop	r0
    1a4c:	1f 90       	pop	r1
    1a4e:	18 95       	reti

00001a50 <__vector_3>:

void __vector_3 (void){
    1a50:	1f 92       	push	r1
    1a52:	0f 92       	push	r0
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	0f 92       	push	r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	2f 93       	push	r18
    1a5c:	3f 93       	push	r19
    1a5e:	4f 93       	push	r20
    1a60:	5f 93       	push	r21
    1a62:	6f 93       	push	r22
    1a64:	7f 93       	push	r23
    1a66:	8f 93       	push	r24
    1a68:	9f 93       	push	r25
    1a6a:	af 93       	push	r26
    1a6c:	bf 93       	push	r27
    1a6e:	ef 93       	push	r30
    1a70:	ff 93       	push	r31
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	External Interrupt 2 ISR.
	 */
	// call the callback function by reference is stored, else nothing will happen
	if(call_back_function[2] != NULL)
    1a7a:	80 91 9c 01 	lds	r24, 0x019C
    1a7e:	90 91 9d 01 	lds	r25, 0x019D
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	29 f0       	breq	.+10     	; 0x1a90 <__vector_3+0x40>
		call_back_function[2]();
    1a86:	e0 91 9c 01 	lds	r30, 0x019C
    1a8a:	f0 91 9d 01 	lds	r31, 0x019D
    1a8e:	09 95       	icall
}
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	ff 91       	pop	r31
    1a96:	ef 91       	pop	r30
    1a98:	bf 91       	pop	r27
    1a9a:	af 91       	pop	r26
    1a9c:	9f 91       	pop	r25
    1a9e:	8f 91       	pop	r24
    1aa0:	7f 91       	pop	r23
    1aa2:	6f 91       	pop	r22
    1aa4:	5f 91       	pop	r21
    1aa6:	4f 91       	pop	r20
    1aa8:	3f 91       	pop	r19
    1aaa:	2f 91       	pop	r18
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	0f 90       	pop	r0
    1ab2:	1f 90       	pop	r1
    1ab4:	18 95       	reti

00001ab6 <LCD_pow>:
#include "../Inc/DIO/DIO_interface.h"

/******************************************************************************/

/* LCD helper functions implementation */
s32 LCD_pow(u8 val, u8 power){
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	27 97       	sbiw	r28, 0x07	; 7
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	8e 83       	std	Y+6, r24	; 0x06
    1acc:	6f 83       	std	Y+7, r22	; 0x07
	 *	Return::
	 *		power_res>> the result of the exponential function
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
    1ace:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a0 e0       	ldi	r26, 0x00	; 0
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	8a 83       	std	Y+2, r24	; 0x02
    1ada:	9b 83       	std	Y+3, r25	; 0x03
    1adc:	ac 83       	std	Y+4, r26	; 0x04
    1ade:	bd 83       	std	Y+5, r27	; 0x05
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    1ae0:	19 82       	std	Y+1, r1	; 0x01
    1ae2:	16 c0       	rjmp	.+44     	; 0x1b10 <LCD_pow+0x5a>
		// Remultibly the value by itself
		power_res*= val;
    1ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	9b 81       	ldd	r25, Y+3	; 0x03
    1af2:	ac 81       	ldd	r26, Y+4	; 0x04
    1af4:	bd 81       	ldd	r27, Y+5	; 0x05
    1af6:	bc 01       	movw	r22, r24
    1af8:	cd 01       	movw	r24, r26
    1afa:	0e 94 10 3d 	call	0x7a20	; 0x7a20 <__mulsi3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	8a 83       	std	Y+2, r24	; 0x02
    1b04:	9b 83       	std	Y+3, r25	; 0x03
    1b06:	ac 83       	std	Y+4, r26	; 0x04
    1b08:	bd 83       	std	Y+5, r27	; 0x05
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	8f 5f       	subi	r24, 0xFF	; 255
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	8f 81       	ldd	r24, Y+7	; 0x07
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	28 17       	cp	r18, r24
    1b20:	39 07       	cpc	r19, r25
    1b22:	04 f3       	brlt	.-64     	; 0x1ae4 <LCD_pow+0x2e>
		// Remultibly the value by itself
		power_res*= val;
	// Return the result in the container
	return power_res;
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	9b 81       	ldd	r25, Y+3	; 0x03
    1b28:	ac 81       	ldd	r26, Y+4	; 0x04
    1b2a:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	27 96       	adiw	r28, 0x07	; 7
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <LCD_write_data_8bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_8bit(u8 lcd_copy_word_8bit){
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	e1 97       	sbiw	r28, 0x31	; 49
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_word_8bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive data
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	62 e0       	ldi	r22, 0x02	; 2
    1b5c:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	61 e0       	ldi	r22, 0x01	; 1
    1b64:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a0 e8       	ldi	r26, 0x80	; 128
    1b6e:	bf e3       	ldi	r27, 0x3F	; 63
    1b70:	8d a7       	std	Y+45, r24	; 0x2d
    1b72:	9e a7       	std	Y+46, r25	; 0x2e
    1b74:	af a7       	std	Y+47, r26	; 0x2f
    1b76:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b78:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b7a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b80:	2b ea       	ldi	r18, 0xAB	; 171
    1b82:	3a ea       	ldi	r19, 0xAA	; 170
    1b84:	4a e2       	ldi	r20, 0x2A	; 42
    1b86:	50 e4       	ldi	r21, 0x40	; 64
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	89 a7       	std	Y+41, r24	; 0x29
    1b92:	9a a7       	std	Y+42, r25	; 0x2a
    1b94:	ab a7       	std	Y+43, r26	; 0x2b
    1b96:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1b98:	69 a5       	ldd	r22, Y+41	; 0x29
    1b9a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	1c f4       	brge	.+6      	; 0x1bb6 <LCD_write_data_8bit+0x74>
		__ticks = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	88 a7       	std	Y+40, r24	; 0x28
    1bb4:	91 c0       	rjmp	.+290    	; 0x1cd8 <LCD_write_data_8bit+0x196>
	else if (__tmp > 255)
    1bb6:	69 a5       	ldd	r22, Y+41	; 0x29
    1bb8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bba:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	53 e4       	ldi	r21, 0x43	; 67
    1bc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	0c f0       	brlt	.+2      	; 0x1bd0 <LCD_write_data_8bit+0x8e>
    1bce:	7b c0       	rjmp	.+246    	; 0x1cc6 <LCD_write_data_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    1bd0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1bd2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1bd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd6:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a e7       	ldi	r20, 0x7A	; 122
    1bde:	54 e4       	ldi	r21, 0x44	; 68
    1be0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8c a3       	std	Y+36, r24	; 0x24
    1bea:	9d a3       	std	Y+37, r25	; 0x25
    1bec:	ae a3       	std	Y+38, r26	; 0x26
    1bee:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	6c a1       	ldd	r22, Y+36	; 0x24
    1bf2:	7d a1       	ldd	r23, Y+37	; 0x25
    1bf4:	8e a1       	ldd	r24, Y+38	; 0x26
    1bf6:	9f a1       	ldd	r25, Y+39	; 0x27
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a ef       	ldi	r20, 0xFA	; 250
    1bfe:	54 e4       	ldi	r21, 0x44	; 68
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	88 a3       	std	Y+32, r24	; 0x20
    1c0a:	99 a3       	std	Y+33, r25	; 0x21
    1c0c:	aa a3       	std	Y+34, r26	; 0x22
    1c0e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1c10:	68 a1       	ldd	r22, Y+32	; 0x20
    1c12:	79 a1       	ldd	r23, Y+33	; 0x21
    1c14:	8a a1       	ldd	r24, Y+34	; 0x22
    1c16:	9b a1       	ldd	r25, Y+35	; 0x23
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <LCD_write_data_8bit+0xf0>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9f 8f       	std	Y+31, r25	; 0x1f
    1c2e:	8e 8f       	std	Y+30, r24	; 0x1e
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <LCD_write_data_8bit+0x16e>
	else if (__tmp > 65535)
    1c32:	68 a1       	ldd	r22, Y+32	; 0x20
    1c34:	79 a1       	ldd	r23, Y+33	; 0x21
    1c36:	8a a1       	ldd	r24, Y+34	; 0x22
    1c38:	9b a1       	ldd	r25, Y+35	; 0x23
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <LCD_write_data_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	6c a1       	ldd	r22, Y+36	; 0x24
    1c4c:	7d a1       	ldd	r23, Y+37	; 0x25
    1c4e:	8e a1       	ldd	r24, Y+38	; 0x26
    1c50:	9f a1       	ldd	r25, Y+39	; 0x27
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9f 8f       	std	Y+31, r25	; 0x1f
    1c70:	8e 8f       	std	Y+30, r24	; 0x1e
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <LCD_write_data_8bit+0x150>
    1c74:	88 ec       	ldi	r24, 0xC8	; 200
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9d 8f       	std	Y+29, r25	; 0x1d
    1c7a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c7e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_write_data_8bit+0x13e>
    1c84:	9d 8f       	std	Y+29, r25	; 0x1d
    1c86:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	9f 8f       	std	Y+31, r25	; 0x1f
    1c90:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c94:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <LCD_write_data_8bit+0x132>
    1c9a:	24 c0       	rjmp	.+72     	; 0x1ce4 <LCD_write_data_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	68 a1       	ldd	r22, Y+32	; 0x20
    1c9e:	79 a1       	ldd	r23, Y+33	; 0x21
    1ca0:	8a a1       	ldd	r24, Y+34	; 0x22
    1ca2:	9b a1       	ldd	r25, Y+35	; 0x23
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	9f 8f       	std	Y+31, r25	; 0x1f
    1cae:	8e 8f       	std	Y+30, r24	; 0x1e
    1cb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cb4:	9b 8f       	std	Y+27, r25	; 0x1b
    1cb6:	8a 8f       	std	Y+26, r24	; 0x1a
    1cb8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_write_data_8bit+0x17a>
    1cc0:	9b 8f       	std	Y+27, r25	; 0x1b
    1cc2:	8a 8f       	std	Y+26, r24	; 0x1a
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <LCD_write_data_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cc6:	69 a5       	ldd	r22, Y+41	; 0x29
    1cc8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ccc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	88 a7       	std	Y+40, r24	; 0x28
    1cd8:	88 a5       	ldd	r24, Y+40	; 0x28
    1cda:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cdc:	89 8d       	ldd	r24, Y+25	; 0x19
    1cde:	8a 95       	dec	r24
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_write_data_8bit+0x19c>
    1ce2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	a0 e8       	ldi	r26, 0x80	; 128
    1cf2:	bf e3       	ldi	r27, 0x3F	; 63
    1cf4:	8d 8b       	std	Y+21, r24	; 0x15
    1cf6:	9e 8b       	std	Y+22, r25	; 0x16
    1cf8:	af 8b       	std	Y+23, r26	; 0x17
    1cfa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1d00:	8f 89       	ldd	r24, Y+23	; 0x17
    1d02:	98 8d       	ldd	r25, Y+24	; 0x18
    1d04:	2b ea       	ldi	r18, 0xAB	; 171
    1d06:	3a ea       	ldi	r19, 0xAA	; 170
    1d08:	4a e2       	ldi	r20, 0x2A	; 42
    1d0a:	50 e4       	ldi	r21, 0x40	; 64
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	89 8b       	std	Y+17, r24	; 0x11
    1d16:	9a 8b       	std	Y+18, r25	; 0x12
    1d18:	ab 8b       	std	Y+19, r26	; 0x13
    1d1a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d1c:	69 89       	ldd	r22, Y+17	; 0x11
    1d1e:	7a 89       	ldd	r23, Y+18	; 0x12
    1d20:	8b 89       	ldd	r24, Y+19	; 0x13
    1d22:	9c 89       	ldd	r25, Y+20	; 0x14
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	5f e3       	ldi	r21, 0x3F	; 63
    1d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d30:	88 23       	and	r24, r24
    1d32:	1c f4       	brge	.+6      	; 0x1d3a <LCD_write_data_8bit+0x1f8>
		__ticks = 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	88 8b       	std	Y+16, r24	; 0x10
    1d38:	91 c0       	rjmp	.+290    	; 0x1e5c <LCD_write_data_8bit+0x31a>
	else if (__tmp > 255)
    1d3a:	69 89       	ldd	r22, Y+17	; 0x11
    1d3c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d40:	9c 89       	ldd	r25, Y+20	; 0x14
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	4f e7       	ldi	r20, 0x7F	; 127
    1d48:	53 e4       	ldi	r21, 0x43	; 67
    1d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4e:	18 16       	cp	r1, r24
    1d50:	0c f0       	brlt	.+2      	; 0x1d54 <LCD_write_data_8bit+0x212>
    1d52:	7b c0       	rjmp	.+246    	; 0x1e4a <LCD_write_data_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1d54:	6d 89       	ldd	r22, Y+21	; 0x15
    1d56:	7e 89       	ldd	r23, Y+22	; 0x16
    1d58:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a e7       	ldi	r20, 0x7A	; 122
    1d62:	54 e4       	ldi	r21, 0x44	; 68
    1d64:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8c 87       	std	Y+12, r24	; 0x0c
    1d6e:	9d 87       	std	Y+13, r25	; 0x0d
    1d70:	ae 87       	std	Y+14, r26	; 0x0e
    1d72:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d76:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d78:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4a ef       	ldi	r20, 0xFA	; 250
    1d82:	54 e4       	ldi	r21, 0x44	; 68
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	88 87       	std	Y+8, r24	; 0x08
    1d8e:	99 87       	std	Y+9, r25	; 0x09
    1d90:	aa 87       	std	Y+10, r26	; 0x0a
    1d92:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d94:	68 85       	ldd	r22, Y+8	; 0x08
    1d96:	79 85       	ldd	r23, Y+9	; 0x09
    1d98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <LCD_write_data_8bit+0x274>
		__ticks = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9f 83       	std	Y+7, r25	; 0x07
    1db2:	8e 83       	std	Y+6, r24	; 0x06
    1db4:	3f c0       	rjmp	.+126    	; 0x1e34 <LCD_write_data_8bit+0x2f2>
	else if (__tmp > 65535)
    1db6:	68 85       	ldd	r22, Y+8	; 0x08
    1db8:	79 85       	ldd	r23, Y+9	; 0x09
    1dba:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	4c f5       	brge	.+82     	; 0x1e20 <LCD_write_data_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dd0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e2       	ldi	r20, 0x20	; 32
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9f 83       	std	Y+7, r25	; 0x07
    1df4:	8e 83       	std	Y+6, r24	; 0x06
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <LCD_write_data_8bit+0x2d4>
    1df8:	88 ec       	ldi	r24, 0xC8	; 200
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9d 83       	std	Y+5, r25	; 0x05
    1dfe:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e00:	8c 81       	ldd	r24, Y+4	; 0x04
    1e02:	9d 81       	ldd	r25, Y+5	; 0x05
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_write_data_8bit+0x2c2>
    1e08:	9d 83       	std	Y+5, r25	; 0x05
    1e0a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	9f 83       	std	Y+7, r25	; 0x07
    1e14:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e16:	8e 81       	ldd	r24, Y+6	; 0x06
    1e18:	9f 81       	ldd	r25, Y+7	; 0x07
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <LCD_write_data_8bit+0x2b6>
    1e1e:	24 c0       	rjmp	.+72     	; 0x1e68 <LCD_write_data_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e20:	68 85       	ldd	r22, Y+8	; 0x08
    1e22:	79 85       	ldd	r23, Y+9	; 0x09
    1e24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9f 83       	std	Y+7, r25	; 0x07
    1e32:	8e 83       	std	Y+6, r24	; 0x06
    1e34:	8e 81       	ldd	r24, Y+6	; 0x06
    1e36:	9f 81       	ldd	r25, Y+7	; 0x07
    1e38:	9b 83       	std	Y+3, r25	; 0x03
    1e3a:	8a 83       	std	Y+2, r24	; 0x02
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_write_data_8bit+0x2fe>
    1e44:	9b 83       	std	Y+3, r25	; 0x03
    1e46:	8a 83       	std	Y+2, r24	; 0x02
    1e48:	0f c0       	rjmp	.+30     	; 0x1e68 <LCD_write_data_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e4a:	69 89       	ldd	r22, Y+17	; 0x11
    1e4c:	7a 89       	ldd	r23, Y+18	; 0x12
    1e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e50:	9c 89       	ldd	r25, Y+20	; 0x14
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	88 8b       	std	Y+16, r24	; 0x10
    1e5c:	88 89       	ldd	r24, Y+16	; 0x10
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	8a 95       	dec	r24
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <LCD_write_data_8bit+0x320>
    1e66:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the data packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_word_8bit);
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e6c:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1e70:	82 e0       	ldi	r24, 0x02	; 2
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
}
    1e78:	e1 96       	adiw	r28, 0x31	; 49
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <LCD_write_cmd_8bit>:

void LCD_write_cmd_8bit(u8 lcd_copy_cmd_8bit){
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	e1 97       	sbiw	r28, 0x31	; 49
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_cmd_8bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    1ea0:	82 e0       	ldi	r24, 0x02	; 2
    1ea2:	62 e0       	ldi	r22, 0x02	; 2
    1ea4:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	61 e0       	ldi	r22, 0x01	; 1
    1eac:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e8       	ldi	r26, 0x80	; 128
    1eb6:	bf e3       	ldi	r27, 0x3F	; 63
    1eb8:	8d a7       	std	Y+45, r24	; 0x2d
    1eba:	9e a7       	std	Y+46, r25	; 0x2e
    1ebc:	af a7       	std	Y+47, r26	; 0x2f
    1ebe:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ec0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ec2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ec4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec8:	2b ea       	ldi	r18, 0xAB	; 171
    1eca:	3a ea       	ldi	r19, 0xAA	; 170
    1ecc:	4a e2       	ldi	r20, 0x2A	; 42
    1ece:	50 e4       	ldi	r21, 0x40	; 64
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	89 a7       	std	Y+41, r24	; 0x29
    1eda:	9a a7       	std	Y+42, r25	; 0x2a
    1edc:	ab a7       	std	Y+43, r26	; 0x2b
    1ede:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ee0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ee2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ee4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	1c f4       	brge	.+6      	; 0x1efe <LCD_write_cmd_8bit+0x74>
		__ticks = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	88 a7       	std	Y+40, r24	; 0x28
    1efc:	91 c0       	rjmp	.+290    	; 0x2020 <LCD_write_cmd_8bit+0x196>
	else if (__tmp > 255)
    1efe:	69 a5       	ldd	r22, Y+41	; 0x29
    1f00:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f02:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f04:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	53 e4       	ldi	r21, 0x43	; 67
    1f0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	0c f0       	brlt	.+2      	; 0x1f18 <LCD_write_cmd_8bit+0x8e>
    1f16:	7b c0       	rjmp	.+246    	; 0x200e <LCD_write_cmd_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    1f18:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f1a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a e7       	ldi	r20, 0x7A	; 122
    1f26:	54 e4       	ldi	r21, 0x44	; 68
    1f28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	8c a3       	std	Y+36, r24	; 0x24
    1f32:	9d a3       	std	Y+37, r25	; 0x25
    1f34:	ae a3       	std	Y+38, r26	; 0x26
    1f36:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f38:	6c a1       	ldd	r22, Y+36	; 0x24
    1f3a:	7d a1       	ldd	r23, Y+37	; 0x25
    1f3c:	8e a1       	ldd	r24, Y+38	; 0x26
    1f3e:	9f a1       	ldd	r25, Y+39	; 0x27
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a ef       	ldi	r20, 0xFA	; 250
    1f46:	54 e4       	ldi	r21, 0x44	; 68
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	88 a3       	std	Y+32, r24	; 0x20
    1f52:	99 a3       	std	Y+33, r25	; 0x21
    1f54:	aa a3       	std	Y+34, r26	; 0x22
    1f56:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f58:	68 a1       	ldd	r22, Y+32	; 0x20
    1f5a:	79 a1       	ldd	r23, Y+33	; 0x21
    1f5c:	8a a1       	ldd	r24, Y+34	; 0x22
    1f5e:	9b a1       	ldd	r25, Y+35	; 0x23
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	2c f4       	brge	.+10     	; 0x1f7a <LCD_write_cmd_8bit+0xf0>
		__ticks = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9f 8f       	std	Y+31, r25	; 0x1f
    1f76:	8e 8f       	std	Y+30, r24	; 0x1e
    1f78:	3f c0       	rjmp	.+126    	; 0x1ff8 <LCD_write_cmd_8bit+0x16e>
	else if (__tmp > 65535)
    1f7a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f7c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f7e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f80:	9b a1       	ldd	r25, Y+35	; 0x23
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	4c f5       	brge	.+82     	; 0x1fe4 <LCD_write_cmd_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	6c a1       	ldd	r22, Y+36	; 0x24
    1f94:	7d a1       	ldd	r23, Y+37	; 0x25
    1f96:	8e a1       	ldd	r24, Y+38	; 0x26
    1f98:	9f a1       	ldd	r25, Y+39	; 0x27
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9f 8f       	std	Y+31, r25	; 0x1f
    1fb8:	8e 8f       	std	Y+30, r24	; 0x1e
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <LCD_write_cmd_8bit+0x150>
    1fbc:	88 ec       	ldi	r24, 0xC8	; 200
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9d 8f       	std	Y+29, r25	; 0x1d
    1fc2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fc4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fc6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <LCD_write_cmd_8bit+0x13e>
    1fcc:	9d 8f       	std	Y+29, r25	; 0x1d
    1fce:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fd2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	9f 8f       	std	Y+31, r25	; 0x1f
    1fd8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fdc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	69 f7       	brne	.-38     	; 0x1fbc <LCD_write_cmd_8bit+0x132>
    1fe2:	24 c0       	rjmp	.+72     	; 0x202c <LCD_write_cmd_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe4:	68 a1       	ldd	r22, Y+32	; 0x20
    1fe6:	79 a1       	ldd	r23, Y+33	; 0x21
    1fe8:	8a a1       	ldd	r24, Y+34	; 0x22
    1fea:	9b a1       	ldd	r25, Y+35	; 0x23
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9f 8f       	std	Y+31, r25	; 0x1f
    1ff6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ff8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ffa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ffc:	9b 8f       	std	Y+27, r25	; 0x1b
    1ffe:	8a 8f       	std	Y+26, r24	; 0x1a
    2000:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2002:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_write_cmd_8bit+0x17a>
    2008:	9b 8f       	std	Y+27, r25	; 0x1b
    200a:	8a 8f       	std	Y+26, r24	; 0x1a
    200c:	0f c0       	rjmp	.+30     	; 0x202c <LCD_write_cmd_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    200e:	69 a5       	ldd	r22, Y+41	; 0x29
    2010:	7a a5       	ldd	r23, Y+42	; 0x2a
    2012:	8b a5       	ldd	r24, Y+43	; 0x2b
    2014:	9c a5       	ldd	r25, Y+44	; 0x2c
    2016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	88 a7       	std	Y+40, r24	; 0x28
    2020:	88 a5       	ldd	r24, Y+40	; 0x28
    2022:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2024:	89 8d       	ldd	r24, Y+25	; 0x19
    2026:	8a 95       	dec	r24
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_write_cmd_8bit+0x19c>
    202a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e8       	ldi	r26, 0x80	; 128
    203a:	bf e3       	ldi	r27, 0x3F	; 63
    203c:	8d 8b       	std	Y+21, r24	; 0x15
    203e:	9e 8b       	std	Y+22, r25	; 0x16
    2040:	af 8b       	std	Y+23, r26	; 0x17
    2042:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2044:	6d 89       	ldd	r22, Y+21	; 0x15
    2046:	7e 89       	ldd	r23, Y+22	; 0x16
    2048:	8f 89       	ldd	r24, Y+23	; 0x17
    204a:	98 8d       	ldd	r25, Y+24	; 0x18
    204c:	2b ea       	ldi	r18, 0xAB	; 171
    204e:	3a ea       	ldi	r19, 0xAA	; 170
    2050:	4a e2       	ldi	r20, 0x2A	; 42
    2052:	50 e4       	ldi	r21, 0x40	; 64
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	89 8b       	std	Y+17, r24	; 0x11
    205e:	9a 8b       	std	Y+18, r25	; 0x12
    2060:	ab 8b       	std	Y+19, r26	; 0x13
    2062:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2064:	69 89       	ldd	r22, Y+17	; 0x11
    2066:	7a 89       	ldd	r23, Y+18	; 0x12
    2068:	8b 89       	ldd	r24, Y+19	; 0x13
    206a:	9c 89       	ldd	r25, Y+20	; 0x14
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e8       	ldi	r20, 0x80	; 128
    2072:	5f e3       	ldi	r21, 0x3F	; 63
    2074:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2078:	88 23       	and	r24, r24
    207a:	1c f4       	brge	.+6      	; 0x2082 <LCD_write_cmd_8bit+0x1f8>
		__ticks = 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	88 8b       	std	Y+16, r24	; 0x10
    2080:	91 c0       	rjmp	.+290    	; 0x21a4 <LCD_write_cmd_8bit+0x31a>
	else if (__tmp > 255)
    2082:	69 89       	ldd	r22, Y+17	; 0x11
    2084:	7a 89       	ldd	r23, Y+18	; 0x12
    2086:	8b 89       	ldd	r24, Y+19	; 0x13
    2088:	9c 89       	ldd	r25, Y+20	; 0x14
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	53 e4       	ldi	r21, 0x43	; 67
    2092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	0c f0       	brlt	.+2      	; 0x209c <LCD_write_cmd_8bit+0x212>
    209a:	7b c0       	rjmp	.+246    	; 0x2192 <LCD_write_cmd_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    209c:	6d 89       	ldd	r22, Y+21	; 0x15
    209e:	7e 89       	ldd	r23, Y+22	; 0x16
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	98 8d       	ldd	r25, Y+24	; 0x18
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4a e7       	ldi	r20, 0x7A	; 122
    20aa:	54 e4       	ldi	r21, 0x44	; 68
    20ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	8c 87       	std	Y+12, r24	; 0x0c
    20b6:	9d 87       	std	Y+13, r25	; 0x0d
    20b8:	ae 87       	std	Y+14, r26	; 0x0e
    20ba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    20be:	7d 85       	ldd	r23, Y+13	; 0x0d
    20c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    20c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a ef       	ldi	r20, 0xFA	; 250
    20ca:	54 e4       	ldi	r21, 0x44	; 68
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	88 87       	std	Y+8, r24	; 0x08
    20d6:	99 87       	std	Y+9, r25	; 0x09
    20d8:	aa 87       	std	Y+10, r26	; 0x0a
    20da:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20dc:	68 85       	ldd	r22, Y+8	; 0x08
    20de:	79 85       	ldd	r23, Y+9	; 0x09
    20e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <LCD_write_cmd_8bit+0x274>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9f 83       	std	Y+7, r25	; 0x07
    20fa:	8e 83       	std	Y+6, r24	; 0x06
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <LCD_write_cmd_8bit+0x2f2>
	else if (__tmp > 65535)
    20fe:	68 85       	ldd	r22, Y+8	; 0x08
    2100:	79 85       	ldd	r23, Y+9	; 0x09
    2102:	8a 85       	ldd	r24, Y+10	; 0x0a
    2104:	9b 85       	ldd	r25, Y+11	; 0x0b
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <LCD_write_cmd_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	6c 85       	ldd	r22, Y+12	; 0x0c
    2118:	7d 85       	ldd	r23, Y+13	; 0x0d
    211a:	8e 85       	ldd	r24, Y+14	; 0x0e
    211c:	9f 85       	ldd	r25, Y+15	; 0x0f
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9f 83       	std	Y+7, r25	; 0x07
    213c:	8e 83       	std	Y+6, r24	; 0x06
    213e:	0f c0       	rjmp	.+30     	; 0x215e <LCD_write_cmd_8bit+0x2d4>
    2140:	88 ec       	ldi	r24, 0xC8	; 200
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9d 83       	std	Y+5, r25	; 0x05
    2146:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2148:	8c 81       	ldd	r24, Y+4	; 0x04
    214a:	9d 81       	ldd	r25, Y+5	; 0x05
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_write_cmd_8bit+0x2c2>
    2150:	9d 83       	std	Y+5, r25	; 0x05
    2152:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8e 81       	ldd	r24, Y+6	; 0x06
    2156:	9f 81       	ldd	r25, Y+7	; 0x07
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9f 83       	std	Y+7, r25	; 0x07
    215c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8e 81       	ldd	r24, Y+6	; 0x06
    2160:	9f 81       	ldd	r25, Y+7	; 0x07
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <LCD_write_cmd_8bit+0x2b6>
    2166:	24 c0       	rjmp	.+72     	; 0x21b0 <LCD_write_cmd_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	68 85       	ldd	r22, Y+8	; 0x08
    216a:	79 85       	ldd	r23, Y+9	; 0x09
    216c:	8a 85       	ldd	r24, Y+10	; 0x0a
    216e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9f 83       	std	Y+7, r25	; 0x07
    217a:	8e 83       	std	Y+6, r24	; 0x06
    217c:	8e 81       	ldd	r24, Y+6	; 0x06
    217e:	9f 81       	ldd	r25, Y+7	; 0x07
    2180:	9b 83       	std	Y+3, r25	; 0x03
    2182:	8a 83       	std	Y+2, r24	; 0x02
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	9b 81       	ldd	r25, Y+3	; 0x03
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_write_cmd_8bit+0x2fe>
    218c:	9b 83       	std	Y+3, r25	; 0x03
    218e:	8a 83       	std	Y+2, r24	; 0x02
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <LCD_write_cmd_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2192:	69 89       	ldd	r22, Y+17	; 0x11
    2194:	7a 89       	ldd	r23, Y+18	; 0x12
    2196:	8b 89       	ldd	r24, Y+19	; 0x13
    2198:	9c 89       	ldd	r25, Y+20	; 0x14
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	88 8b       	std	Y+16, r24	; 0x10
    21a4:	88 89       	ldd	r24, Y+16	; 0x10
    21a6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	8a 95       	dec	r24
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <LCD_write_cmd_8bit+0x320>
    21ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the command packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_cmd_8bit);
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	69 a9       	ldd	r22, Y+49	; 0x31
    21b4:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    21b8:	82 e0       	ldi	r24, 0x02	; 2
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
}
    21c0:	e1 96       	adiw	r28, 0x31	; 49
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <LCD_read_address_8bit>:

u8 LCD_read_address_8bit(void ){
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	ef 97       	sbiw	r28, 0x3f	; 63
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data port to input
	DIO_void_set_port_dir(lcd_data_port, INPUT);
    21e6:	82 e0       	ldi	r24, 0x02	; 2
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	0e 94 a0 08 	call	0x1140	; 0x1140 <DIO_void_set_port_dir>
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	a8 e4       	ldi	r26, 0x48	; 72
    21f4:	b2 e4       	ldi	r27, 0x42	; 66
    21f6:	8b af       	std	Y+59, r24	; 0x3b
    21f8:	9c af       	std	Y+60, r25	; 0x3c
    21fa:	ad af       	std	Y+61, r26	; 0x3d
    21fc:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fe:	6b ad       	ldd	r22, Y+59	; 0x3b
    2200:	7c ad       	ldd	r23, Y+60	; 0x3c
    2202:	8d ad       	ldd	r24, Y+61	; 0x3d
    2204:	9e ad       	ldd	r25, Y+62	; 0x3e
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4a ef       	ldi	r20, 0xFA	; 250
    220c:	54 e4       	ldi	r21, 0x44	; 68
    220e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	8f ab       	std	Y+55, r24	; 0x37
    2218:	98 af       	std	Y+56, r25	; 0x38
    221a:	a9 af       	std	Y+57, r26	; 0x39
    221c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    221e:	6f a9       	ldd	r22, Y+55	; 0x37
    2220:	78 ad       	ldd	r23, Y+56	; 0x38
    2222:	89 ad       	ldd	r24, Y+57	; 0x39
    2224:	9a ad       	ldd	r25, Y+58	; 0x3a
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e8       	ldi	r20, 0x80	; 128
    222c:	5f e3       	ldi	r21, 0x3F	; 63
    222e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2232:	88 23       	and	r24, r24
    2234:	2c f4       	brge	.+10     	; 0x2240 <LCD_read_address_8bit+0x6e>
		__ticks = 1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9e ab       	std	Y+54, r25	; 0x36
    223c:	8d ab       	std	Y+53, r24	; 0x35
    223e:	3f c0       	rjmp	.+126    	; 0x22be <LCD_read_address_8bit+0xec>
	else if (__tmp > 65535)
    2240:	6f a9       	ldd	r22, Y+55	; 0x37
    2242:	78 ad       	ldd	r23, Y+56	; 0x38
    2244:	89 ad       	ldd	r24, Y+57	; 0x39
    2246:	9a ad       	ldd	r25, Y+58	; 0x3a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	3f ef       	ldi	r19, 0xFF	; 255
    224c:	4f e7       	ldi	r20, 0x7F	; 127
    224e:	57 e4       	ldi	r21, 0x47	; 71
    2250:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2254:	18 16       	cp	r1, r24
    2256:	4c f5       	brge	.+82     	; 0x22aa <LCD_read_address_8bit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2258:	6b ad       	ldd	r22, Y+59	; 0x3b
    225a:	7c ad       	ldd	r23, Y+60	; 0x3c
    225c:	8d ad       	ldd	r24, Y+61	; 0x3d
    225e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e2       	ldi	r20, 0x20	; 32
    2266:	51 e4       	ldi	r21, 0x41	; 65
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	9e ab       	std	Y+54, r25	; 0x36
    227e:	8d ab       	std	Y+53, r24	; 0x35
    2280:	0f c0       	rjmp	.+30     	; 0x22a0 <LCD_read_address_8bit+0xce>
    2282:	88 ec       	ldi	r24, 0xC8	; 200
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9c ab       	std	Y+52, r25	; 0x34
    2288:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    228a:	8b a9       	ldd	r24, Y+51	; 0x33
    228c:	9c a9       	ldd	r25, Y+52	; 0x34
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_read_address_8bit+0xbc>
    2292:	9c ab       	std	Y+52, r25	; 0x34
    2294:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2296:	8d a9       	ldd	r24, Y+53	; 0x35
    2298:	9e a9       	ldd	r25, Y+54	; 0x36
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	9e ab       	std	Y+54, r25	; 0x36
    229e:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a0:	8d a9       	ldd	r24, Y+53	; 0x35
    22a2:	9e a9       	ldd	r25, Y+54	; 0x36
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	69 f7       	brne	.-38     	; 0x2282 <LCD_read_address_8bit+0xb0>
    22a8:	14 c0       	rjmp	.+40     	; 0x22d2 <LCD_read_address_8bit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22aa:	6f a9       	ldd	r22, Y+55	; 0x37
    22ac:	78 ad       	ldd	r23, Y+56	; 0x38
    22ae:	89 ad       	ldd	r24, Y+57	; 0x39
    22b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9e ab       	std	Y+54, r25	; 0x36
    22bc:	8d ab       	std	Y+53, r24	; 0x35
    22be:	8d a9       	ldd	r24, Y+53	; 0x35
    22c0:	9e a9       	ldd	r25, Y+54	; 0x36
    22c2:	9a ab       	std	Y+50, r25	; 0x32
    22c4:	89 ab       	std	Y+49, r24	; 0x31
    22c6:	89 a9       	ldd	r24, Y+49	; 0x31
    22c8:	9a a9       	ldd	r25, Y+50	; 0x32
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <LCD_read_address_8bit+0xf8>
    22ce:	9a ab       	std	Y+50, r25	; 0x32
    22d0:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(50);
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	62 e0       	ldi	r22, 0x02	; 2
    22d6:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    22da:	82 e0       	ldi	r24, 0x02	; 2
    22dc:	61 e0       	ldi	r22, 0x01	; 1
    22de:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	a0 e8       	ldi	r26, 0x80	; 128
    22e8:	bf e3       	ldi	r27, 0x3F	; 63
    22ea:	8d a7       	std	Y+45, r24	; 0x2d
    22ec:	9e a7       	std	Y+46, r25	; 0x2e
    22ee:	af a7       	std	Y+47, r26	; 0x2f
    22f0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    22f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    22f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22f8:	98 a9       	ldd	r25, Y+48	; 0x30
    22fa:	2b ea       	ldi	r18, 0xAB	; 171
    22fc:	3a ea       	ldi	r19, 0xAA	; 170
    22fe:	4a e2       	ldi	r20, 0x2A	; 42
    2300:	50 e4       	ldi	r21, 0x40	; 64
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	89 a7       	std	Y+41, r24	; 0x29
    230c:	9a a7       	std	Y+42, r25	; 0x2a
    230e:	ab a7       	std	Y+43, r26	; 0x2b
    2310:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2312:	69 a5       	ldd	r22, Y+41	; 0x29
    2314:	7a a5       	ldd	r23, Y+42	; 0x2a
    2316:	8b a5       	ldd	r24, Y+43	; 0x2b
    2318:	9c a5       	ldd	r25, Y+44	; 0x2c
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e8       	ldi	r20, 0x80	; 128
    2320:	5f e3       	ldi	r21, 0x3F	; 63
    2322:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2326:	88 23       	and	r24, r24
    2328:	1c f4       	brge	.+6      	; 0x2330 <LCD_read_address_8bit+0x15e>
		__ticks = 1;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	88 a7       	std	Y+40, r24	; 0x28
    232e:	91 c0       	rjmp	.+290    	; 0x2452 <LCD_read_address_8bit+0x280>
	else if (__tmp > 255)
    2330:	69 a5       	ldd	r22, Y+41	; 0x29
    2332:	7a a5       	ldd	r23, Y+42	; 0x2a
    2334:	8b a5       	ldd	r24, Y+43	; 0x2b
    2336:	9c a5       	ldd	r25, Y+44	; 0x2c
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	53 e4       	ldi	r21, 0x43	; 67
    2340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	0c f0       	brlt	.+2      	; 0x234a <LCD_read_address_8bit+0x178>
    2348:	7b c0       	rjmp	.+246    	; 0x2440 <LCD_read_address_8bit+0x26e>
	{
		_delay_ms(__us / 1000.0);
    234a:	6d a5       	ldd	r22, Y+45	; 0x2d
    234c:	7e a5       	ldd	r23, Y+46	; 0x2e
    234e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2350:	98 a9       	ldd	r25, Y+48	; 0x30
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	4a e7       	ldi	r20, 0x7A	; 122
    2358:	54 e4       	ldi	r21, 0x44	; 68
    235a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	8c a3       	std	Y+36, r24	; 0x24
    2364:	9d a3       	std	Y+37, r25	; 0x25
    2366:	ae a3       	std	Y+38, r26	; 0x26
    2368:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236a:	6c a1       	ldd	r22, Y+36	; 0x24
    236c:	7d a1       	ldd	r23, Y+37	; 0x25
    236e:	8e a1       	ldd	r24, Y+38	; 0x26
    2370:	9f a1       	ldd	r25, Y+39	; 0x27
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	4a ef       	ldi	r20, 0xFA	; 250
    2378:	54 e4       	ldi	r21, 0x44	; 68
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	88 a3       	std	Y+32, r24	; 0x20
    2384:	99 a3       	std	Y+33, r25	; 0x21
    2386:	aa a3       	std	Y+34, r26	; 0x22
    2388:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    238a:	68 a1       	ldd	r22, Y+32	; 0x20
    238c:	79 a1       	ldd	r23, Y+33	; 0x21
    238e:	8a a1       	ldd	r24, Y+34	; 0x22
    2390:	9b a1       	ldd	r25, Y+35	; 0x23
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e8       	ldi	r20, 0x80	; 128
    2398:	5f e3       	ldi	r21, 0x3F	; 63
    239a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    239e:	88 23       	and	r24, r24
    23a0:	2c f4       	brge	.+10     	; 0x23ac <LCD_read_address_8bit+0x1da>
		__ticks = 1;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9f 8f       	std	Y+31, r25	; 0x1f
    23a8:	8e 8f       	std	Y+30, r24	; 0x1e
    23aa:	3f c0       	rjmp	.+126    	; 0x242a <LCD_read_address_8bit+0x258>
	else if (__tmp > 65535)
    23ac:	68 a1       	ldd	r22, Y+32	; 0x20
    23ae:	79 a1       	ldd	r23, Y+33	; 0x21
    23b0:	8a a1       	ldd	r24, Y+34	; 0x22
    23b2:	9b a1       	ldd	r25, Y+35	; 0x23
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	3f ef       	ldi	r19, 0xFF	; 255
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	57 e4       	ldi	r21, 0x47	; 71
    23bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	4c f5       	brge	.+82     	; 0x2416 <LCD_read_address_8bit+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c4:	6c a1       	ldd	r22, Y+36	; 0x24
    23c6:	7d a1       	ldd	r23, Y+37	; 0x25
    23c8:	8e a1       	ldd	r24, Y+38	; 0x26
    23ca:	9f a1       	ldd	r25, Y+39	; 0x27
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	51 e4       	ldi	r21, 0x41	; 65
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9f 8f       	std	Y+31, r25	; 0x1f
    23ea:	8e 8f       	std	Y+30, r24	; 0x1e
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <LCD_read_address_8bit+0x23a>
    23ee:	88 ec       	ldi	r24, 0xC8	; 200
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9d 8f       	std	Y+29, r25	; 0x1d
    23f4:	8c 8f       	std	Y+28, r24	; 0x1c
    23f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_read_address_8bit+0x228>
    23fe:	9d 8f       	std	Y+29, r25	; 0x1d
    2400:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2402:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2404:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9f 8f       	std	Y+31, r25	; 0x1f
    240a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    240e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	69 f7       	brne	.-38     	; 0x23ee <LCD_read_address_8bit+0x21c>
    2414:	24 c0       	rjmp	.+72     	; 0x245e <LCD_read_address_8bit+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2416:	68 a1       	ldd	r22, Y+32	; 0x20
    2418:	79 a1       	ldd	r23, Y+33	; 0x21
    241a:	8a a1       	ldd	r24, Y+34	; 0x22
    241c:	9b a1       	ldd	r25, Y+35	; 0x23
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9f 8f       	std	Y+31, r25	; 0x1f
    2428:	8e 8f       	std	Y+30, r24	; 0x1e
    242a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    242c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    242e:	9b 8f       	std	Y+27, r25	; 0x1b
    2430:	8a 8f       	std	Y+26, r24	; 0x1a
    2432:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2434:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <LCD_read_address_8bit+0x264>
    243a:	9b 8f       	std	Y+27, r25	; 0x1b
    243c:	8a 8f       	std	Y+26, r24	; 0x1a
    243e:	0f c0       	rjmp	.+30     	; 0x245e <LCD_read_address_8bit+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2440:	69 a5       	ldd	r22, Y+41	; 0x29
    2442:	7a a5       	ldd	r23, Y+42	; 0x2a
    2444:	8b a5       	ldd	r24, Y+43	; 0x2b
    2446:	9c a5       	ldd	r25, Y+44	; 0x2c
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	88 a7       	std	Y+40, r24	; 0x28
    2452:	88 a5       	ldd	r24, Y+40	; 0x28
    2454:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2456:	89 8d       	ldd	r24, Y+25	; 0x19
    2458:	8a 95       	dec	r24
    245a:	f1 f7       	brne	.-4      	; 0x2458 <LCD_read_address_8bit+0x286>
    245c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to recive the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    245e:	82 e0       	ldi	r24, 0x02	; 2
    2460:	60 e0       	ldi	r22, 0x00	; 0
    2462:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a0 e8       	ldi	r26, 0x80	; 128
    246c:	bf e3       	ldi	r27, 0x3F	; 63
    246e:	8d 8b       	std	Y+21, r24	; 0x15
    2470:	9e 8b       	std	Y+22, r25	; 0x16
    2472:	af 8b       	std	Y+23, r26	; 0x17
    2474:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2476:	6d 89       	ldd	r22, Y+21	; 0x15
    2478:	7e 89       	ldd	r23, Y+22	; 0x16
    247a:	8f 89       	ldd	r24, Y+23	; 0x17
    247c:	98 8d       	ldd	r25, Y+24	; 0x18
    247e:	2b ea       	ldi	r18, 0xAB	; 171
    2480:	3a ea       	ldi	r19, 0xAA	; 170
    2482:	4a e2       	ldi	r20, 0x2A	; 42
    2484:	50 e4       	ldi	r21, 0x40	; 64
    2486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	89 8b       	std	Y+17, r24	; 0x11
    2490:	9a 8b       	std	Y+18, r25	; 0x12
    2492:	ab 8b       	std	Y+19, r26	; 0x13
    2494:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2496:	69 89       	ldd	r22, Y+17	; 0x11
    2498:	7a 89       	ldd	r23, Y+18	; 0x12
    249a:	8b 89       	ldd	r24, Y+19	; 0x13
    249c:	9c 89       	ldd	r25, Y+20	; 0x14
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e8       	ldi	r20, 0x80	; 128
    24a4:	5f e3       	ldi	r21, 0x3F	; 63
    24a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	1c f4       	brge	.+6      	; 0x24b4 <LCD_read_address_8bit+0x2e2>
		__ticks = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	88 8b       	std	Y+16, r24	; 0x10
    24b2:	91 c0       	rjmp	.+290    	; 0x25d6 <LCD_read_address_8bit+0x404>
	else if (__tmp > 255)
    24b4:	69 89       	ldd	r22, Y+17	; 0x11
    24b6:	7a 89       	ldd	r23, Y+18	; 0x12
    24b8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ba:	9c 89       	ldd	r25, Y+20	; 0x14
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	53 e4       	ldi	r21, 0x43	; 67
    24c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c8:	18 16       	cp	r1, r24
    24ca:	0c f0       	brlt	.+2      	; 0x24ce <LCD_read_address_8bit+0x2fc>
    24cc:	7b c0       	rjmp	.+246    	; 0x25c4 <LCD_read_address_8bit+0x3f2>
	{
		_delay_ms(__us / 1000.0);
    24ce:	6d 89       	ldd	r22, Y+21	; 0x15
    24d0:	7e 89       	ldd	r23, Y+22	; 0x16
    24d2:	8f 89       	ldd	r24, Y+23	; 0x17
    24d4:	98 8d       	ldd	r25, Y+24	; 0x18
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a e7       	ldi	r20, 0x7A	; 122
    24dc:	54 e4       	ldi	r21, 0x44	; 68
    24de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	8c 87       	std	Y+12, r24	; 0x0c
    24e8:	9d 87       	std	Y+13, r25	; 0x0d
    24ea:	ae 87       	std	Y+14, r26	; 0x0e
    24ec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    24f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    24f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    24f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	4a ef       	ldi	r20, 0xFA	; 250
    24fc:	54 e4       	ldi	r21, 0x44	; 68
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	88 87       	std	Y+8, r24	; 0x08
    2508:	99 87       	std	Y+9, r25	; 0x09
    250a:	aa 87       	std	Y+10, r26	; 0x0a
    250c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    250e:	68 85       	ldd	r22, Y+8	; 0x08
    2510:	79 85       	ldd	r23, Y+9	; 0x09
    2512:	8a 85       	ldd	r24, Y+10	; 0x0a
    2514:	9b 85       	ldd	r25, Y+11	; 0x0b
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e8       	ldi	r20, 0x80	; 128
    251c:	5f e3       	ldi	r21, 0x3F	; 63
    251e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2522:	88 23       	and	r24, r24
    2524:	2c f4       	brge	.+10     	; 0x2530 <LCD_read_address_8bit+0x35e>
		__ticks = 1;
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9f 83       	std	Y+7, r25	; 0x07
    252c:	8e 83       	std	Y+6, r24	; 0x06
    252e:	3f c0       	rjmp	.+126    	; 0x25ae <LCD_read_address_8bit+0x3dc>
	else if (__tmp > 65535)
    2530:	68 85       	ldd	r22, Y+8	; 0x08
    2532:	79 85       	ldd	r23, Y+9	; 0x09
    2534:	8a 85       	ldd	r24, Y+10	; 0x0a
    2536:	9b 85       	ldd	r25, Y+11	; 0x0b
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	3f ef       	ldi	r19, 0xFF	; 255
    253c:	4f e7       	ldi	r20, 0x7F	; 127
    253e:	57 e4       	ldi	r21, 0x47	; 71
    2540:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2544:	18 16       	cp	r1, r24
    2546:	4c f5       	brge	.+82     	; 0x259a <LCD_read_address_8bit+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2548:	6c 85       	ldd	r22, Y+12	; 0x0c
    254a:	7d 85       	ldd	r23, Y+13	; 0x0d
    254c:	8e 85       	ldd	r24, Y+14	; 0x0e
    254e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e2       	ldi	r20, 0x20	; 32
    2556:	51 e4       	ldi	r21, 0x41	; 65
    2558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	9f 83       	std	Y+7, r25	; 0x07
    256e:	8e 83       	std	Y+6, r24	; 0x06
    2570:	0f c0       	rjmp	.+30     	; 0x2590 <LCD_read_address_8bit+0x3be>
    2572:	88 ec       	ldi	r24, 0xC8	; 200
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9d 83       	std	Y+5, r25	; 0x05
    2578:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    257a:	8c 81       	ldd	r24, Y+4	; 0x04
    257c:	9d 81       	ldd	r25, Y+5	; 0x05
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <LCD_read_address_8bit+0x3ac>
    2582:	9d 83       	std	Y+5, r25	; 0x05
    2584:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	8e 81       	ldd	r24, Y+6	; 0x06
    2588:	9f 81       	ldd	r25, Y+7	; 0x07
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	9f 83       	std	Y+7, r25	; 0x07
    258e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2590:	8e 81       	ldd	r24, Y+6	; 0x06
    2592:	9f 81       	ldd	r25, Y+7	; 0x07
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	69 f7       	brne	.-38     	; 0x2572 <LCD_read_address_8bit+0x3a0>
    2598:	24 c0       	rjmp	.+72     	; 0x25e2 <LCD_read_address_8bit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259a:	68 85       	ldd	r22, Y+8	; 0x08
    259c:	79 85       	ldd	r23, Y+9	; 0x09
    259e:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9f 83       	std	Y+7, r25	; 0x07
    25ac:	8e 83       	std	Y+6, r24	; 0x06
    25ae:	8e 81       	ldd	r24, Y+6	; 0x06
    25b0:	9f 81       	ldd	r25, Y+7	; 0x07
    25b2:	9b 83       	std	Y+3, r25	; 0x03
    25b4:	8a 83       	std	Y+2, r24	; 0x02
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <LCD_read_address_8bit+0x3e8>
    25be:	9b 83       	std	Y+3, r25	; 0x03
    25c0:	8a 83       	std	Y+2, r24	; 0x02
    25c2:	0f c0       	rjmp	.+30     	; 0x25e2 <LCD_read_address_8bit+0x410>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25c4:	69 89       	ldd	r22, Y+17	; 0x11
    25c6:	7a 89       	ldd	r23, Y+18	; 0x12
    25c8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ca:	9c 89       	ldd	r25, Y+20	; 0x14
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	88 8b       	std	Y+16, r24	; 0x10
    25d6:	88 89       	ldd	r24, Y+16	; 0x10
    25d8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	8a 95       	dec	r24
    25de:	f1 f7       	brne	.-4      	; 0x25dc <LCD_read_address_8bit+0x40a>
    25e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the packet
	u8 address= DIO_u8_get_port(lcd_data_port);
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <DIO_u8_get_port>
    25e8:	8f af       	std	Y+63, r24	; 0x3f
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    25f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    25f4:	8f 77       	andi	r24, 0x7F	; 127
    25f6:	8f af       	std	Y+63, r24	; 0x3f
	// Configure the data port back to output
	DIO_void_set_port_dir(lcd_data_port, OUTPUT);
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	61 e0       	ldi	r22, 0x01	; 1
    25fc:	0e 94 a0 08 	call	0x1140	; 0x1140 <DIO_void_set_port_dir>
	return address;
    2600:	8f ad       	ldd	r24, Y+63	; 0x3f
}
    2602:	ef 96       	adiw	r28, 0x3f	; 63
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <LCD_write_data_4bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_4bit(u8 lcd_copy_word_4bit){
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	c3 56       	subi	r28, 0x63	; 99
    2622:	d0 40       	sbci	r29, 0x00	; 0
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	fe 01       	movw	r30, r28
    2630:	ed 59       	subi	r30, 0x9D	; 157
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 83       	st	Z, r24
	 *		lcd_copy_word_4bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    2636:	82 e0       	ldi	r24, 0x02	; 2
    2638:	62 e0       	ldi	r22, 0x02	; 2
    263a:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	61 e0       	ldi	r22, 0x01	; 1
    2642:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
    2646:	fe 01       	movw	r30, r28
    2648:	e3 5a       	subi	r30, 0xA3	; 163
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	a0 e8       	ldi	r26, 0x80	; 128
    2652:	bf e3       	ldi	r27, 0x3F	; 63
    2654:	80 83       	st	Z, r24
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	a2 83       	std	Z+2, r26	; 0x02
    265a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    265c:	8e 01       	movw	r16, r28
    265e:	07 5a       	subi	r16, 0xA7	; 167
    2660:	1f 4f       	sbci	r17, 0xFF	; 255
    2662:	fe 01       	movw	r30, r28
    2664:	e3 5a       	subi	r30, 0xA3	; 163
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	60 81       	ld	r22, Z
    266a:	71 81       	ldd	r23, Z+1	; 0x01
    266c:	82 81       	ldd	r24, Z+2	; 0x02
    266e:	93 81       	ldd	r25, Z+3	; 0x03
    2670:	2b ea       	ldi	r18, 0xAB	; 171
    2672:	3a ea       	ldi	r19, 0xAA	; 170
    2674:	4a e2       	ldi	r20, 0x2A	; 42
    2676:	50 e4       	ldi	r21, 0x40	; 64
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	f8 01       	movw	r30, r16
    2682:	80 83       	st	Z, r24
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	a2 83       	std	Z+2, r26	; 0x02
    2688:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    268a:	fe 01       	movw	r30, r28
    268c:	e7 5a       	subi	r30, 0xA7	; 167
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	60 81       	ld	r22, Z
    2692:	71 81       	ldd	r23, Z+1	; 0x01
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e8       	ldi	r20, 0x80	; 128
    269e:	5f e3       	ldi	r21, 0x3F	; 63
    26a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26a4:	88 23       	and	r24, r24
    26a6:	34 f4       	brge	.+12     	; 0x26b4 <LCD_write_data_4bit+0xa0>
		__ticks = 1;
    26a8:	fe 01       	movw	r30, r28
    26aa:	e8 5a       	subi	r30, 0xA8	; 168
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	80 83       	st	Z, r24
    26b2:	e0 c0       	rjmp	.+448    	; 0x2874 <LCD_write_data_4bit+0x260>
	else if (__tmp > 255)
    26b4:	fe 01       	movw	r30, r28
    26b6:	e7 5a       	subi	r30, 0xA7	; 167
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	60 81       	ld	r22, Z
    26bc:	71 81       	ldd	r23, Z+1	; 0x01
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	93 81       	ldd	r25, Z+3	; 0x03
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	4f e7       	ldi	r20, 0x7F	; 127
    26c8:	53 e4       	ldi	r21, 0x43	; 67
    26ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ce:	18 16       	cp	r1, r24
    26d0:	0c f0       	brlt	.+2      	; 0x26d4 <LCD_write_data_4bit+0xc0>
    26d2:	c0 c0       	rjmp	.+384    	; 0x2854 <LCD_write_data_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    26d4:	fe 01       	movw	r30, r28
    26d6:	e3 5a       	subi	r30, 0xA3	; 163
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	4a e7       	ldi	r20, 0x7A	; 122
    26e8:	54 e4       	ldi	r21, 0x44	; 68
    26ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	fe 01       	movw	r30, r28
    26f4:	ec 5a       	subi	r30, 0xAC	; 172
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 83       	st	Z, r24
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	a2 83       	std	Z+2, r26	; 0x02
    26fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2700:	8e 01       	movw	r16, r28
    2702:	00 5b       	subi	r16, 0xB0	; 176
    2704:	1f 4f       	sbci	r17, 0xFF	; 255
    2706:	fe 01       	movw	r30, r28
    2708:	ec 5a       	subi	r30, 0xAC	; 172
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	4a ef       	ldi	r20, 0xFA	; 250
    271a:	54 e4       	ldi	r21, 0x44	; 68
    271c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	f8 01       	movw	r30, r16
    2726:	80 83       	st	Z, r24
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	a2 83       	std	Z+2, r26	; 0x02
    272c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    272e:	fe 01       	movw	r30, r28
    2730:	e0 5b       	subi	r30, 0xB0	; 176
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	60 81       	ld	r22, Z
    2736:	71 81       	ldd	r23, Z+1	; 0x01
    2738:	82 81       	ldd	r24, Z+2	; 0x02
    273a:	93 81       	ldd	r25, Z+3	; 0x03
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	5f e3       	ldi	r21, 0x3F	; 63
    2744:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2748:	88 23       	and	r24, r24
    274a:	44 f4       	brge	.+16     	; 0x275c <LCD_write_data_4bit+0x148>
		__ticks = 1;
    274c:	fe 01       	movw	r30, r28
    274e:	e2 5b       	subi	r30, 0xB2	; 178
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
    275a:	64 c0       	rjmp	.+200    	; 0x2824 <LCD_write_data_4bit+0x210>
	else if (__tmp > 65535)
    275c:	fe 01       	movw	r30, r28
    275e:	e0 5b       	subi	r30, 0xB0	; 176
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	60 81       	ld	r22, Z
    2764:	71 81       	ldd	r23, Z+1	; 0x01
    2766:	82 81       	ldd	r24, Z+2	; 0x02
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2776:	18 16       	cp	r1, r24
    2778:	0c f0       	brlt	.+2      	; 0x277c <LCD_write_data_4bit+0x168>
    277a:	43 c0       	rjmp	.+134    	; 0x2802 <LCD_write_data_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277c:	fe 01       	movw	r30, r28
    277e:	ec 5a       	subi	r30, 0xAC	; 172
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	60 81       	ld	r22, Z
    2784:	71 81       	ldd	r23, Z+1	; 0x01
    2786:	82 81       	ldd	r24, Z+2	; 0x02
    2788:	93 81       	ldd	r25, Z+3	; 0x03
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e2       	ldi	r20, 0x20	; 32
    2790:	51 e4       	ldi	r21, 0x41	; 65
    2792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	8e 01       	movw	r16, r28
    279c:	02 5b       	subi	r16, 0xB2	; 178
    279e:	1f 4f       	sbci	r17, 0xFF	; 255
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	f8 01       	movw	r30, r16
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	80 83       	st	Z, r24
    27b2:	1f c0       	rjmp	.+62     	; 0x27f2 <LCD_write_data_4bit+0x1de>
    27b4:	fe 01       	movw	r30, r28
    27b6:	e4 5b       	subi	r30, 0xB4	; 180
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	88 ec       	ldi	r24, 0xC8	; 200
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27c2:	fe 01       	movw	r30, r28
    27c4:	e4 5b       	subi	r30, 0xB4	; 180
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	91 81       	ldd	r25, Z+1	; 0x01
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <LCD_write_data_4bit+0x1b8>
    27d0:	fe 01       	movw	r30, r28
    27d2:	e4 5b       	subi	r30, 0xB4	; 180
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	91 83       	std	Z+1, r25	; 0x01
    27d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27da:	de 01       	movw	r26, r28
    27dc:	a2 5b       	subi	r26, 0xB2	; 178
    27de:	bf 4f       	sbci	r27, 0xFF	; 255
    27e0:	fe 01       	movw	r30, r28
    27e2:	e2 5b       	subi	r30, 0xB2	; 178
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	91 81       	ldd	r25, Z+1	; 0x01
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	11 96       	adiw	r26, 0x01	; 1
    27ee:	9c 93       	st	X, r25
    27f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f2:	fe 01       	movw	r30, r28
    27f4:	e2 5b       	subi	r30, 0xB2	; 178
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	d1 f6       	brne	.-76     	; 0x27b4 <LCD_write_data_4bit+0x1a0>
    2800:	4b c0       	rjmp	.+150    	; 0x2898 <LCD_write_data_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2802:	8e 01       	movw	r16, r28
    2804:	02 5b       	subi	r16, 0xB2	; 178
    2806:	1f 4f       	sbci	r17, 0xFF	; 255
    2808:	fe 01       	movw	r30, r28
    280a:	e0 5b       	subi	r30, 0xB0	; 176
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	60 81       	ld	r22, Z
    2810:	71 81       	ldd	r23, Z+1	; 0x01
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	f8 01       	movw	r30, r16
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	80 83       	st	Z, r24
    2824:	de 01       	movw	r26, r28
    2826:	a6 5b       	subi	r26, 0xB6	; 182
    2828:	bf 4f       	sbci	r27, 0xFF	; 255
    282a:	fe 01       	movw	r30, r28
    282c:	e2 5b       	subi	r30, 0xB2	; 178
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	80 81       	ld	r24, Z
    2832:	91 81       	ldd	r25, Z+1	; 0x01
    2834:	11 96       	adiw	r26, 0x01	; 1
    2836:	9c 93       	st	X, r25
    2838:	8e 93       	st	-X, r24
    283a:	fe 01       	movw	r30, r28
    283c:	e6 5b       	subi	r30, 0xB6	; 182
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 81       	ld	r24, Z
    2842:	91 81       	ldd	r25, Z+1	; 0x01
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_write_data_4bit+0x230>
    2848:	fe 01       	movw	r30, r28
    284a:	e6 5b       	subi	r30, 0xB6	; 182
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	80 83       	st	Z, r24
    2852:	22 c0       	rjmp	.+68     	; 0x2898 <LCD_write_data_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2854:	8e 01       	movw	r16, r28
    2856:	08 5a       	subi	r16, 0xA8	; 168
    2858:	1f 4f       	sbci	r17, 0xFF	; 255
    285a:	fe 01       	movw	r30, r28
    285c:	e7 5a       	subi	r30, 0xA7	; 167
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	60 81       	ld	r22, Z
    2862:	71 81       	ldd	r23, Z+1	; 0x01
    2864:	82 81       	ldd	r24, Z+2	; 0x02
    2866:	93 81       	ldd	r25, Z+3	; 0x03
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	f8 01       	movw	r30, r16
    2872:	80 83       	st	Z, r24
    2874:	de 01       	movw	r26, r28
    2876:	a7 5b       	subi	r26, 0xB7	; 183
    2878:	bf 4f       	sbci	r27, 0xFF	; 255
    287a:	fe 01       	movw	r30, r28
    287c:	e8 5a       	subi	r30, 0xA8	; 168
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	80 81       	ld	r24, Z
    2882:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2884:	fe 01       	movw	r30, r28
    2886:	e7 5b       	subi	r30, 0xB7	; 183
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 81       	ld	r24, Z
    288c:	8a 95       	dec	r24
    288e:	f1 f7       	brne	.-4      	; 0x288c <LCD_write_data_4bit+0x278>
    2890:	fe 01       	movw	r30, r28
    2892:	e7 5b       	subi	r30, 0xB7	; 183
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2898:	82 e0       	ldi	r24, 0x02	; 2
    289a:	60 e0       	ldi	r22, 0x00	; 0
    289c:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    28a0:	fe 01       	movw	r30, r28
    28a2:	eb 5b       	subi	r30, 0xBB	; 187
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	a0 e8       	ldi	r26, 0x80	; 128
    28ac:	bf e3       	ldi	r27, 0x3F	; 63
    28ae:	80 83       	st	Z, r24
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	a2 83       	std	Z+2, r26	; 0x02
    28b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28b6:	8e 01       	movw	r16, r28
    28b8:	0f 5b       	subi	r16, 0xBF	; 191
    28ba:	1f 4f       	sbci	r17, 0xFF	; 255
    28bc:	fe 01       	movw	r30, r28
    28be:	eb 5b       	subi	r30, 0xBB	; 187
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	2b ea       	ldi	r18, 0xAB	; 171
    28cc:	3a ea       	ldi	r19, 0xAA	; 170
    28ce:	4a e2       	ldi	r20, 0x2A	; 42
    28d0:	50 e4       	ldi	r21, 0x40	; 64
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	f8 01       	movw	r30, r16
    28dc:	80 83       	st	Z, r24
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	a2 83       	std	Z+2, r26	; 0x02
    28e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28e4:	fe 01       	movw	r30, r28
    28e6:	ef 5b       	subi	r30, 0xBF	; 191
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e8       	ldi	r20, 0x80	; 128
    28f8:	5f e3       	ldi	r21, 0x3F	; 63
    28fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28fe:	88 23       	and	r24, r24
    2900:	34 f4       	brge	.+12     	; 0x290e <LCD_write_data_4bit+0x2fa>
		__ticks = 1;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	fe 01       	movw	r30, r28
    2906:	e0 5c       	subi	r30, 0xC0	; 192
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	80 83       	st	Z, r24
    290c:	9d c0       	rjmp	.+314    	; 0x2a48 <LCD_write_data_4bit+0x434>
	else if (__tmp > 255)
    290e:	fe 01       	movw	r30, r28
    2910:	ef 5b       	subi	r30, 0xBF	; 191
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	60 81       	ld	r22, Z
    2916:	71 81       	ldd	r23, Z+1	; 0x01
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	4f e7       	ldi	r20, 0x7F	; 127
    2922:	53 e4       	ldi	r21, 0x43	; 67
    2924:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2928:	18 16       	cp	r1, r24
    292a:	0c f0       	brlt	.+2      	; 0x292e <LCD_write_data_4bit+0x31a>
    292c:	7e c0       	rjmp	.+252    	; 0x2a2a <LCD_write_data_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    292e:	fe 01       	movw	r30, r28
    2930:	eb 5b       	subi	r30, 0xBB	; 187
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	4a e7       	ldi	r20, 0x7A	; 122
    2942:	54 e4       	ldi	r21, 0x44	; 68
    2944:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	8c af       	std	Y+60, r24	; 0x3c
    294e:	9d af       	std	Y+61, r25	; 0x3d
    2950:	ae af       	std	Y+62, r26	; 0x3e
    2952:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2954:	6c ad       	ldd	r22, Y+60	; 0x3c
    2956:	7d ad       	ldd	r23, Y+61	; 0x3d
    2958:	8e ad       	ldd	r24, Y+62	; 0x3e
    295a:	9f ad       	ldd	r25, Y+63	; 0x3f
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	4a ef       	ldi	r20, 0xFA	; 250
    2962:	54 e4       	ldi	r21, 0x44	; 68
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	88 af       	std	Y+56, r24	; 0x38
    296e:	99 af       	std	Y+57, r25	; 0x39
    2970:	aa af       	std	Y+58, r26	; 0x3a
    2972:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2974:	68 ad       	ldd	r22, Y+56	; 0x38
    2976:	79 ad       	ldd	r23, Y+57	; 0x39
    2978:	8a ad       	ldd	r24, Y+58	; 0x3a
    297a:	9b ad       	ldd	r25, Y+59	; 0x3b
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e8       	ldi	r20, 0x80	; 128
    2982:	5f e3       	ldi	r21, 0x3F	; 63
    2984:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2988:	88 23       	and	r24, r24
    298a:	2c f4       	brge	.+10     	; 0x2996 <LCD_write_data_4bit+0x382>
		__ticks = 1;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9f ab       	std	Y+55, r25	; 0x37
    2992:	8e ab       	std	Y+54, r24	; 0x36
    2994:	3f c0       	rjmp	.+126    	; 0x2a14 <LCD_write_data_4bit+0x400>
	else if (__tmp > 65535)
    2996:	68 ad       	ldd	r22, Y+56	; 0x38
    2998:	79 ad       	ldd	r23, Y+57	; 0x39
    299a:	8a ad       	ldd	r24, Y+58	; 0x3a
    299c:	9b ad       	ldd	r25, Y+59	; 0x3b
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	3f ef       	ldi	r19, 0xFF	; 255
    29a2:	4f e7       	ldi	r20, 0x7F	; 127
    29a4:	57 e4       	ldi	r21, 0x47	; 71
    29a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29aa:	18 16       	cp	r1, r24
    29ac:	4c f5       	brge	.+82     	; 0x2a00 <LCD_write_data_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    29b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    29b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    29b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e2       	ldi	r20, 0x20	; 32
    29bc:	51 e4       	ldi	r21, 0x41	; 65
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	9f ab       	std	Y+55, r25	; 0x37
    29d4:	8e ab       	std	Y+54, r24	; 0x36
    29d6:	0f c0       	rjmp	.+30     	; 0x29f6 <LCD_write_data_4bit+0x3e2>
    29d8:	88 ec       	ldi	r24, 0xC8	; 200
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9d ab       	std	Y+53, r25	; 0x35
    29de:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29e0:	8c a9       	ldd	r24, Y+52	; 0x34
    29e2:	9d a9       	ldd	r25, Y+53	; 0x35
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <LCD_write_data_4bit+0x3d0>
    29e8:	9d ab       	std	Y+53, r25	; 0x35
    29ea:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ec:	8e a9       	ldd	r24, Y+54	; 0x36
    29ee:	9f a9       	ldd	r25, Y+55	; 0x37
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	9f ab       	std	Y+55, r25	; 0x37
    29f4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f6:	8e a9       	ldd	r24, Y+54	; 0x36
    29f8:	9f a9       	ldd	r25, Y+55	; 0x37
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	69 f7       	brne	.-38     	; 0x29d8 <LCD_write_data_4bit+0x3c4>
    29fe:	2d c0       	rjmp	.+90     	; 0x2a5a <LCD_write_data_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a00:	68 ad       	ldd	r22, Y+56	; 0x38
    2a02:	79 ad       	ldd	r23, Y+57	; 0x39
    2a04:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a06:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	9f ab       	std	Y+55, r25	; 0x37
    2a12:	8e ab       	std	Y+54, r24	; 0x36
    2a14:	8e a9       	ldd	r24, Y+54	; 0x36
    2a16:	9f a9       	ldd	r25, Y+55	; 0x37
    2a18:	9b ab       	std	Y+51, r25	; 0x33
    2a1a:	8a ab       	std	Y+50, r24	; 0x32
    2a1c:	8a a9       	ldd	r24, Y+50	; 0x32
    2a1e:	9b a9       	ldd	r25, Y+51	; 0x33
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <LCD_write_data_4bit+0x40c>
    2a24:	9b ab       	std	Y+51, r25	; 0x33
    2a26:	8a ab       	std	Y+50, r24	; 0x32
    2a28:	18 c0       	rjmp	.+48     	; 0x2a5a <LCD_write_data_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	ef 5b       	subi	r30, 0xBF	; 191
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	fe 01       	movw	r30, r28
    2a42:	e0 5c       	subi	r30, 0xC0	; 192
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 83       	st	Z, r24
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e0 5c       	subi	r30, 0xC0	; 192
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	80 81       	ld	r24, Z
    2a50:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a52:	89 a9       	ldd	r24, Y+49	; 0x31
    2a54:	8a 95       	dec	r24
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <LCD_write_data_4bit+0x440>
    2a58:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	ee 59       	subi	r30, 0x9E	; 158
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	84 e0       	ldi	r24, 0x04	; 4
    2a62:	80 83       	st	Z, r24
    2a64:	26 c0       	rjmp	.+76     	; 0x2ab2 <LCD_write_data_4bit+0x49e>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
    2a66:	fe 01       	movw	r30, r28
    2a68:	ed 59       	subi	r30, 0x9D	; 157
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	80 81       	ld	r24, Z
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	fe 01       	movw	r30, r28
    2a74:	ee 59       	subi	r30, 0x9E	; 158
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 81       	ld	r24, Z
    2a7a:	88 2f       	mov	r24, r24
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	a9 01       	movw	r20, r18
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <LCD_write_data_4bit+0x472>
    2a82:	55 95       	asr	r21
    2a84:	47 95       	ror	r20
    2a86:	8a 95       	dec	r24
    2a88:	e2 f7       	brpl	.-8      	; 0x2a82 <LCD_write_data_4bit+0x46e>
    2a8a:	ca 01       	movw	r24, r20
    2a8c:	98 2f       	mov	r25, r24
    2a8e:	91 70       	andi	r25, 0x01	; 1
    2a90:	fe 01       	movw	r30, r28
    2a92:	ee 59       	subi	r30, 0x9E	; 158
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	82 e0       	ldi	r24, 0x02	; 2
    2a98:	60 81       	ld	r22, Z
    2a9a:	49 2f       	mov	r20, r25
    2a9c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2aa0:	de 01       	movw	r26, r28
    2aa2:	ae 59       	subi	r26, 0x9E	; 158
    2aa4:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	ee 59       	subi	r30, 0x9E	; 158
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	80 81       	ld	r24, Z
    2aae:	8f 5f       	subi	r24, 0xFF	; 255
    2ab0:	8c 93       	st	X, r24
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	ee 59       	subi	r30, 0x9E	; 158
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	88 30       	cpi	r24, 0x08	; 8
    2abc:	a0 f2       	brcs	.-88     	; 0x2a66 <LCD_write_data_4bit+0x452>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a0 e2       	ldi	r26, 0x20	; 32
    2acc:	b1 e4       	ldi	r27, 0x41	; 65
    2ace:	8d a7       	std	Y+45, r24	; 0x2d
    2ad0:	9e a7       	std	Y+46, r25	; 0x2e
    2ad2:	af a7       	std	Y+47, r26	; 0x2f
    2ad4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ad6:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ad8:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ada:	8f a5       	ldd	r24, Y+47	; 0x2f
    2adc:	98 a9       	ldd	r25, Y+48	; 0x30
    2ade:	2b ea       	ldi	r18, 0xAB	; 171
    2ae0:	3a ea       	ldi	r19, 0xAA	; 170
    2ae2:	4a e2       	ldi	r20, 0x2A	; 42
    2ae4:	50 e4       	ldi	r21, 0x40	; 64
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	89 a7       	std	Y+41, r24	; 0x29
    2af0:	9a a7       	std	Y+42, r25	; 0x2a
    2af2:	ab a7       	std	Y+43, r26	; 0x2b
    2af4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2af6:	69 a5       	ldd	r22, Y+41	; 0x29
    2af8:	7a a5       	ldd	r23, Y+42	; 0x2a
    2afa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2afc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b0a:	88 23       	and	r24, r24
    2b0c:	1c f4       	brge	.+6      	; 0x2b14 <LCD_write_data_4bit+0x500>
		__ticks = 1;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	88 a7       	std	Y+40, r24	; 0x28
    2b12:	91 c0       	rjmp	.+290    	; 0x2c36 <LCD_write_data_4bit+0x622>
	else if (__tmp > 255)
    2b14:	69 a5       	ldd	r22, Y+41	; 0x29
    2b16:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b18:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4f e7       	ldi	r20, 0x7F	; 127
    2b22:	53 e4       	ldi	r21, 0x43	; 67
    2b24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b28:	18 16       	cp	r1, r24
    2b2a:	0c f0       	brlt	.+2      	; 0x2b2e <LCD_write_data_4bit+0x51a>
    2b2c:	7b c0       	rjmp	.+246    	; 0x2c24 <LCD_write_data_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    2b2e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b30:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b32:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b34:	98 a9       	ldd	r25, Y+48	; 0x30
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	4a e7       	ldi	r20, 0x7A	; 122
    2b3c:	54 e4       	ldi	r21, 0x44	; 68
    2b3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	8c a3       	std	Y+36, r24	; 0x24
    2b48:	9d a3       	std	Y+37, r25	; 0x25
    2b4a:	ae a3       	std	Y+38, r26	; 0x26
    2b4c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4e:	6c a1       	ldd	r22, Y+36	; 0x24
    2b50:	7d a1       	ldd	r23, Y+37	; 0x25
    2b52:	8e a1       	ldd	r24, Y+38	; 0x26
    2b54:	9f a1       	ldd	r25, Y+39	; 0x27
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	4a ef       	ldi	r20, 0xFA	; 250
    2b5c:	54 e4       	ldi	r21, 0x44	; 68
    2b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	88 a3       	std	Y+32, r24	; 0x20
    2b68:	99 a3       	std	Y+33, r25	; 0x21
    2b6a:	aa a3       	std	Y+34, r26	; 0x22
    2b6c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2b6e:	68 a1       	ldd	r22, Y+32	; 0x20
    2b70:	79 a1       	ldd	r23, Y+33	; 0x21
    2b72:	8a a1       	ldd	r24, Y+34	; 0x22
    2b74:	9b a1       	ldd	r25, Y+35	; 0x23
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e8       	ldi	r20, 0x80	; 128
    2b7c:	5f e3       	ldi	r21, 0x3F	; 63
    2b7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b82:	88 23       	and	r24, r24
    2b84:	2c f4       	brge	.+10     	; 0x2b90 <LCD_write_data_4bit+0x57c>
		__ticks = 1;
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	9f 8f       	std	Y+31, r25	; 0x1f
    2b8c:	8e 8f       	std	Y+30, r24	; 0x1e
    2b8e:	3f c0       	rjmp	.+126    	; 0x2c0e <LCD_write_data_4bit+0x5fa>
	else if (__tmp > 65535)
    2b90:	68 a1       	ldd	r22, Y+32	; 0x20
    2b92:	79 a1       	ldd	r23, Y+33	; 0x21
    2b94:	8a a1       	ldd	r24, Y+34	; 0x22
    2b96:	9b a1       	ldd	r25, Y+35	; 0x23
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	3f ef       	ldi	r19, 0xFF	; 255
    2b9c:	4f e7       	ldi	r20, 0x7F	; 127
    2b9e:	57 e4       	ldi	r21, 0x47	; 71
    2ba0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ba4:	18 16       	cp	r1, r24
    2ba6:	4c f5       	brge	.+82     	; 0x2bfa <LCD_write_data_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba8:	6c a1       	ldd	r22, Y+36	; 0x24
    2baa:	7d a1       	ldd	r23, Y+37	; 0x25
    2bac:	8e a1       	ldd	r24, Y+38	; 0x26
    2bae:	9f a1       	ldd	r25, Y+39	; 0x27
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e2       	ldi	r20, 0x20	; 32
    2bb6:	51 e4       	ldi	r21, 0x41	; 65
    2bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	bc 01       	movw	r22, r24
    2bc2:	cd 01       	movw	r24, r26
    2bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	9f 8f       	std	Y+31, r25	; 0x1f
    2bce:	8e 8f       	std	Y+30, r24	; 0x1e
    2bd0:	0f c0       	rjmp	.+30     	; 0x2bf0 <LCD_write_data_4bit+0x5dc>
    2bd2:	88 ec       	ldi	r24, 0xC8	; 200
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	9d 8f       	std	Y+29, r25	; 0x1d
    2bd8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2bdc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <LCD_write_data_4bit+0x5ca>
    2be2:	9d 8f       	std	Y+29, r25	; 0x1d
    2be4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2be8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	9f 8f       	std	Y+31, r25	; 0x1f
    2bee:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bf2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	69 f7       	brne	.-38     	; 0x2bd2 <LCD_write_data_4bit+0x5be>
    2bf8:	24 c0       	rjmp	.+72     	; 0x2c42 <LCD_write_data_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfa:	68 a1       	ldd	r22, Y+32	; 0x20
    2bfc:	79 a1       	ldd	r23, Y+33	; 0x21
    2bfe:	8a a1       	ldd	r24, Y+34	; 0x22
    2c00:	9b a1       	ldd	r25, Y+35	; 0x23
    2c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	9f 8f       	std	Y+31, r25	; 0x1f
    2c0c:	8e 8f       	std	Y+30, r24	; 0x1e
    2c0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c10:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c12:	9b 8f       	std	Y+27, r25	; 0x1b
    2c14:	8a 8f       	std	Y+26, r24	; 0x1a
    2c16:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c18:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <LCD_write_data_4bit+0x606>
    2c1e:	9b 8f       	std	Y+27, r25	; 0x1b
    2c20:	8a 8f       	std	Y+26, r24	; 0x1a
    2c22:	0f c0       	rjmp	.+30     	; 0x2c42 <LCD_write_data_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c24:	69 a5       	ldd	r22, Y+41	; 0x29
    2c26:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c28:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	88 a7       	std	Y+40, r24	; 0x28
    2c36:	88 a5       	ldd	r24, Y+40	; 0x28
    2c38:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c3a:	89 8d       	ldd	r24, Y+25	; 0x19
    2c3c:	8a 95       	dec	r24
    2c3e:	f1 f7       	brne	.-4      	; 0x2c3c <LCD_write_data_4bit+0x628>
    2c40:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2c42:	82 e0       	ldi	r24, 0x02	; 2
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	a0 e8       	ldi	r26, 0x80	; 128
    2c50:	bf e3       	ldi	r27, 0x3F	; 63
    2c52:	8d 8b       	std	Y+21, r24	; 0x15
    2c54:	9e 8b       	std	Y+22, r25	; 0x16
    2c56:	af 8b       	std	Y+23, r26	; 0x17
    2c58:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c60:	98 8d       	ldd	r25, Y+24	; 0x18
    2c62:	2b ea       	ldi	r18, 0xAB	; 171
    2c64:	3a ea       	ldi	r19, 0xAA	; 170
    2c66:	4a e2       	ldi	r20, 0x2A	; 42
    2c68:	50 e4       	ldi	r21, 0x40	; 64
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	89 8b       	std	Y+17, r24	; 0x11
    2c74:	9a 8b       	std	Y+18, r25	; 0x12
    2c76:	ab 8b       	std	Y+19, r26	; 0x13
    2c78:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c7a:	69 89       	ldd	r22, Y+17	; 0x11
    2c7c:	7a 89       	ldd	r23, Y+18	; 0x12
    2c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c80:	9c 89       	ldd	r25, Y+20	; 0x14
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e8       	ldi	r20, 0x80	; 128
    2c88:	5f e3       	ldi	r21, 0x3F	; 63
    2c8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8e:	88 23       	and	r24, r24
    2c90:	1c f4       	brge	.+6      	; 0x2c98 <LCD_write_data_4bit+0x684>
		__ticks = 1;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	88 8b       	std	Y+16, r24	; 0x10
    2c96:	91 c0       	rjmp	.+290    	; 0x2dba <LCD_write_data_4bit+0x7a6>
	else if (__tmp > 255)
    2c98:	69 89       	ldd	r22, Y+17	; 0x11
    2c9a:	7a 89       	ldd	r23, Y+18	; 0x12
    2c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	4f e7       	ldi	r20, 0x7F	; 127
    2ca6:	53 e4       	ldi	r21, 0x43	; 67
    2ca8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cac:	18 16       	cp	r1, r24
    2cae:	0c f0       	brlt	.+2      	; 0x2cb2 <LCD_write_data_4bit+0x69e>
    2cb0:	7b c0       	rjmp	.+246    	; 0x2da8 <LCD_write_data_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	4a e7       	ldi	r20, 0x7A	; 122
    2cc0:	54 e4       	ldi	r21, 0x44	; 68
    2cc2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	8c 87       	std	Y+12, r24	; 0x0c
    2ccc:	9d 87       	std	Y+13, r25	; 0x0d
    2cce:	ae 87       	std	Y+14, r26	; 0x0e
    2cd0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cd4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	4a ef       	ldi	r20, 0xFA	; 250
    2ce0:	54 e4       	ldi	r21, 0x44	; 68
    2ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	88 87       	std	Y+8, r24	; 0x08
    2cec:	99 87       	std	Y+9, r25	; 0x09
    2cee:	aa 87       	std	Y+10, r26	; 0x0a
    2cf0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2cf2:	68 85       	ldd	r22, Y+8	; 0x08
    2cf4:	79 85       	ldd	r23, Y+9	; 0x09
    2cf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cf8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e8       	ldi	r20, 0x80	; 128
    2d00:	5f e3       	ldi	r21, 0x3F	; 63
    2d02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d06:	88 23       	and	r24, r24
    2d08:	2c f4       	brge	.+10     	; 0x2d14 <LCD_write_data_4bit+0x700>
		__ticks = 1;
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	9f 83       	std	Y+7, r25	; 0x07
    2d10:	8e 83       	std	Y+6, r24	; 0x06
    2d12:	3f c0       	rjmp	.+126    	; 0x2d92 <LCD_write_data_4bit+0x77e>
	else if (__tmp > 65535)
    2d14:	68 85       	ldd	r22, Y+8	; 0x08
    2d16:	79 85       	ldd	r23, Y+9	; 0x09
    2d18:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	3f ef       	ldi	r19, 0xFF	; 255
    2d20:	4f e7       	ldi	r20, 0x7F	; 127
    2d22:	57 e4       	ldi	r21, 0x47	; 71
    2d24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d28:	18 16       	cp	r1, r24
    2d2a:	4c f5       	brge	.+82     	; 0x2d7e <LCD_write_data_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d2e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d30:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d32:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e2       	ldi	r20, 0x20	; 32
    2d3a:	51 e4       	ldi	r21, 0x41	; 65
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	9f 83       	std	Y+7, r25	; 0x07
    2d52:	8e 83       	std	Y+6, r24	; 0x06
    2d54:	0f c0       	rjmp	.+30     	; 0x2d74 <LCD_write_data_4bit+0x760>
    2d56:	88 ec       	ldi	r24, 0xC8	; 200
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	9d 83       	std	Y+5, r25	; 0x05
    2d5c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d60:	9d 81       	ldd	r25, Y+5	; 0x05
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	f1 f7       	brne	.-4      	; 0x2d62 <LCD_write_data_4bit+0x74e>
    2d66:	9d 83       	std	Y+5, r25	; 0x05
    2d68:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d6c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	9f 83       	std	Y+7, r25	; 0x07
    2d72:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d74:	8e 81       	ldd	r24, Y+6	; 0x06
    2d76:	9f 81       	ldd	r25, Y+7	; 0x07
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	69 f7       	brne	.-38     	; 0x2d56 <LCD_write_data_4bit+0x742>
    2d7c:	24 c0       	rjmp	.+72     	; 0x2dc6 <LCD_write_data_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7e:	68 85       	ldd	r22, Y+8	; 0x08
    2d80:	79 85       	ldd	r23, Y+9	; 0x09
    2d82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d84:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	9f 83       	std	Y+7, r25	; 0x07
    2d90:	8e 83       	std	Y+6, r24	; 0x06
    2d92:	8e 81       	ldd	r24, Y+6	; 0x06
    2d94:	9f 81       	ldd	r25, Y+7	; 0x07
    2d96:	9b 83       	std	Y+3, r25	; 0x03
    2d98:	8a 83       	std	Y+2, r24	; 0x02
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <LCD_write_data_4bit+0x78a>
    2da2:	9b 83       	std	Y+3, r25	; 0x03
    2da4:	8a 83       	std	Y+2, r24	; 0x02
    2da6:	0f c0       	rjmp	.+30     	; 0x2dc6 <LCD_write_data_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2da8:	69 89       	ldd	r22, Y+17	; 0x11
    2daa:	7a 89       	ldd	r23, Y+18	; 0x12
    2dac:	8b 89       	ldd	r24, Y+19	; 0x13
    2dae:	9c 89       	ldd	r25, Y+20	; 0x14
    2db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	88 8b       	std	Y+16, r24	; 0x10
    2dba:	88 89       	ldd	r24, Y+16	; 0x10
    2dbc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	8a 95       	dec	r24
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <LCD_write_data_4bit+0x7ac>
    2dc4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	ef 59       	subi	r30, 0x9F	; 159
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	84 e0       	ldi	r24, 0x04	; 4
    2dce:	80 83       	st	Z, r24
    2dd0:	27 c0       	rjmp	.+78     	; 0x2e20 <LCD_write_data_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	ed 59       	subi	r30, 0x9D	; 157
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	80 81       	ld	r24, Z
    2dda:	28 2f       	mov	r18, r24
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	fe 01       	movw	r30, r28
    2de0:	ef 59       	subi	r30, 0x9F	; 159
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	80 81       	ld	r24, Z
    2de6:	88 2f       	mov	r24, r24
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	04 97       	sbiw	r24, 0x04	; 4
    2dec:	f9 01       	movw	r30, r18
    2dee:	02 c0       	rjmp	.+4      	; 0x2df4 <LCD_write_data_4bit+0x7e0>
    2df0:	f5 95       	asr	r31
    2df2:	e7 95       	ror	r30
    2df4:	8a 95       	dec	r24
    2df6:	e2 f7       	brpl	.-8      	; 0x2df0 <LCD_write_data_4bit+0x7dc>
    2df8:	cf 01       	movw	r24, r30
    2dfa:	98 2f       	mov	r25, r24
    2dfc:	91 70       	andi	r25, 0x01	; 1
    2dfe:	fe 01       	movw	r30, r28
    2e00:	ef 59       	subi	r30, 0x9F	; 159
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	82 e0       	ldi	r24, 0x02	; 2
    2e06:	60 81       	ld	r22, Z
    2e08:	49 2f       	mov	r20, r25
    2e0a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2e0e:	de 01       	movw	r26, r28
    2e10:	af 59       	subi	r26, 0x9F	; 159
    2e12:	bf 4f       	sbci	r27, 0xFF	; 255
    2e14:	fe 01       	movw	r30, r28
    2e16:	ef 59       	subi	r30, 0x9F	; 159
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 81       	ld	r24, Z
    2e1c:	8f 5f       	subi	r24, 0xFF	; 255
    2e1e:	8c 93       	st	X, r24
    2e20:	fe 01       	movw	r30, r28
    2e22:	ef 59       	subi	r30, 0x9F	; 159
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 81       	ld	r24, Z
    2e28:	88 30       	cpi	r24, 0x08	; 8
    2e2a:	98 f2       	brcs	.-90     	; 0x2dd2 <LCD_write_data_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	60 e0       	ldi	r22, 0x00	; 0
    2e30:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
}
    2e34:	cd 59       	subi	r28, 0x9D	; 157
    2e36:	df 4f       	sbci	r29, 0xFF	; 255
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	1f 91       	pop	r17
    2e48:	0f 91       	pop	r16
    2e4a:	08 95       	ret

00002e4c <LCD_write_cmd_4bit>:

void LCD_write_cmd_4bit(u8 lcd_copy_cmd_4bit){
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62
    2e58:	c3 56       	subi	r28, 0x63	; 99
    2e5a:	d0 40       	sbci	r29, 0x00	; 0
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	fe 01       	movw	r30, r28
    2e68:	ed 59       	subi	r30, 0x9D	; 157
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	80 83       	st	Z, r24
	 *		lcd_copy_cmd_4bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    2e6e:	82 e0       	ldi	r24, 0x02	; 2
    2e70:	62 e0       	ldi	r22, 0x02	; 2
    2e72:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    2e76:	82 e0       	ldi	r24, 0x02	; 2
    2e78:	61 e0       	ldi	r22, 0x01	; 1
    2e7a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
    2e7e:	fe 01       	movw	r30, r28
    2e80:	e3 5a       	subi	r30, 0xA3	; 163
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	a0 e8       	ldi	r26, 0x80	; 128
    2e8a:	bf e3       	ldi	r27, 0x3F	; 63
    2e8c:	80 83       	st	Z, r24
    2e8e:	91 83       	std	Z+1, r25	; 0x01
    2e90:	a2 83       	std	Z+2, r26	; 0x02
    2e92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e94:	8e 01       	movw	r16, r28
    2e96:	07 5a       	subi	r16, 0xA7	; 167
    2e98:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e3 5a       	subi	r30, 0xA3	; 163
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	60 81       	ld	r22, Z
    2ea2:	71 81       	ldd	r23, Z+1	; 0x01
    2ea4:	82 81       	ldd	r24, Z+2	; 0x02
    2ea6:	93 81       	ldd	r25, Z+3	; 0x03
    2ea8:	2b ea       	ldi	r18, 0xAB	; 171
    2eaa:	3a ea       	ldi	r19, 0xAA	; 170
    2eac:	4a e2       	ldi	r20, 0x2A	; 42
    2eae:	50 e4       	ldi	r21, 0x40	; 64
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	f8 01       	movw	r30, r16
    2eba:	80 83       	st	Z, r24
    2ebc:	91 83       	std	Z+1, r25	; 0x01
    2ebe:	a2 83       	std	Z+2, r26	; 0x02
    2ec0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e7 5a       	subi	r30, 0xA7	; 167
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	60 81       	ld	r22, Z
    2eca:	71 81       	ldd	r23, Z+1	; 0x01
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	93 81       	ldd	r25, Z+3	; 0x03
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e8       	ldi	r20, 0x80	; 128
    2ed6:	5f e3       	ldi	r21, 0x3F	; 63
    2ed8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2edc:	88 23       	and	r24, r24
    2ede:	34 f4       	brge	.+12     	; 0x2eec <LCD_write_cmd_4bit+0xa0>
		__ticks = 1;
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e8 5a       	subi	r30, 0xA8	; 168
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	80 83       	st	Z, r24
    2eea:	e0 c0       	rjmp	.+448    	; 0x30ac <LCD_write_cmd_4bit+0x260>
	else if (__tmp > 255)
    2eec:	fe 01       	movw	r30, r28
    2eee:	e7 5a       	subi	r30, 0xA7	; 167
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4f e7       	ldi	r20, 0x7F	; 127
    2f00:	53 e4       	ldi	r21, 0x43	; 67
    2f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f06:	18 16       	cp	r1, r24
    2f08:	0c f0       	brlt	.+2      	; 0x2f0c <LCD_write_cmd_4bit+0xc0>
    2f0a:	c0 c0       	rjmp	.+384    	; 0x308c <LCD_write_cmd_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e3 5a       	subi	r30, 0xA3	; 163
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	60 81       	ld	r22, Z
    2f14:	71 81       	ldd	r23, Z+1	; 0x01
    2f16:	82 81       	ldd	r24, Z+2	; 0x02
    2f18:	93 81       	ldd	r25, Z+3	; 0x03
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	4a e7       	ldi	r20, 0x7A	; 122
    2f20:	54 e4       	ldi	r21, 0x44	; 68
    2f22:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	ec 5a       	subi	r30, 0xAC	; 172
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 83       	st	Z, r24
    2f32:	91 83       	std	Z+1, r25	; 0x01
    2f34:	a2 83       	std	Z+2, r26	; 0x02
    2f36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f38:	8e 01       	movw	r16, r28
    2f3a:	00 5b       	subi	r16, 0xB0	; 176
    2f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ec 5a       	subi	r30, 0xAC	; 172
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	60 81       	ld	r22, Z
    2f46:	71 81       	ldd	r23, Z+1	; 0x01
    2f48:	82 81       	ldd	r24, Z+2	; 0x02
    2f4a:	93 81       	ldd	r25, Z+3	; 0x03
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	4a ef       	ldi	r20, 0xFA	; 250
    2f52:	54 e4       	ldi	r21, 0x44	; 68
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	f8 01       	movw	r30, r16
    2f5e:	80 83       	st	Z, r24
    2f60:	91 83       	std	Z+1, r25	; 0x01
    2f62:	a2 83       	std	Z+2, r26	; 0x02
    2f64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f66:	fe 01       	movw	r30, r28
    2f68:	e0 5b       	subi	r30, 0xB0	; 176
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	82 81       	ldd	r24, Z+2	; 0x02
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	40 e8       	ldi	r20, 0x80	; 128
    2f7a:	5f e3       	ldi	r21, 0x3F	; 63
    2f7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f80:	88 23       	and	r24, r24
    2f82:	44 f4       	brge	.+16     	; 0x2f94 <LCD_write_cmd_4bit+0x148>
		__ticks = 1;
    2f84:	fe 01       	movw	r30, r28
    2f86:	e2 5b       	subi	r30, 0xB2	; 178
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	80 83       	st	Z, r24
    2f92:	64 c0       	rjmp	.+200    	; 0x305c <LCD_write_cmd_4bit+0x210>
	else if (__tmp > 65535)
    2f94:	fe 01       	movw	r30, r28
    2f96:	e0 5b       	subi	r30, 0xB0	; 176
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	60 81       	ld	r22, Z
    2f9c:	71 81       	ldd	r23, Z+1	; 0x01
    2f9e:	82 81       	ldd	r24, Z+2	; 0x02
    2fa0:	93 81       	ldd	r25, Z+3	; 0x03
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	3f ef       	ldi	r19, 0xFF	; 255
    2fa6:	4f e7       	ldi	r20, 0x7F	; 127
    2fa8:	57 e4       	ldi	r21, 0x47	; 71
    2faa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fae:	18 16       	cp	r1, r24
    2fb0:	0c f0       	brlt	.+2      	; 0x2fb4 <LCD_write_cmd_4bit+0x168>
    2fb2:	43 c0       	rjmp	.+134    	; 0x303a <LCD_write_cmd_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	ec 5a       	subi	r30, 0xAC	; 172
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	60 81       	ld	r22, Z
    2fbc:	71 81       	ldd	r23, Z+1	; 0x01
    2fbe:	82 81       	ldd	r24, Z+2	; 0x02
    2fc0:	93 81       	ldd	r25, Z+3	; 0x03
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	40 e2       	ldi	r20, 0x20	; 32
    2fc8:	51 e4       	ldi	r21, 0x41	; 65
    2fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	8e 01       	movw	r16, r28
    2fd4:	02 5b       	subi	r16, 0xB2	; 178
    2fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd8:	bc 01       	movw	r22, r24
    2fda:	cd 01       	movw	r24, r26
    2fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	f8 01       	movw	r30, r16
    2fe6:	91 83       	std	Z+1, r25	; 0x01
    2fe8:	80 83       	st	Z, r24
    2fea:	1f c0       	rjmp	.+62     	; 0x302a <LCD_write_cmd_4bit+0x1de>
    2fec:	fe 01       	movw	r30, r28
    2fee:	e4 5b       	subi	r30, 0xB4	; 180
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	88 ec       	ldi	r24, 0xC8	; 200
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	91 83       	std	Z+1, r25	; 0x01
    2ff8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e4 5b       	subi	r30, 0xB4	; 180
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	80 81       	ld	r24, Z
    3002:	91 81       	ldd	r25, Z+1	; 0x01
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	f1 f7       	brne	.-4      	; 0x3004 <LCD_write_cmd_4bit+0x1b8>
    3008:	fe 01       	movw	r30, r28
    300a:	e4 5b       	subi	r30, 0xB4	; 180
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	91 83       	std	Z+1, r25	; 0x01
    3010:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3012:	de 01       	movw	r26, r28
    3014:	a2 5b       	subi	r26, 0xB2	; 178
    3016:	bf 4f       	sbci	r27, 0xFF	; 255
    3018:	fe 01       	movw	r30, r28
    301a:	e2 5b       	subi	r30, 0xB2	; 178
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	80 81       	ld	r24, Z
    3020:	91 81       	ldd	r25, Z+1	; 0x01
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	11 96       	adiw	r26, 0x01	; 1
    3026:	9c 93       	st	X, r25
    3028:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302a:	fe 01       	movw	r30, r28
    302c:	e2 5b       	subi	r30, 0xB2	; 178
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	80 81       	ld	r24, Z
    3032:	91 81       	ldd	r25, Z+1	; 0x01
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	d1 f6       	brne	.-76     	; 0x2fec <LCD_write_cmd_4bit+0x1a0>
    3038:	4b c0       	rjmp	.+150    	; 0x30d0 <LCD_write_cmd_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303a:	8e 01       	movw	r16, r28
    303c:	02 5b       	subi	r16, 0xB2	; 178
    303e:	1f 4f       	sbci	r17, 0xFF	; 255
    3040:	fe 01       	movw	r30, r28
    3042:	e0 5b       	subi	r30, 0xB0	; 176
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	60 81       	ld	r22, Z
    3048:	71 81       	ldd	r23, Z+1	; 0x01
    304a:	82 81       	ldd	r24, Z+2	; 0x02
    304c:	93 81       	ldd	r25, Z+3	; 0x03
    304e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	f8 01       	movw	r30, r16
    3058:	91 83       	std	Z+1, r25	; 0x01
    305a:	80 83       	st	Z, r24
    305c:	de 01       	movw	r26, r28
    305e:	a6 5b       	subi	r26, 0xB6	; 182
    3060:	bf 4f       	sbci	r27, 0xFF	; 255
    3062:	fe 01       	movw	r30, r28
    3064:	e2 5b       	subi	r30, 0xB2	; 178
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	80 81       	ld	r24, Z
    306a:	91 81       	ldd	r25, Z+1	; 0x01
    306c:	11 96       	adiw	r26, 0x01	; 1
    306e:	9c 93       	st	X, r25
    3070:	8e 93       	st	-X, r24
    3072:	fe 01       	movw	r30, r28
    3074:	e6 5b       	subi	r30, 0xB6	; 182
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	80 81       	ld	r24, Z
    307a:	91 81       	ldd	r25, Z+1	; 0x01
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	f1 f7       	brne	.-4      	; 0x307c <LCD_write_cmd_4bit+0x230>
    3080:	fe 01       	movw	r30, r28
    3082:	e6 5b       	subi	r30, 0xB6	; 182
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	91 83       	std	Z+1, r25	; 0x01
    3088:	80 83       	st	Z, r24
    308a:	22 c0       	rjmp	.+68     	; 0x30d0 <LCD_write_cmd_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    308c:	8e 01       	movw	r16, r28
    308e:	08 5a       	subi	r16, 0xA8	; 168
    3090:	1f 4f       	sbci	r17, 0xFF	; 255
    3092:	fe 01       	movw	r30, r28
    3094:	e7 5a       	subi	r30, 0xA7	; 167
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	60 81       	ld	r22, Z
    309a:	71 81       	ldd	r23, Z+1	; 0x01
    309c:	82 81       	ldd	r24, Z+2	; 0x02
    309e:	93 81       	ldd	r25, Z+3	; 0x03
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	f8 01       	movw	r30, r16
    30aa:	80 83       	st	Z, r24
    30ac:	de 01       	movw	r26, r28
    30ae:	a7 5b       	subi	r26, 0xB7	; 183
    30b0:	bf 4f       	sbci	r27, 0xFF	; 255
    30b2:	fe 01       	movw	r30, r28
    30b4:	e8 5a       	subi	r30, 0xA8	; 168
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	80 81       	ld	r24, Z
    30ba:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30bc:	fe 01       	movw	r30, r28
    30be:	e7 5b       	subi	r30, 0xB7	; 183
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	80 81       	ld	r24, Z
    30c4:	8a 95       	dec	r24
    30c6:	f1 f7       	brne	.-4      	; 0x30c4 <LCD_write_cmd_4bit+0x278>
    30c8:	fe 01       	movw	r30, r28
    30ca:	e7 5b       	subi	r30, 0xB7	; 183
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    30d0:	82 e0       	ldi	r24, 0x02	; 2
    30d2:	60 e0       	ldi	r22, 0x00	; 0
    30d4:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    30d8:	fe 01       	movw	r30, r28
    30da:	eb 5b       	subi	r30, 0xBB	; 187
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	a0 e8       	ldi	r26, 0x80	; 128
    30e4:	bf e3       	ldi	r27, 0x3F	; 63
    30e6:	80 83       	st	Z, r24
    30e8:	91 83       	std	Z+1, r25	; 0x01
    30ea:	a2 83       	std	Z+2, r26	; 0x02
    30ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30ee:	8e 01       	movw	r16, r28
    30f0:	0f 5b       	subi	r16, 0xBF	; 191
    30f2:	1f 4f       	sbci	r17, 0xFF	; 255
    30f4:	fe 01       	movw	r30, r28
    30f6:	eb 5b       	subi	r30, 0xBB	; 187
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	60 81       	ld	r22, Z
    30fc:	71 81       	ldd	r23, Z+1	; 0x01
    30fe:	82 81       	ldd	r24, Z+2	; 0x02
    3100:	93 81       	ldd	r25, Z+3	; 0x03
    3102:	2b ea       	ldi	r18, 0xAB	; 171
    3104:	3a ea       	ldi	r19, 0xAA	; 170
    3106:	4a e2       	ldi	r20, 0x2A	; 42
    3108:	50 e4       	ldi	r21, 0x40	; 64
    310a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	f8 01       	movw	r30, r16
    3114:	80 83       	st	Z, r24
    3116:	91 83       	std	Z+1, r25	; 0x01
    3118:	a2 83       	std	Z+2, r26	; 0x02
    311a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    311c:	fe 01       	movw	r30, r28
    311e:	ef 5b       	subi	r30, 0xBF	; 191
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	60 81       	ld	r22, Z
    3124:	71 81       	ldd	r23, Z+1	; 0x01
    3126:	82 81       	ldd	r24, Z+2	; 0x02
    3128:	93 81       	ldd	r25, Z+3	; 0x03
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e8       	ldi	r20, 0x80	; 128
    3130:	5f e3       	ldi	r21, 0x3F	; 63
    3132:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3136:	88 23       	and	r24, r24
    3138:	34 f4       	brge	.+12     	; 0x3146 <LCD_write_cmd_4bit+0x2fa>
		__ticks = 1;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	fe 01       	movw	r30, r28
    313e:	e0 5c       	subi	r30, 0xC0	; 192
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	80 83       	st	Z, r24
    3144:	9d c0       	rjmp	.+314    	; 0x3280 <LCD_write_cmd_4bit+0x434>
	else if (__tmp > 255)
    3146:	fe 01       	movw	r30, r28
    3148:	ef 5b       	subi	r30, 0xBF	; 191
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	60 81       	ld	r22, Z
    314e:	71 81       	ldd	r23, Z+1	; 0x01
    3150:	82 81       	ldd	r24, Z+2	; 0x02
    3152:	93 81       	ldd	r25, Z+3	; 0x03
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	4f e7       	ldi	r20, 0x7F	; 127
    315a:	53 e4       	ldi	r21, 0x43	; 67
    315c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3160:	18 16       	cp	r1, r24
    3162:	0c f0       	brlt	.+2      	; 0x3166 <LCD_write_cmd_4bit+0x31a>
    3164:	7e c0       	rjmp	.+252    	; 0x3262 <LCD_write_cmd_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    3166:	fe 01       	movw	r30, r28
    3168:	eb 5b       	subi	r30, 0xBB	; 187
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	4a e7       	ldi	r20, 0x7A	; 122
    317a:	54 e4       	ldi	r21, 0x44	; 68
    317c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	8c af       	std	Y+60, r24	; 0x3c
    3186:	9d af       	std	Y+61, r25	; 0x3d
    3188:	ae af       	std	Y+62, r26	; 0x3e
    318a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    318c:	6c ad       	ldd	r22, Y+60	; 0x3c
    318e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3190:	8e ad       	ldd	r24, Y+62	; 0x3e
    3192:	9f ad       	ldd	r25, Y+63	; 0x3f
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	4a ef       	ldi	r20, 0xFA	; 250
    319a:	54 e4       	ldi	r21, 0x44	; 68
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	88 af       	std	Y+56, r24	; 0x38
    31a6:	99 af       	std	Y+57, r25	; 0x39
    31a8:	aa af       	std	Y+58, r26	; 0x3a
    31aa:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    31ac:	68 ad       	ldd	r22, Y+56	; 0x38
    31ae:	79 ad       	ldd	r23, Y+57	; 0x39
    31b0:	8a ad       	ldd	r24, Y+58	; 0x3a
    31b2:	9b ad       	ldd	r25, Y+59	; 0x3b
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e8       	ldi	r20, 0x80	; 128
    31ba:	5f e3       	ldi	r21, 0x3F	; 63
    31bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31c0:	88 23       	and	r24, r24
    31c2:	2c f4       	brge	.+10     	; 0x31ce <LCD_write_cmd_4bit+0x382>
		__ticks = 1;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	9f ab       	std	Y+55, r25	; 0x37
    31ca:	8e ab       	std	Y+54, r24	; 0x36
    31cc:	3f c0       	rjmp	.+126    	; 0x324c <LCD_write_cmd_4bit+0x400>
	else if (__tmp > 65535)
    31ce:	68 ad       	ldd	r22, Y+56	; 0x38
    31d0:	79 ad       	ldd	r23, Y+57	; 0x39
    31d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    31d4:	9b ad       	ldd	r25, Y+59	; 0x3b
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	3f ef       	ldi	r19, 0xFF	; 255
    31da:	4f e7       	ldi	r20, 0x7F	; 127
    31dc:	57 e4       	ldi	r21, 0x47	; 71
    31de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31e2:	18 16       	cp	r1, r24
    31e4:	4c f5       	brge	.+82     	; 0x3238 <LCD_write_cmd_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e6:	6c ad       	ldd	r22, Y+60	; 0x3c
    31e8:	7d ad       	ldd	r23, Y+61	; 0x3d
    31ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    31ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e2       	ldi	r20, 0x20	; 32
    31f4:	51 e4       	ldi	r21, 0x41	; 65
    31f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	9f ab       	std	Y+55, r25	; 0x37
    320c:	8e ab       	std	Y+54, r24	; 0x36
    320e:	0f c0       	rjmp	.+30     	; 0x322e <LCD_write_cmd_4bit+0x3e2>
    3210:	88 ec       	ldi	r24, 0xC8	; 200
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	9d ab       	std	Y+53, r25	; 0x35
    3216:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3218:	8c a9       	ldd	r24, Y+52	; 0x34
    321a:	9d a9       	ldd	r25, Y+53	; 0x35
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	f1 f7       	brne	.-4      	; 0x321c <LCD_write_cmd_4bit+0x3d0>
    3220:	9d ab       	std	Y+53, r25	; 0x35
    3222:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3224:	8e a9       	ldd	r24, Y+54	; 0x36
    3226:	9f a9       	ldd	r25, Y+55	; 0x37
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	9f ab       	std	Y+55, r25	; 0x37
    322c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322e:	8e a9       	ldd	r24, Y+54	; 0x36
    3230:	9f a9       	ldd	r25, Y+55	; 0x37
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	69 f7       	brne	.-38     	; 0x3210 <LCD_write_cmd_4bit+0x3c4>
    3236:	2d c0       	rjmp	.+90     	; 0x3292 <LCD_write_cmd_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3238:	68 ad       	ldd	r22, Y+56	; 0x38
    323a:	79 ad       	ldd	r23, Y+57	; 0x39
    323c:	8a ad       	ldd	r24, Y+58	; 0x3a
    323e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	9f ab       	std	Y+55, r25	; 0x37
    324a:	8e ab       	std	Y+54, r24	; 0x36
    324c:	8e a9       	ldd	r24, Y+54	; 0x36
    324e:	9f a9       	ldd	r25, Y+55	; 0x37
    3250:	9b ab       	std	Y+51, r25	; 0x33
    3252:	8a ab       	std	Y+50, r24	; 0x32
    3254:	8a a9       	ldd	r24, Y+50	; 0x32
    3256:	9b a9       	ldd	r25, Y+51	; 0x33
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	f1 f7       	brne	.-4      	; 0x3258 <LCD_write_cmd_4bit+0x40c>
    325c:	9b ab       	std	Y+51, r25	; 0x33
    325e:	8a ab       	std	Y+50, r24	; 0x32
    3260:	18 c0       	rjmp	.+48     	; 0x3292 <LCD_write_cmd_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3262:	fe 01       	movw	r30, r28
    3264:	ef 5b       	subi	r30, 0xBF	; 191
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	60 81       	ld	r22, Z
    326a:	71 81       	ldd	r23, Z+1	; 0x01
    326c:	82 81       	ldd	r24, Z+2	; 0x02
    326e:	93 81       	ldd	r25, Z+3	; 0x03
    3270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	fe 01       	movw	r30, r28
    327a:	e0 5c       	subi	r30, 0xC0	; 192
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	80 83       	st	Z, r24
    3280:	fe 01       	movw	r30, r28
    3282:	e0 5c       	subi	r30, 0xC0	; 192
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	80 81       	ld	r24, Z
    3288:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    328a:	89 a9       	ldd	r24, Y+49	; 0x31
    328c:	8a 95       	dec	r24
    328e:	f1 f7       	brne	.-4      	; 0x328c <LCD_write_cmd_4bit+0x440>
    3290:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    3292:	fe 01       	movw	r30, r28
    3294:	ee 59       	subi	r30, 0x9E	; 158
    3296:	ff 4f       	sbci	r31, 0xFF	; 255
    3298:	84 e0       	ldi	r24, 0x04	; 4
    329a:	80 83       	st	Z, r24
    329c:	26 c0       	rjmp	.+76     	; 0x32ea <LCD_write_cmd_4bit+0x49e>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
    329e:	fe 01       	movw	r30, r28
    32a0:	ed 59       	subi	r30, 0x9D	; 157
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	80 81       	ld	r24, Z
    32a6:	28 2f       	mov	r18, r24
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	fe 01       	movw	r30, r28
    32ac:	ee 59       	subi	r30, 0x9E	; 158
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	80 81       	ld	r24, Z
    32b2:	88 2f       	mov	r24, r24
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	a9 01       	movw	r20, r18
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <LCD_write_cmd_4bit+0x472>
    32ba:	55 95       	asr	r21
    32bc:	47 95       	ror	r20
    32be:	8a 95       	dec	r24
    32c0:	e2 f7       	brpl	.-8      	; 0x32ba <LCD_write_cmd_4bit+0x46e>
    32c2:	ca 01       	movw	r24, r20
    32c4:	98 2f       	mov	r25, r24
    32c6:	91 70       	andi	r25, 0x01	; 1
    32c8:	fe 01       	movw	r30, r28
    32ca:	ee 59       	subi	r30, 0x9E	; 158
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	82 e0       	ldi	r24, 0x02	; 2
    32d0:	60 81       	ld	r22, Z
    32d2:	49 2f       	mov	r20, r25
    32d4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    32d8:	de 01       	movw	r26, r28
    32da:	ae 59       	subi	r26, 0x9E	; 158
    32dc:	bf 4f       	sbci	r27, 0xFF	; 255
    32de:	fe 01       	movw	r30, r28
    32e0:	ee 59       	subi	r30, 0x9E	; 158
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	80 81       	ld	r24, Z
    32e6:	8f 5f       	subi	r24, 0xFF	; 255
    32e8:	8c 93       	st	X, r24
    32ea:	fe 01       	movw	r30, r28
    32ec:	ee 59       	subi	r30, 0x9E	; 158
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	80 81       	ld	r24, Z
    32f2:	88 30       	cpi	r24, 0x08	; 8
    32f4:	a0 f2       	brcs	.-88     	; 0x329e <LCD_write_cmd_4bit+0x452>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	60 e0       	ldi	r22, 0x00	; 0
    32fa:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	a0 e2       	ldi	r26, 0x20	; 32
    3304:	b1 e4       	ldi	r27, 0x41	; 65
    3306:	8d a7       	std	Y+45, r24	; 0x2d
    3308:	9e a7       	std	Y+46, r25	; 0x2e
    330a:	af a7       	std	Y+47, r26	; 0x2f
    330c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    330e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3310:	7e a5       	ldd	r23, Y+46	; 0x2e
    3312:	8f a5       	ldd	r24, Y+47	; 0x2f
    3314:	98 a9       	ldd	r25, Y+48	; 0x30
    3316:	2b ea       	ldi	r18, 0xAB	; 171
    3318:	3a ea       	ldi	r19, 0xAA	; 170
    331a:	4a e2       	ldi	r20, 0x2A	; 42
    331c:	50 e4       	ldi	r21, 0x40	; 64
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	89 a7       	std	Y+41, r24	; 0x29
    3328:	9a a7       	std	Y+42, r25	; 0x2a
    332a:	ab a7       	std	Y+43, r26	; 0x2b
    332c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    332e:	69 a5       	ldd	r22, Y+41	; 0x29
    3330:	7a a5       	ldd	r23, Y+42	; 0x2a
    3332:	8b a5       	ldd	r24, Y+43	; 0x2b
    3334:	9c a5       	ldd	r25, Y+44	; 0x2c
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e8       	ldi	r20, 0x80	; 128
    333c:	5f e3       	ldi	r21, 0x3F	; 63
    333e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3342:	88 23       	and	r24, r24
    3344:	1c f4       	brge	.+6      	; 0x334c <LCD_write_cmd_4bit+0x500>
		__ticks = 1;
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	88 a7       	std	Y+40, r24	; 0x28
    334a:	91 c0       	rjmp	.+290    	; 0x346e <LCD_write_cmd_4bit+0x622>
	else if (__tmp > 255)
    334c:	69 a5       	ldd	r22, Y+41	; 0x29
    334e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3350:	8b a5       	ldd	r24, Y+43	; 0x2b
    3352:	9c a5       	ldd	r25, Y+44	; 0x2c
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	4f e7       	ldi	r20, 0x7F	; 127
    335a:	53 e4       	ldi	r21, 0x43	; 67
    335c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3360:	18 16       	cp	r1, r24
    3362:	0c f0       	brlt	.+2      	; 0x3366 <LCD_write_cmd_4bit+0x51a>
    3364:	7b c0       	rjmp	.+246    	; 0x345c <LCD_write_cmd_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    3366:	6d a5       	ldd	r22, Y+45	; 0x2d
    3368:	7e a5       	ldd	r23, Y+46	; 0x2e
    336a:	8f a5       	ldd	r24, Y+47	; 0x2f
    336c:	98 a9       	ldd	r25, Y+48	; 0x30
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	4a e7       	ldi	r20, 0x7A	; 122
    3374:	54 e4       	ldi	r21, 0x44	; 68
    3376:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	8c a3       	std	Y+36, r24	; 0x24
    3380:	9d a3       	std	Y+37, r25	; 0x25
    3382:	ae a3       	std	Y+38, r26	; 0x26
    3384:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3386:	6c a1       	ldd	r22, Y+36	; 0x24
    3388:	7d a1       	ldd	r23, Y+37	; 0x25
    338a:	8e a1       	ldd	r24, Y+38	; 0x26
    338c:	9f a1       	ldd	r25, Y+39	; 0x27
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	4a ef       	ldi	r20, 0xFA	; 250
    3394:	54 e4       	ldi	r21, 0x44	; 68
    3396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	88 a3       	std	Y+32, r24	; 0x20
    33a0:	99 a3       	std	Y+33, r25	; 0x21
    33a2:	aa a3       	std	Y+34, r26	; 0x22
    33a4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    33a6:	68 a1       	ldd	r22, Y+32	; 0x20
    33a8:	79 a1       	ldd	r23, Y+33	; 0x21
    33aa:	8a a1       	ldd	r24, Y+34	; 0x22
    33ac:	9b a1       	ldd	r25, Y+35	; 0x23
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e8       	ldi	r20, 0x80	; 128
    33b4:	5f e3       	ldi	r21, 0x3F	; 63
    33b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ba:	88 23       	and	r24, r24
    33bc:	2c f4       	brge	.+10     	; 0x33c8 <LCD_write_cmd_4bit+0x57c>
		__ticks = 1;
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	9f 8f       	std	Y+31, r25	; 0x1f
    33c4:	8e 8f       	std	Y+30, r24	; 0x1e
    33c6:	3f c0       	rjmp	.+126    	; 0x3446 <LCD_write_cmd_4bit+0x5fa>
	else if (__tmp > 65535)
    33c8:	68 a1       	ldd	r22, Y+32	; 0x20
    33ca:	79 a1       	ldd	r23, Y+33	; 0x21
    33cc:	8a a1       	ldd	r24, Y+34	; 0x22
    33ce:	9b a1       	ldd	r25, Y+35	; 0x23
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	3f ef       	ldi	r19, 0xFF	; 255
    33d4:	4f e7       	ldi	r20, 0x7F	; 127
    33d6:	57 e4       	ldi	r21, 0x47	; 71
    33d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33dc:	18 16       	cp	r1, r24
    33de:	4c f5       	brge	.+82     	; 0x3432 <LCD_write_cmd_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e0:	6c a1       	ldd	r22, Y+36	; 0x24
    33e2:	7d a1       	ldd	r23, Y+37	; 0x25
    33e4:	8e a1       	ldd	r24, Y+38	; 0x26
    33e6:	9f a1       	ldd	r25, Y+39	; 0x27
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e2       	ldi	r20, 0x20	; 32
    33ee:	51 e4       	ldi	r21, 0x41	; 65
    33f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	bc 01       	movw	r22, r24
    33fa:	cd 01       	movw	r24, r26
    33fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	9f 8f       	std	Y+31, r25	; 0x1f
    3406:	8e 8f       	std	Y+30, r24	; 0x1e
    3408:	0f c0       	rjmp	.+30     	; 0x3428 <LCD_write_cmd_4bit+0x5dc>
    340a:	88 ec       	ldi	r24, 0xC8	; 200
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	9d 8f       	std	Y+29, r25	; 0x1d
    3410:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3412:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3414:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	f1 f7       	brne	.-4      	; 0x3416 <LCD_write_cmd_4bit+0x5ca>
    341a:	9d 8f       	std	Y+29, r25	; 0x1d
    341c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3420:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	9f 8f       	std	Y+31, r25	; 0x1f
    3426:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3428:	8e 8d       	ldd	r24, Y+30	; 0x1e
    342a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    342c:	00 97       	sbiw	r24, 0x00	; 0
    342e:	69 f7       	brne	.-38     	; 0x340a <LCD_write_cmd_4bit+0x5be>
    3430:	24 c0       	rjmp	.+72     	; 0x347a <LCD_write_cmd_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3432:	68 a1       	ldd	r22, Y+32	; 0x20
    3434:	79 a1       	ldd	r23, Y+33	; 0x21
    3436:	8a a1       	ldd	r24, Y+34	; 0x22
    3438:	9b a1       	ldd	r25, Y+35	; 0x23
    343a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	9f 8f       	std	Y+31, r25	; 0x1f
    3444:	8e 8f       	std	Y+30, r24	; 0x1e
    3446:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3448:	9f 8d       	ldd	r25, Y+31	; 0x1f
    344a:	9b 8f       	std	Y+27, r25	; 0x1b
    344c:	8a 8f       	std	Y+26, r24	; 0x1a
    344e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3450:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3452:	01 97       	sbiw	r24, 0x01	; 1
    3454:	f1 f7       	brne	.-4      	; 0x3452 <LCD_write_cmd_4bit+0x606>
    3456:	9b 8f       	std	Y+27, r25	; 0x1b
    3458:	8a 8f       	std	Y+26, r24	; 0x1a
    345a:	0f c0       	rjmp	.+30     	; 0x347a <LCD_write_cmd_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    345c:	69 a5       	ldd	r22, Y+41	; 0x29
    345e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3460:	8b a5       	ldd	r24, Y+43	; 0x2b
    3462:	9c a5       	ldd	r25, Y+44	; 0x2c
    3464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	88 a7       	std	Y+40, r24	; 0x28
    346e:	88 a5       	ldd	r24, Y+40	; 0x28
    3470:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3472:	89 8d       	ldd	r24, Y+25	; 0x19
    3474:	8a 95       	dec	r24
    3476:	f1 f7       	brne	.-4      	; 0x3474 <LCD_write_cmd_4bit+0x628>
    3478:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    347a:	82 e0       	ldi	r24, 0x02	; 2
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	a0 e8       	ldi	r26, 0x80	; 128
    3488:	bf e3       	ldi	r27, 0x3F	; 63
    348a:	8d 8b       	std	Y+21, r24	; 0x15
    348c:	9e 8b       	std	Y+22, r25	; 0x16
    348e:	af 8b       	std	Y+23, r26	; 0x17
    3490:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3492:	6d 89       	ldd	r22, Y+21	; 0x15
    3494:	7e 89       	ldd	r23, Y+22	; 0x16
    3496:	8f 89       	ldd	r24, Y+23	; 0x17
    3498:	98 8d       	ldd	r25, Y+24	; 0x18
    349a:	2b ea       	ldi	r18, 0xAB	; 171
    349c:	3a ea       	ldi	r19, 0xAA	; 170
    349e:	4a e2       	ldi	r20, 0x2A	; 42
    34a0:	50 e4       	ldi	r21, 0x40	; 64
    34a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	89 8b       	std	Y+17, r24	; 0x11
    34ac:	9a 8b       	std	Y+18, r25	; 0x12
    34ae:	ab 8b       	std	Y+19, r26	; 0x13
    34b0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    34b2:	69 89       	ldd	r22, Y+17	; 0x11
    34b4:	7a 89       	ldd	r23, Y+18	; 0x12
    34b6:	8b 89       	ldd	r24, Y+19	; 0x13
    34b8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	40 e8       	ldi	r20, 0x80	; 128
    34c0:	5f e3       	ldi	r21, 0x3F	; 63
    34c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c6:	88 23       	and	r24, r24
    34c8:	1c f4       	brge	.+6      	; 0x34d0 <LCD_write_cmd_4bit+0x684>
		__ticks = 1;
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	88 8b       	std	Y+16, r24	; 0x10
    34ce:	91 c0       	rjmp	.+290    	; 0x35f2 <LCD_write_cmd_4bit+0x7a6>
	else if (__tmp > 255)
    34d0:	69 89       	ldd	r22, Y+17	; 0x11
    34d2:	7a 89       	ldd	r23, Y+18	; 0x12
    34d4:	8b 89       	ldd	r24, Y+19	; 0x13
    34d6:	9c 89       	ldd	r25, Y+20	; 0x14
    34d8:	20 e0       	ldi	r18, 0x00	; 0
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	4f e7       	ldi	r20, 0x7F	; 127
    34de:	53 e4       	ldi	r21, 0x43	; 67
    34e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34e4:	18 16       	cp	r1, r24
    34e6:	0c f0       	brlt	.+2      	; 0x34ea <LCD_write_cmd_4bit+0x69e>
    34e8:	7b c0       	rjmp	.+246    	; 0x35e0 <LCD_write_cmd_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    34ea:	6d 89       	ldd	r22, Y+21	; 0x15
    34ec:	7e 89       	ldd	r23, Y+22	; 0x16
    34ee:	8f 89       	ldd	r24, Y+23	; 0x17
    34f0:	98 8d       	ldd	r25, Y+24	; 0x18
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	4a e7       	ldi	r20, 0x7A	; 122
    34f8:	54 e4       	ldi	r21, 0x44	; 68
    34fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	8c 87       	std	Y+12, r24	; 0x0c
    3504:	9d 87       	std	Y+13, r25	; 0x0d
    3506:	ae 87       	std	Y+14, r26	; 0x0e
    3508:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350a:	6c 85       	ldd	r22, Y+12	; 0x0c
    350c:	7d 85       	ldd	r23, Y+13	; 0x0d
    350e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3510:	9f 85       	ldd	r25, Y+15	; 0x0f
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	4a ef       	ldi	r20, 0xFA	; 250
    3518:	54 e4       	ldi	r21, 0x44	; 68
    351a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	88 87       	std	Y+8, r24	; 0x08
    3524:	99 87       	std	Y+9, r25	; 0x09
    3526:	aa 87       	std	Y+10, r26	; 0x0a
    3528:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    352a:	68 85       	ldd	r22, Y+8	; 0x08
    352c:	79 85       	ldd	r23, Y+9	; 0x09
    352e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3530:	9b 85       	ldd	r25, Y+11	; 0x0b
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	40 e8       	ldi	r20, 0x80	; 128
    3538:	5f e3       	ldi	r21, 0x3F	; 63
    353a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    353e:	88 23       	and	r24, r24
    3540:	2c f4       	brge	.+10     	; 0x354c <LCD_write_cmd_4bit+0x700>
		__ticks = 1;
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	9f 83       	std	Y+7, r25	; 0x07
    3548:	8e 83       	std	Y+6, r24	; 0x06
    354a:	3f c0       	rjmp	.+126    	; 0x35ca <LCD_write_cmd_4bit+0x77e>
	else if (__tmp > 65535)
    354c:	68 85       	ldd	r22, Y+8	; 0x08
    354e:	79 85       	ldd	r23, Y+9	; 0x09
    3550:	8a 85       	ldd	r24, Y+10	; 0x0a
    3552:	9b 85       	ldd	r25, Y+11	; 0x0b
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	3f ef       	ldi	r19, 0xFF	; 255
    3558:	4f e7       	ldi	r20, 0x7F	; 127
    355a:	57 e4       	ldi	r21, 0x47	; 71
    355c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3560:	18 16       	cp	r1, r24
    3562:	4c f5       	brge	.+82     	; 0x35b6 <LCD_write_cmd_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3564:	6c 85       	ldd	r22, Y+12	; 0x0c
    3566:	7d 85       	ldd	r23, Y+13	; 0x0d
    3568:	8e 85       	ldd	r24, Y+14	; 0x0e
    356a:	9f 85       	ldd	r25, Y+15	; 0x0f
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	40 e2       	ldi	r20, 0x20	; 32
    3572:	51 e4       	ldi	r21, 0x41	; 65
    3574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	bc 01       	movw	r22, r24
    357e:	cd 01       	movw	r24, r26
    3580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	9f 83       	std	Y+7, r25	; 0x07
    358a:	8e 83       	std	Y+6, r24	; 0x06
    358c:	0f c0       	rjmp	.+30     	; 0x35ac <LCD_write_cmd_4bit+0x760>
    358e:	88 ec       	ldi	r24, 0xC8	; 200
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	9d 83       	std	Y+5, r25	; 0x05
    3594:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3596:	8c 81       	ldd	r24, Y+4	; 0x04
    3598:	9d 81       	ldd	r25, Y+5	; 0x05
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <LCD_write_cmd_4bit+0x74e>
    359e:	9d 83       	std	Y+5, r25	; 0x05
    35a0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a2:	8e 81       	ldd	r24, Y+6	; 0x06
    35a4:	9f 81       	ldd	r25, Y+7	; 0x07
    35a6:	01 97       	sbiw	r24, 0x01	; 1
    35a8:	9f 83       	std	Y+7, r25	; 0x07
    35aa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ac:	8e 81       	ldd	r24, Y+6	; 0x06
    35ae:	9f 81       	ldd	r25, Y+7	; 0x07
    35b0:	00 97       	sbiw	r24, 0x00	; 0
    35b2:	69 f7       	brne	.-38     	; 0x358e <LCD_write_cmd_4bit+0x742>
    35b4:	24 c0       	rjmp	.+72     	; 0x35fe <LCD_write_cmd_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b6:	68 85       	ldd	r22, Y+8	; 0x08
    35b8:	79 85       	ldd	r23, Y+9	; 0x09
    35ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    35bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    35be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	9f 83       	std	Y+7, r25	; 0x07
    35c8:	8e 83       	std	Y+6, r24	; 0x06
    35ca:	8e 81       	ldd	r24, Y+6	; 0x06
    35cc:	9f 81       	ldd	r25, Y+7	; 0x07
    35ce:	9b 83       	std	Y+3, r25	; 0x03
    35d0:	8a 83       	std	Y+2, r24	; 0x02
    35d2:	8a 81       	ldd	r24, Y+2	; 0x02
    35d4:	9b 81       	ldd	r25, Y+3	; 0x03
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	f1 f7       	brne	.-4      	; 0x35d6 <LCD_write_cmd_4bit+0x78a>
    35da:	9b 83       	std	Y+3, r25	; 0x03
    35dc:	8a 83       	std	Y+2, r24	; 0x02
    35de:	0f c0       	rjmp	.+30     	; 0x35fe <LCD_write_cmd_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    35e0:	69 89       	ldd	r22, Y+17	; 0x11
    35e2:	7a 89       	ldd	r23, Y+18	; 0x12
    35e4:	8b 89       	ldd	r24, Y+19	; 0x13
    35e6:	9c 89       	ldd	r25, Y+20	; 0x14
    35e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	88 8b       	std	Y+16, r24	; 0x10
    35f2:	88 89       	ldd	r24, Y+16	; 0x10
    35f4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	8a 95       	dec	r24
    35fa:	f1 f7       	brne	.-4      	; 0x35f8 <LCD_write_cmd_4bit+0x7ac>
    35fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    35fe:	fe 01       	movw	r30, r28
    3600:	ef 59       	subi	r30, 0x9F	; 159
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	84 e0       	ldi	r24, 0x04	; 4
    3606:	80 83       	st	Z, r24
    3608:	27 c0       	rjmp	.+78     	; 0x3658 <LCD_write_cmd_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
    360a:	fe 01       	movw	r30, r28
    360c:	ed 59       	subi	r30, 0x9D	; 157
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	80 81       	ld	r24, Z
    3612:	28 2f       	mov	r18, r24
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	fe 01       	movw	r30, r28
    3618:	ef 59       	subi	r30, 0x9F	; 159
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	80 81       	ld	r24, Z
    361e:	88 2f       	mov	r24, r24
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	04 97       	sbiw	r24, 0x04	; 4
    3624:	f9 01       	movw	r30, r18
    3626:	02 c0       	rjmp	.+4      	; 0x362c <LCD_write_cmd_4bit+0x7e0>
    3628:	f5 95       	asr	r31
    362a:	e7 95       	ror	r30
    362c:	8a 95       	dec	r24
    362e:	e2 f7       	brpl	.-8      	; 0x3628 <LCD_write_cmd_4bit+0x7dc>
    3630:	cf 01       	movw	r24, r30
    3632:	98 2f       	mov	r25, r24
    3634:	91 70       	andi	r25, 0x01	; 1
    3636:	fe 01       	movw	r30, r28
    3638:	ef 59       	subi	r30, 0x9F	; 159
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	82 e0       	ldi	r24, 0x02	; 2
    363e:	60 81       	ld	r22, Z
    3640:	49 2f       	mov	r20, r25
    3642:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    3646:	de 01       	movw	r26, r28
    3648:	af 59       	subi	r26, 0x9F	; 159
    364a:	bf 4f       	sbci	r27, 0xFF	; 255
    364c:	fe 01       	movw	r30, r28
    364e:	ef 59       	subi	r30, 0x9F	; 159
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	80 81       	ld	r24, Z
    3654:	8f 5f       	subi	r24, 0xFF	; 255
    3656:	8c 93       	st	X, r24
    3658:	fe 01       	movw	r30, r28
    365a:	ef 59       	subi	r30, 0x9F	; 159
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	80 81       	ld	r24, Z
    3660:	88 30       	cpi	r24, 0x08	; 8
    3662:	98 f2       	brcs	.-90     	; 0x360a <LCD_write_cmd_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3664:	82 e0       	ldi	r24, 0x02	; 2
    3666:	60 e0       	ldi	r22, 0x00	; 0
    3668:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
}
    366c:	cd 59       	subi	r28, 0x9D	; 157
    366e:	df 4f       	sbci	r29, 0xFF	; 255
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	de bf       	out	0x3e, r29	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	cd bf       	out	0x3d, r28	; 61
    367a:	cf 91       	pop	r28
    367c:	df 91       	pop	r29
    367e:	1f 91       	pop	r17
    3680:	0f 91       	pop	r16
    3682:	08 95       	ret

00003684 <LCD_function_set_4bit>:

void LCD_function_set_4bit(void ){
    3684:	0f 93       	push	r16
    3686:	1f 93       	push	r17
    3688:	df 93       	push	r29
    368a:	cf 93       	push	r28
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    3690:	cb 5a       	subi	r28, 0xAB	; 171
    3692:	d0 40       	sbci	r29, 0x00	; 0
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs for the function.
	 *
	 *	No return from the function.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    369e:	82 e0       	ldi	r24, 0x02	; 2
    36a0:	62 e0       	ldi	r22, 0x02	; 2
    36a2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    36a6:	82 e0       	ldi	r24, 0x02	; 2
    36a8:	61 e0       	ldi	r22, 0x01	; 1
    36aa:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
    36ae:	fe 01       	movw	r30, r28
    36b0:	eb 55       	subi	r30, 0x5B	; 91
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	a0 e8       	ldi	r26, 0x80	; 128
    36ba:	bf e3       	ldi	r27, 0x3F	; 63
    36bc:	80 83       	st	Z, r24
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	a2 83       	std	Z+2, r26	; 0x02
    36c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    36c4:	8e 01       	movw	r16, r28
    36c6:	0f 55       	subi	r16, 0x5F	; 95
    36c8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ca:	fe 01       	movw	r30, r28
    36cc:	eb 55       	subi	r30, 0x5B	; 91
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	60 81       	ld	r22, Z
    36d2:	71 81       	ldd	r23, Z+1	; 0x01
    36d4:	82 81       	ldd	r24, Z+2	; 0x02
    36d6:	93 81       	ldd	r25, Z+3	; 0x03
    36d8:	2b ea       	ldi	r18, 0xAB	; 171
    36da:	3a ea       	ldi	r19, 0xAA	; 170
    36dc:	4a e2       	ldi	r20, 0x2A	; 42
    36de:	50 e4       	ldi	r21, 0x40	; 64
    36e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	f8 01       	movw	r30, r16
    36ea:	80 83       	st	Z, r24
    36ec:	91 83       	std	Z+1, r25	; 0x01
    36ee:	a2 83       	std	Z+2, r26	; 0x02
    36f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36f2:	fe 01       	movw	r30, r28
    36f4:	ef 55       	subi	r30, 0x5F	; 95
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	60 81       	ld	r22, Z
    36fa:	71 81       	ldd	r23, Z+1	; 0x01
    36fc:	82 81       	ldd	r24, Z+2	; 0x02
    36fe:	93 81       	ldd	r25, Z+3	; 0x03
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e8       	ldi	r20, 0x80	; 128
    3706:	5f e3       	ldi	r21, 0x3F	; 63
    3708:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    370c:	88 23       	and	r24, r24
    370e:	34 f4       	brge	.+12     	; 0x371c <LCD_function_set_4bit+0x98>
		__ticks = 1;
    3710:	fe 01       	movw	r30, r28
    3712:	e0 56       	subi	r30, 0x60	; 96
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	80 83       	st	Z, r24
    371a:	e0 c0       	rjmp	.+448    	; 0x38dc <LCD_function_set_4bit+0x258>
	else if (__tmp > 255)
    371c:	fe 01       	movw	r30, r28
    371e:	ef 55       	subi	r30, 0x5F	; 95
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	60 81       	ld	r22, Z
    3724:	71 81       	ldd	r23, Z+1	; 0x01
    3726:	82 81       	ldd	r24, Z+2	; 0x02
    3728:	93 81       	ldd	r25, Z+3	; 0x03
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	4f e7       	ldi	r20, 0x7F	; 127
    3730:	53 e4       	ldi	r21, 0x43	; 67
    3732:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3736:	18 16       	cp	r1, r24
    3738:	0c f0       	brlt	.+2      	; 0x373c <LCD_function_set_4bit+0xb8>
    373a:	c0 c0       	rjmp	.+384    	; 0x38bc <LCD_function_set_4bit+0x238>
	{
		_delay_ms(__us / 1000.0);
    373c:	fe 01       	movw	r30, r28
    373e:	eb 55       	subi	r30, 0x5B	; 91
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	60 81       	ld	r22, Z
    3744:	71 81       	ldd	r23, Z+1	; 0x01
    3746:	82 81       	ldd	r24, Z+2	; 0x02
    3748:	93 81       	ldd	r25, Z+3	; 0x03
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	4a e7       	ldi	r20, 0x7A	; 122
    3750:	54 e4       	ldi	r21, 0x44	; 68
    3752:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	fe 01       	movw	r30, r28
    375c:	e4 56       	subi	r30, 0x64	; 100
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	80 83       	st	Z, r24
    3762:	91 83       	std	Z+1, r25	; 0x01
    3764:	a2 83       	std	Z+2, r26	; 0x02
    3766:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3768:	8e 01       	movw	r16, r28
    376a:	08 56       	subi	r16, 0x68	; 104
    376c:	1f 4f       	sbci	r17, 0xFF	; 255
    376e:	fe 01       	movw	r30, r28
    3770:	e4 56       	subi	r30, 0x64	; 100
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	60 81       	ld	r22, Z
    3776:	71 81       	ldd	r23, Z+1	; 0x01
    3778:	82 81       	ldd	r24, Z+2	; 0x02
    377a:	93 81       	ldd	r25, Z+3	; 0x03
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	4a ef       	ldi	r20, 0xFA	; 250
    3782:	54 e4       	ldi	r21, 0x44	; 68
    3784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	f8 01       	movw	r30, r16
    378e:	80 83       	st	Z, r24
    3790:	91 83       	std	Z+1, r25	; 0x01
    3792:	a2 83       	std	Z+2, r26	; 0x02
    3794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3796:	fe 01       	movw	r30, r28
    3798:	e8 56       	subi	r30, 0x68	; 104
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	60 81       	ld	r22, Z
    379e:	71 81       	ldd	r23, Z+1	; 0x01
    37a0:	82 81       	ldd	r24, Z+2	; 0x02
    37a2:	93 81       	ldd	r25, Z+3	; 0x03
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	40 e8       	ldi	r20, 0x80	; 128
    37aa:	5f e3       	ldi	r21, 0x3F	; 63
    37ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37b0:	88 23       	and	r24, r24
    37b2:	44 f4       	brge	.+16     	; 0x37c4 <LCD_function_set_4bit+0x140>
		__ticks = 1;
    37b4:	fe 01       	movw	r30, r28
    37b6:	ea 56       	subi	r30, 0x6A	; 106
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	91 83       	std	Z+1, r25	; 0x01
    37c0:	80 83       	st	Z, r24
    37c2:	64 c0       	rjmp	.+200    	; 0x388c <LCD_function_set_4bit+0x208>
	else if (__tmp > 65535)
    37c4:	fe 01       	movw	r30, r28
    37c6:	e8 56       	subi	r30, 0x68	; 104
    37c8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ca:	60 81       	ld	r22, Z
    37cc:	71 81       	ldd	r23, Z+1	; 0x01
    37ce:	82 81       	ldd	r24, Z+2	; 0x02
    37d0:	93 81       	ldd	r25, Z+3	; 0x03
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	3f ef       	ldi	r19, 0xFF	; 255
    37d6:	4f e7       	ldi	r20, 0x7F	; 127
    37d8:	57 e4       	ldi	r21, 0x47	; 71
    37da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37de:	18 16       	cp	r1, r24
    37e0:	0c f0       	brlt	.+2      	; 0x37e4 <LCD_function_set_4bit+0x160>
    37e2:	43 c0       	rjmp	.+134    	; 0x386a <LCD_function_set_4bit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e4:	fe 01       	movw	r30, r28
    37e6:	e4 56       	subi	r30, 0x64	; 100
    37e8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ea:	60 81       	ld	r22, Z
    37ec:	71 81       	ldd	r23, Z+1	; 0x01
    37ee:	82 81       	ldd	r24, Z+2	; 0x02
    37f0:	93 81       	ldd	r25, Z+3	; 0x03
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	40 e2       	ldi	r20, 0x20	; 32
    37f8:	51 e4       	ldi	r21, 0x41	; 65
    37fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	8e 01       	movw	r16, r28
    3804:	0a 56       	subi	r16, 0x6A	; 106
    3806:	1f 4f       	sbci	r17, 0xFF	; 255
    3808:	bc 01       	movw	r22, r24
    380a:	cd 01       	movw	r24, r26
    380c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	f8 01       	movw	r30, r16
    3816:	91 83       	std	Z+1, r25	; 0x01
    3818:	80 83       	st	Z, r24
    381a:	1f c0       	rjmp	.+62     	; 0x385a <LCD_function_set_4bit+0x1d6>
    381c:	fe 01       	movw	r30, r28
    381e:	ec 56       	subi	r30, 0x6C	; 108
    3820:	ff 4f       	sbci	r31, 0xFF	; 255
    3822:	88 ec       	ldi	r24, 0xC8	; 200
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	91 83       	std	Z+1, r25	; 0x01
    3828:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    382a:	fe 01       	movw	r30, r28
    382c:	ec 56       	subi	r30, 0x6C	; 108
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	80 81       	ld	r24, Z
    3832:	91 81       	ldd	r25, Z+1	; 0x01
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	f1 f7       	brne	.-4      	; 0x3834 <LCD_function_set_4bit+0x1b0>
    3838:	fe 01       	movw	r30, r28
    383a:	ec 56       	subi	r30, 0x6C	; 108
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	91 83       	std	Z+1, r25	; 0x01
    3840:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3842:	de 01       	movw	r26, r28
    3844:	aa 56       	subi	r26, 0x6A	; 106
    3846:	bf 4f       	sbci	r27, 0xFF	; 255
    3848:	fe 01       	movw	r30, r28
    384a:	ea 56       	subi	r30, 0x6A	; 106
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	80 81       	ld	r24, Z
    3850:	91 81       	ldd	r25, Z+1	; 0x01
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	11 96       	adiw	r26, 0x01	; 1
    3856:	9c 93       	st	X, r25
    3858:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    385a:	fe 01       	movw	r30, r28
    385c:	ea 56       	subi	r30, 0x6A	; 106
    385e:	ff 4f       	sbci	r31, 0xFF	; 255
    3860:	80 81       	ld	r24, Z
    3862:	91 81       	ldd	r25, Z+1	; 0x01
    3864:	00 97       	sbiw	r24, 0x00	; 0
    3866:	d1 f6       	brne	.-76     	; 0x381c <LCD_function_set_4bit+0x198>
    3868:	4b c0       	rjmp	.+150    	; 0x3900 <LCD_function_set_4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386a:	8e 01       	movw	r16, r28
    386c:	0a 56       	subi	r16, 0x6A	; 106
    386e:	1f 4f       	sbci	r17, 0xFF	; 255
    3870:	fe 01       	movw	r30, r28
    3872:	e8 56       	subi	r30, 0x68	; 104
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	60 81       	ld	r22, Z
    3878:	71 81       	ldd	r23, Z+1	; 0x01
    387a:	82 81       	ldd	r24, Z+2	; 0x02
    387c:	93 81       	ldd	r25, Z+3	; 0x03
    387e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	f8 01       	movw	r30, r16
    3888:	91 83       	std	Z+1, r25	; 0x01
    388a:	80 83       	st	Z, r24
    388c:	de 01       	movw	r26, r28
    388e:	ae 56       	subi	r26, 0x6E	; 110
    3890:	bf 4f       	sbci	r27, 0xFF	; 255
    3892:	fe 01       	movw	r30, r28
    3894:	ea 56       	subi	r30, 0x6A	; 106
    3896:	ff 4f       	sbci	r31, 0xFF	; 255
    3898:	80 81       	ld	r24, Z
    389a:	91 81       	ldd	r25, Z+1	; 0x01
    389c:	11 96       	adiw	r26, 0x01	; 1
    389e:	9c 93       	st	X, r25
    38a0:	8e 93       	st	-X, r24
    38a2:	fe 01       	movw	r30, r28
    38a4:	ee 56       	subi	r30, 0x6E	; 110
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	80 81       	ld	r24, Z
    38aa:	91 81       	ldd	r25, Z+1	; 0x01
    38ac:	01 97       	sbiw	r24, 0x01	; 1
    38ae:	f1 f7       	brne	.-4      	; 0x38ac <LCD_function_set_4bit+0x228>
    38b0:	fe 01       	movw	r30, r28
    38b2:	ee 56       	subi	r30, 0x6E	; 110
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	91 83       	std	Z+1, r25	; 0x01
    38b8:	80 83       	st	Z, r24
    38ba:	22 c0       	rjmp	.+68     	; 0x3900 <LCD_function_set_4bit+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38bc:	8e 01       	movw	r16, r28
    38be:	00 56       	subi	r16, 0x60	; 96
    38c0:	1f 4f       	sbci	r17, 0xFF	; 255
    38c2:	fe 01       	movw	r30, r28
    38c4:	ef 55       	subi	r30, 0x5F	; 95
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	60 81       	ld	r22, Z
    38ca:	71 81       	ldd	r23, Z+1	; 0x01
    38cc:	82 81       	ldd	r24, Z+2	; 0x02
    38ce:	93 81       	ldd	r25, Z+3	; 0x03
    38d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	f8 01       	movw	r30, r16
    38da:	80 83       	st	Z, r24
    38dc:	de 01       	movw	r26, r28
    38de:	af 56       	subi	r26, 0x6F	; 111
    38e0:	bf 4f       	sbci	r27, 0xFF	; 255
    38e2:	fe 01       	movw	r30, r28
    38e4:	e0 56       	subi	r30, 0x60	; 96
    38e6:	ff 4f       	sbci	r31, 0xFF	; 255
    38e8:	80 81       	ld	r24, Z
    38ea:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38ec:	fe 01       	movw	r30, r28
    38ee:	ef 56       	subi	r30, 0x6F	; 111
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	80 81       	ld	r24, Z
    38f4:	8a 95       	dec	r24
    38f6:	f1 f7       	brne	.-4      	; 0x38f4 <LCD_function_set_4bit+0x270>
    38f8:	fe 01       	movw	r30, r28
    38fa:	ef 56       	subi	r30, 0x6F	; 111
    38fc:	ff 4f       	sbci	r31, 0xFF	; 255
    38fe:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3900:	82 e0       	ldi	r24, 0x02	; 2
    3902:	60 e0       	ldi	r22, 0x00	; 0
    3904:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    3908:	fe 01       	movw	r30, r28
    390a:	e3 57       	subi	r30, 0x73	; 115
    390c:	ff 4f       	sbci	r31, 0xFF	; 255
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	a0 e8       	ldi	r26, 0x80	; 128
    3914:	bf e3       	ldi	r27, 0x3F	; 63
    3916:	80 83       	st	Z, r24
    3918:	91 83       	std	Z+1, r25	; 0x01
    391a:	a2 83       	std	Z+2, r26	; 0x02
    391c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    391e:	8e 01       	movw	r16, r28
    3920:	07 57       	subi	r16, 0x77	; 119
    3922:	1f 4f       	sbci	r17, 0xFF	; 255
    3924:	fe 01       	movw	r30, r28
    3926:	e3 57       	subi	r30, 0x73	; 115
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	60 81       	ld	r22, Z
    392c:	71 81       	ldd	r23, Z+1	; 0x01
    392e:	82 81       	ldd	r24, Z+2	; 0x02
    3930:	93 81       	ldd	r25, Z+3	; 0x03
    3932:	2b ea       	ldi	r18, 0xAB	; 171
    3934:	3a ea       	ldi	r19, 0xAA	; 170
    3936:	4a e2       	ldi	r20, 0x2A	; 42
    3938:	50 e4       	ldi	r21, 0x40	; 64
    393a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	f8 01       	movw	r30, r16
    3944:	80 83       	st	Z, r24
    3946:	91 83       	std	Z+1, r25	; 0x01
    3948:	a2 83       	std	Z+2, r26	; 0x02
    394a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    394c:	fe 01       	movw	r30, r28
    394e:	e7 57       	subi	r30, 0x77	; 119
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	60 81       	ld	r22, Z
    3954:	71 81       	ldd	r23, Z+1	; 0x01
    3956:	82 81       	ldd	r24, Z+2	; 0x02
    3958:	93 81       	ldd	r25, Z+3	; 0x03
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	40 e8       	ldi	r20, 0x80	; 128
    3960:	5f e3       	ldi	r21, 0x3F	; 63
    3962:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3966:	88 23       	and	r24, r24
    3968:	34 f4       	brge	.+12     	; 0x3976 <LCD_function_set_4bit+0x2f2>
		__ticks = 1;
    396a:	fe 01       	movw	r30, r28
    396c:	e8 57       	subi	r30, 0x78	; 120
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	80 83       	st	Z, r24
    3974:	e0 c0       	rjmp	.+448    	; 0x3b36 <LCD_function_set_4bit+0x4b2>
	else if (__tmp > 255)
    3976:	fe 01       	movw	r30, r28
    3978:	e7 57       	subi	r30, 0x77	; 119
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	60 81       	ld	r22, Z
    397e:	71 81       	ldd	r23, Z+1	; 0x01
    3980:	82 81       	ldd	r24, Z+2	; 0x02
    3982:	93 81       	ldd	r25, Z+3	; 0x03
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	4f e7       	ldi	r20, 0x7F	; 127
    398a:	53 e4       	ldi	r21, 0x43	; 67
    398c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3990:	18 16       	cp	r1, r24
    3992:	0c f0       	brlt	.+2      	; 0x3996 <LCD_function_set_4bit+0x312>
    3994:	c0 c0       	rjmp	.+384    	; 0x3b16 <LCD_function_set_4bit+0x492>
	{
		_delay_ms(__us / 1000.0);
    3996:	fe 01       	movw	r30, r28
    3998:	e3 57       	subi	r30, 0x73	; 115
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	60 81       	ld	r22, Z
    399e:	71 81       	ldd	r23, Z+1	; 0x01
    39a0:	82 81       	ldd	r24, Z+2	; 0x02
    39a2:	93 81       	ldd	r25, Z+3	; 0x03
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	4a e7       	ldi	r20, 0x7A	; 122
    39aa:	54 e4       	ldi	r21, 0x44	; 68
    39ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	fe 01       	movw	r30, r28
    39b6:	ec 57       	subi	r30, 0x7C	; 124
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	80 83       	st	Z, r24
    39bc:	91 83       	std	Z+1, r25	; 0x01
    39be:	a2 83       	std	Z+2, r26	; 0x02
    39c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c2:	8e 01       	movw	r16, r28
    39c4:	00 58       	subi	r16, 0x80	; 128
    39c6:	1f 4f       	sbci	r17, 0xFF	; 255
    39c8:	fe 01       	movw	r30, r28
    39ca:	ec 57       	subi	r30, 0x7C	; 124
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	60 81       	ld	r22, Z
    39d0:	71 81       	ldd	r23, Z+1	; 0x01
    39d2:	82 81       	ldd	r24, Z+2	; 0x02
    39d4:	93 81       	ldd	r25, Z+3	; 0x03
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	4a ef       	ldi	r20, 0xFA	; 250
    39dc:	54 e4       	ldi	r21, 0x44	; 68
    39de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	f8 01       	movw	r30, r16
    39e8:	80 83       	st	Z, r24
    39ea:	91 83       	std	Z+1, r25	; 0x01
    39ec:	a2 83       	std	Z+2, r26	; 0x02
    39ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39f0:	fe 01       	movw	r30, r28
    39f2:	e0 58       	subi	r30, 0x80	; 128
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	60 81       	ld	r22, Z
    39f8:	71 81       	ldd	r23, Z+1	; 0x01
    39fa:	82 81       	ldd	r24, Z+2	; 0x02
    39fc:	93 81       	ldd	r25, Z+3	; 0x03
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e8       	ldi	r20, 0x80	; 128
    3a04:	5f e3       	ldi	r21, 0x3F	; 63
    3a06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a0a:	88 23       	and	r24, r24
    3a0c:	44 f4       	brge	.+16     	; 0x3a1e <LCD_function_set_4bit+0x39a>
		__ticks = 1;
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e2 58       	subi	r30, 0x82	; 130
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	91 83       	std	Z+1, r25	; 0x01
    3a1a:	80 83       	st	Z, r24
    3a1c:	64 c0       	rjmp	.+200    	; 0x3ae6 <LCD_function_set_4bit+0x462>
	else if (__tmp > 65535)
    3a1e:	fe 01       	movw	r30, r28
    3a20:	e0 58       	subi	r30, 0x80	; 128
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	60 81       	ld	r22, Z
    3a26:	71 81       	ldd	r23, Z+1	; 0x01
    3a28:	82 81       	ldd	r24, Z+2	; 0x02
    3a2a:	93 81       	ldd	r25, Z+3	; 0x03
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	3f ef       	ldi	r19, 0xFF	; 255
    3a30:	4f e7       	ldi	r20, 0x7F	; 127
    3a32:	57 e4       	ldi	r21, 0x47	; 71
    3a34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a38:	18 16       	cp	r1, r24
    3a3a:	0c f0       	brlt	.+2      	; 0x3a3e <LCD_function_set_4bit+0x3ba>
    3a3c:	43 c0       	rjmp	.+134    	; 0x3ac4 <LCD_function_set_4bit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3e:	fe 01       	movw	r30, r28
    3a40:	ec 57       	subi	r30, 0x7C	; 124
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	60 81       	ld	r22, Z
    3a46:	71 81       	ldd	r23, Z+1	; 0x01
    3a48:	82 81       	ldd	r24, Z+2	; 0x02
    3a4a:	93 81       	ldd	r25, Z+3	; 0x03
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	40 e2       	ldi	r20, 0x20	; 32
    3a52:	51 e4       	ldi	r21, 0x41	; 65
    3a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	8e 01       	movw	r16, r28
    3a5e:	02 58       	subi	r16, 0x82	; 130
    3a60:	1f 4f       	sbci	r17, 0xFF	; 255
    3a62:	bc 01       	movw	r22, r24
    3a64:	cd 01       	movw	r24, r26
    3a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	f8 01       	movw	r30, r16
    3a70:	91 83       	std	Z+1, r25	; 0x01
    3a72:	80 83       	st	Z, r24
    3a74:	1f c0       	rjmp	.+62     	; 0x3ab4 <LCD_function_set_4bit+0x430>
    3a76:	fe 01       	movw	r30, r28
    3a78:	e4 58       	subi	r30, 0x84	; 132
    3a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7c:	88 ec       	ldi	r24, 0xC8	; 200
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	91 83       	std	Z+1, r25	; 0x01
    3a82:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a84:	fe 01       	movw	r30, r28
    3a86:	e4 58       	subi	r30, 0x84	; 132
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	80 81       	ld	r24, Z
    3a8c:	91 81       	ldd	r25, Z+1	; 0x01
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <LCD_function_set_4bit+0x40a>
    3a92:	fe 01       	movw	r30, r28
    3a94:	e4 58       	subi	r30, 0x84	; 132
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	91 83       	std	Z+1, r25	; 0x01
    3a9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9c:	de 01       	movw	r26, r28
    3a9e:	a2 58       	subi	r26, 0x82	; 130
    3aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    3aa2:	fe 01       	movw	r30, r28
    3aa4:	e2 58       	subi	r30, 0x82	; 130
    3aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa8:	80 81       	ld	r24, Z
    3aaa:	91 81       	ldd	r25, Z+1	; 0x01
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	11 96       	adiw	r26, 0x01	; 1
    3ab0:	9c 93       	st	X, r25
    3ab2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	e2 58       	subi	r30, 0x82	; 130
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	80 81       	ld	r24, Z
    3abc:	91 81       	ldd	r25, Z+1	; 0x01
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	d1 f6       	brne	.-76     	; 0x3a76 <LCD_function_set_4bit+0x3f2>
    3ac2:	4b c0       	rjmp	.+150    	; 0x3b5a <LCD_function_set_4bit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac4:	8e 01       	movw	r16, r28
    3ac6:	02 58       	subi	r16, 0x82	; 130
    3ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aca:	fe 01       	movw	r30, r28
    3acc:	e0 58       	subi	r30, 0x80	; 128
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	60 81       	ld	r22, Z
    3ad2:	71 81       	ldd	r23, Z+1	; 0x01
    3ad4:	82 81       	ldd	r24, Z+2	; 0x02
    3ad6:	93 81       	ldd	r25, Z+3	; 0x03
    3ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	f8 01       	movw	r30, r16
    3ae2:	91 83       	std	Z+1, r25	; 0x01
    3ae4:	80 83       	st	Z, r24
    3ae6:	de 01       	movw	r26, r28
    3ae8:	a6 58       	subi	r26, 0x86	; 134
    3aea:	bf 4f       	sbci	r27, 0xFF	; 255
    3aec:	fe 01       	movw	r30, r28
    3aee:	e2 58       	subi	r30, 0x82	; 130
    3af0:	ff 4f       	sbci	r31, 0xFF	; 255
    3af2:	80 81       	ld	r24, Z
    3af4:	91 81       	ldd	r25, Z+1	; 0x01
    3af6:	11 96       	adiw	r26, 0x01	; 1
    3af8:	9c 93       	st	X, r25
    3afa:	8e 93       	st	-X, r24
    3afc:	fe 01       	movw	r30, r28
    3afe:	e6 58       	subi	r30, 0x86	; 134
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 81       	ld	r24, Z
    3b04:	91 81       	ldd	r25, Z+1	; 0x01
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	f1 f7       	brne	.-4      	; 0x3b06 <LCD_function_set_4bit+0x482>
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	e6 58       	subi	r30, 0x86	; 134
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	91 83       	std	Z+1, r25	; 0x01
    3b12:	80 83       	st	Z, r24
    3b14:	22 c0       	rjmp	.+68     	; 0x3b5a <LCD_function_set_4bit+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b16:	8e 01       	movw	r16, r28
    3b18:	08 57       	subi	r16, 0x78	; 120
    3b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	e7 57       	subi	r30, 0x77	; 119
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	60 81       	ld	r22, Z
    3b24:	71 81       	ldd	r23, Z+1	; 0x01
    3b26:	82 81       	ldd	r24, Z+2	; 0x02
    3b28:	93 81       	ldd	r25, Z+3	; 0x03
    3b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	f8 01       	movw	r30, r16
    3b34:	80 83       	st	Z, r24
    3b36:	de 01       	movw	r26, r28
    3b38:	a7 58       	subi	r26, 0x87	; 135
    3b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e8 57       	subi	r30, 0x78	; 120
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	80 81       	ld	r24, Z
    3b44:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b46:	fe 01       	movw	r30, r28
    3b48:	e7 58       	subi	r30, 0x87	; 135
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	80 81       	ld	r24, Z
    3b4e:	8a 95       	dec	r24
    3b50:	f1 f7       	brne	.-4      	; 0x3b4e <LCD_function_set_4bit+0x4ca>
    3b52:	fe 01       	movw	r30, r28
    3b54:	e7 58       	subi	r30, 0x87	; 135
    3b56:	ff 4f       	sbci	r31, 0xFF	; 255
    3b58:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	e5 55       	subi	r30, 0x55	; 85
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	10 82       	st	Z, r1
    3b62:	23 c0       	rjmp	.+70     	; 0x3baa <LCD_function_set_4bit+0x526>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    3b64:	fe 01       	movw	r30, r28
    3b66:	e5 55       	subi	r30, 0x55	; 85
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	80 81       	ld	r24, Z
    3b6c:	48 2f       	mov	r20, r24
    3b6e:	4c 5f       	subi	r20, 0xFC	; 252
    3b70:	fe 01       	movw	r30, r28
    3b72:	e5 55       	subi	r30, 0x55	; 85
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	80 81       	ld	r24, Z
    3b78:	28 2f       	mov	r18, r24
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	82 e0       	ldi	r24, 0x02	; 2
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	02 c0       	rjmp	.+4      	; 0x3b86 <LCD_function_set_4bit+0x502>
    3b82:	95 95       	asr	r25
    3b84:	87 95       	ror	r24
    3b86:	2a 95       	dec	r18
    3b88:	e2 f7       	brpl	.-8      	; 0x3b82 <LCD_function_set_4bit+0x4fe>
    3b8a:	98 2f       	mov	r25, r24
    3b8c:	91 70       	andi	r25, 0x01	; 1
    3b8e:	82 e0       	ldi	r24, 0x02	; 2
    3b90:	64 2f       	mov	r22, r20
    3b92:	49 2f       	mov	r20, r25
    3b94:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    3b98:	de 01       	movw	r26, r28
    3b9a:	a5 55       	subi	r26, 0x55	; 85
    3b9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	e5 55       	subi	r30, 0x55	; 85
    3ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba4:	80 81       	ld	r24, Z
    3ba6:	8f 5f       	subi	r24, 0xFF	; 255
    3ba8:	8c 93       	st	X, r24
    3baa:	fe 01       	movw	r30, r28
    3bac:	e5 55       	subi	r30, 0x55	; 85
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	80 81       	ld	r24, Z
    3bb2:	84 30       	cpi	r24, 0x04	; 4
    3bb4:	b8 f2       	brcs	.-82     	; 0x3b64 <LCD_function_set_4bit+0x4e0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin Low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3bb6:	82 e0       	ldi	r24, 0x02	; 2
    3bb8:	60 e0       	ldi	r22, 0x00	; 0
    3bba:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	eb 58       	subi	r30, 0x8B	; 139
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	a0 e2       	ldi	r26, 0x20	; 32
    3bca:	b1 e4       	ldi	r27, 0x41	; 65
    3bcc:	80 83       	st	Z, r24
    3bce:	91 83       	std	Z+1, r25	; 0x01
    3bd0:	a2 83       	std	Z+2, r26	; 0x02
    3bd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3bd4:	8e 01       	movw	r16, r28
    3bd6:	0f 58       	subi	r16, 0x8F	; 143
    3bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bda:	fe 01       	movw	r30, r28
    3bdc:	eb 58       	subi	r30, 0x8B	; 139
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	60 81       	ld	r22, Z
    3be2:	71 81       	ldd	r23, Z+1	; 0x01
    3be4:	82 81       	ldd	r24, Z+2	; 0x02
    3be6:	93 81       	ldd	r25, Z+3	; 0x03
    3be8:	2b ea       	ldi	r18, 0xAB	; 171
    3bea:	3a ea       	ldi	r19, 0xAA	; 170
    3bec:	4a e2       	ldi	r20, 0x2A	; 42
    3bee:	50 e4       	ldi	r21, 0x40	; 64
    3bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	f8 01       	movw	r30, r16
    3bfa:	80 83       	st	Z, r24
    3bfc:	91 83       	std	Z+1, r25	; 0x01
    3bfe:	a2 83       	std	Z+2, r26	; 0x02
    3c00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c02:	fe 01       	movw	r30, r28
    3c04:	ef 58       	subi	r30, 0x8F	; 143
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	60 81       	ld	r22, Z
    3c0a:	71 81       	ldd	r23, Z+1	; 0x01
    3c0c:	82 81       	ldd	r24, Z+2	; 0x02
    3c0e:	93 81       	ldd	r25, Z+3	; 0x03
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	40 e8       	ldi	r20, 0x80	; 128
    3c16:	5f e3       	ldi	r21, 0x3F	; 63
    3c18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c1c:	88 23       	and	r24, r24
    3c1e:	34 f4       	brge	.+12     	; 0x3c2c <LCD_function_set_4bit+0x5a8>
		__ticks = 1;
    3c20:	fe 01       	movw	r30, r28
    3c22:	e0 59       	subi	r30, 0x90	; 144
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	80 83       	st	Z, r24
    3c2a:	e0 c0       	rjmp	.+448    	; 0x3dec <LCD_function_set_4bit+0x768>
	else if (__tmp > 255)
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	ef 58       	subi	r30, 0x8F	; 143
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	4f e7       	ldi	r20, 0x7F	; 127
    3c40:	53 e4       	ldi	r21, 0x43	; 67
    3c42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c46:	18 16       	cp	r1, r24
    3c48:	0c f0       	brlt	.+2      	; 0x3c4c <LCD_function_set_4bit+0x5c8>
    3c4a:	c0 c0       	rjmp	.+384    	; 0x3dcc <LCD_function_set_4bit+0x748>
	{
		_delay_ms(__us / 1000.0);
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	eb 58       	subi	r30, 0x8B	; 139
    3c50:	ff 4f       	sbci	r31, 0xFF	; 255
    3c52:	60 81       	ld	r22, Z
    3c54:	71 81       	ldd	r23, Z+1	; 0x01
    3c56:	82 81       	ldd	r24, Z+2	; 0x02
    3c58:	93 81       	ldd	r25, Z+3	; 0x03
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	4a e7       	ldi	r20, 0x7A	; 122
    3c60:	54 e4       	ldi	r21, 0x44	; 68
    3c62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	e4 59       	subi	r30, 0x94	; 148
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	80 83       	st	Z, r24
    3c72:	91 83       	std	Z+1, r25	; 0x01
    3c74:	a2 83       	std	Z+2, r26	; 0x02
    3c76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c78:	8e 01       	movw	r16, r28
    3c7a:	08 59       	subi	r16, 0x98	; 152
    3c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c7e:	fe 01       	movw	r30, r28
    3c80:	e4 59       	subi	r30, 0x94	; 148
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	60 81       	ld	r22, Z
    3c86:	71 81       	ldd	r23, Z+1	; 0x01
    3c88:	82 81       	ldd	r24, Z+2	; 0x02
    3c8a:	93 81       	ldd	r25, Z+3	; 0x03
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	4a ef       	ldi	r20, 0xFA	; 250
    3c92:	54 e4       	ldi	r21, 0x44	; 68
    3c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	f8 01       	movw	r30, r16
    3c9e:	80 83       	st	Z, r24
    3ca0:	91 83       	std	Z+1, r25	; 0x01
    3ca2:	a2 83       	std	Z+2, r26	; 0x02
    3ca4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ca6:	fe 01       	movw	r30, r28
    3ca8:	e8 59       	subi	r30, 0x98	; 152
    3caa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cac:	60 81       	ld	r22, Z
    3cae:	71 81       	ldd	r23, Z+1	; 0x01
    3cb0:	82 81       	ldd	r24, Z+2	; 0x02
    3cb2:	93 81       	ldd	r25, Z+3	; 0x03
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	40 e8       	ldi	r20, 0x80	; 128
    3cba:	5f e3       	ldi	r21, 0x3F	; 63
    3cbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cc0:	88 23       	and	r24, r24
    3cc2:	44 f4       	brge	.+16     	; 0x3cd4 <LCD_function_set_4bit+0x650>
		__ticks = 1;
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	ea 59       	subi	r30, 0x9A	; 154
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	91 83       	std	Z+1, r25	; 0x01
    3cd0:	80 83       	st	Z, r24
    3cd2:	64 c0       	rjmp	.+200    	; 0x3d9c <LCD_function_set_4bit+0x718>
	else if (__tmp > 65535)
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e8 59       	subi	r30, 0x98	; 152
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	60 81       	ld	r22, Z
    3cdc:	71 81       	ldd	r23, Z+1	; 0x01
    3cde:	82 81       	ldd	r24, Z+2	; 0x02
    3ce0:	93 81       	ldd	r25, Z+3	; 0x03
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	3f ef       	ldi	r19, 0xFF	; 255
    3ce6:	4f e7       	ldi	r20, 0x7F	; 127
    3ce8:	57 e4       	ldi	r21, 0x47	; 71
    3cea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cee:	18 16       	cp	r1, r24
    3cf0:	0c f0       	brlt	.+2      	; 0x3cf4 <LCD_function_set_4bit+0x670>
    3cf2:	43 c0       	rjmp	.+134    	; 0x3d7a <LCD_function_set_4bit+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	e4 59       	subi	r30, 0x94	; 148
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	60 81       	ld	r22, Z
    3cfc:	71 81       	ldd	r23, Z+1	; 0x01
    3cfe:	82 81       	ldd	r24, Z+2	; 0x02
    3d00:	93 81       	ldd	r25, Z+3	; 0x03
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	40 e2       	ldi	r20, 0x20	; 32
    3d08:	51 e4       	ldi	r21, 0x41	; 65
    3d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d0e:	dc 01       	movw	r26, r24
    3d10:	cb 01       	movw	r24, r22
    3d12:	8e 01       	movw	r16, r28
    3d14:	0a 59       	subi	r16, 0x9A	; 154
    3d16:	1f 4f       	sbci	r17, 0xFF	; 255
    3d18:	bc 01       	movw	r22, r24
    3d1a:	cd 01       	movw	r24, r26
    3d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d20:	dc 01       	movw	r26, r24
    3d22:	cb 01       	movw	r24, r22
    3d24:	f8 01       	movw	r30, r16
    3d26:	91 83       	std	Z+1, r25	; 0x01
    3d28:	80 83       	st	Z, r24
    3d2a:	1f c0       	rjmp	.+62     	; 0x3d6a <LCD_function_set_4bit+0x6e6>
    3d2c:	fe 01       	movw	r30, r28
    3d2e:	ec 59       	subi	r30, 0x9C	; 156
    3d30:	ff 4f       	sbci	r31, 0xFF	; 255
    3d32:	88 ec       	ldi	r24, 0xC8	; 200
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	91 83       	std	Z+1, r25	; 0x01
    3d38:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	ec 59       	subi	r30, 0x9C	; 156
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	80 81       	ld	r24, Z
    3d42:	91 81       	ldd	r25, Z+1	; 0x01
    3d44:	01 97       	sbiw	r24, 0x01	; 1
    3d46:	f1 f7       	brne	.-4      	; 0x3d44 <LCD_function_set_4bit+0x6c0>
    3d48:	fe 01       	movw	r30, r28
    3d4a:	ec 59       	subi	r30, 0x9C	; 156
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	91 83       	std	Z+1, r25	; 0x01
    3d50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d52:	de 01       	movw	r26, r28
    3d54:	aa 59       	subi	r26, 0x9A	; 154
    3d56:	bf 4f       	sbci	r27, 0xFF	; 255
    3d58:	fe 01       	movw	r30, r28
    3d5a:	ea 59       	subi	r30, 0x9A	; 154
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	80 81       	ld	r24, Z
    3d60:	91 81       	ldd	r25, Z+1	; 0x01
    3d62:	01 97       	sbiw	r24, 0x01	; 1
    3d64:	11 96       	adiw	r26, 0x01	; 1
    3d66:	9c 93       	st	X, r25
    3d68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	ea 59       	subi	r30, 0x9A	; 154
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	80 81       	ld	r24, Z
    3d72:	91 81       	ldd	r25, Z+1	; 0x01
    3d74:	00 97       	sbiw	r24, 0x00	; 0
    3d76:	d1 f6       	brne	.-76     	; 0x3d2c <LCD_function_set_4bit+0x6a8>
    3d78:	4b c0       	rjmp	.+150    	; 0x3e10 <LCD_function_set_4bit+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d7a:	8e 01       	movw	r16, r28
    3d7c:	0a 59       	subi	r16, 0x9A	; 154
    3d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d80:	fe 01       	movw	r30, r28
    3d82:	e8 59       	subi	r30, 0x98	; 152
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	60 81       	ld	r22, Z
    3d88:	71 81       	ldd	r23, Z+1	; 0x01
    3d8a:	82 81       	ldd	r24, Z+2	; 0x02
    3d8c:	93 81       	ldd	r25, Z+3	; 0x03
    3d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	f8 01       	movw	r30, r16
    3d98:	91 83       	std	Z+1, r25	; 0x01
    3d9a:	80 83       	st	Z, r24
    3d9c:	de 01       	movw	r26, r28
    3d9e:	ae 59       	subi	r26, 0x9E	; 158
    3da0:	bf 4f       	sbci	r27, 0xFF	; 255
    3da2:	fe 01       	movw	r30, r28
    3da4:	ea 59       	subi	r30, 0x9A	; 154
    3da6:	ff 4f       	sbci	r31, 0xFF	; 255
    3da8:	80 81       	ld	r24, Z
    3daa:	91 81       	ldd	r25, Z+1	; 0x01
    3dac:	11 96       	adiw	r26, 0x01	; 1
    3dae:	9c 93       	st	X, r25
    3db0:	8e 93       	st	-X, r24
    3db2:	fe 01       	movw	r30, r28
    3db4:	ee 59       	subi	r30, 0x9E	; 158
    3db6:	ff 4f       	sbci	r31, 0xFF	; 255
    3db8:	80 81       	ld	r24, Z
    3dba:	91 81       	ldd	r25, Z+1	; 0x01
    3dbc:	01 97       	sbiw	r24, 0x01	; 1
    3dbe:	f1 f7       	brne	.-4      	; 0x3dbc <LCD_function_set_4bit+0x738>
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	ee 59       	subi	r30, 0x9E	; 158
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	91 83       	std	Z+1, r25	; 0x01
    3dc8:	80 83       	st	Z, r24
    3dca:	22 c0       	rjmp	.+68     	; 0x3e10 <LCD_function_set_4bit+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3dcc:	8e 01       	movw	r16, r28
    3dce:	00 59       	subi	r16, 0x90	; 144
    3dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	ef 58       	subi	r30, 0x8F	; 143
    3dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd8:	60 81       	ld	r22, Z
    3dda:	71 81       	ldd	r23, Z+1	; 0x01
    3ddc:	82 81       	ldd	r24, Z+2	; 0x02
    3dde:	93 81       	ldd	r25, Z+3	; 0x03
    3de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	f8 01       	movw	r30, r16
    3dea:	80 83       	st	Z, r24
    3dec:	de 01       	movw	r26, r28
    3dee:	af 59       	subi	r26, 0x9F	; 159
    3df0:	bf 4f       	sbci	r27, 0xFF	; 255
    3df2:	fe 01       	movw	r30, r28
    3df4:	e0 59       	subi	r30, 0x90	; 144
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	ef 59       	subi	r30, 0x9F	; 159
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	80 81       	ld	r24, Z
    3e04:	8a 95       	dec	r24
    3e06:	f1 f7       	brne	.-4      	; 0x3e04 <LCD_function_set_4bit+0x780>
    3e08:	fe 01       	movw	r30, r28
    3e0a:	ef 59       	subi	r30, 0x9F	; 159
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	80 83       	st	Z, r24
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3e10:	82 e0       	ldi	r24, 0x02	; 2
    3e12:	60 e0       	ldi	r22, 0x00	; 0
    3e14:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    3e18:	fe 01       	movw	r30, r28
    3e1a:	e3 5a       	subi	r30, 0xA3	; 163
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	a0 e8       	ldi	r26, 0x80	; 128
    3e24:	bf e3       	ldi	r27, 0x3F	; 63
    3e26:	80 83       	st	Z, r24
    3e28:	91 83       	std	Z+1, r25	; 0x01
    3e2a:	a2 83       	std	Z+2, r26	; 0x02
    3e2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e2e:	8e 01       	movw	r16, r28
    3e30:	07 5a       	subi	r16, 0xA7	; 167
    3e32:	1f 4f       	sbci	r17, 0xFF	; 255
    3e34:	fe 01       	movw	r30, r28
    3e36:	e3 5a       	subi	r30, 0xA3	; 163
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	60 81       	ld	r22, Z
    3e3c:	71 81       	ldd	r23, Z+1	; 0x01
    3e3e:	82 81       	ldd	r24, Z+2	; 0x02
    3e40:	93 81       	ldd	r25, Z+3	; 0x03
    3e42:	2b ea       	ldi	r18, 0xAB	; 171
    3e44:	3a ea       	ldi	r19, 0xAA	; 170
    3e46:	4a e2       	ldi	r20, 0x2A	; 42
    3e48:	50 e4       	ldi	r21, 0x40	; 64
    3e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
    3e52:	f8 01       	movw	r30, r16
    3e54:	80 83       	st	Z, r24
    3e56:	91 83       	std	Z+1, r25	; 0x01
    3e58:	a2 83       	std	Z+2, r26	; 0x02
    3e5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	e7 5a       	subi	r30, 0xA7	; 167
    3e60:	ff 4f       	sbci	r31, 0xFF	; 255
    3e62:	60 81       	ld	r22, Z
    3e64:	71 81       	ldd	r23, Z+1	; 0x01
    3e66:	82 81       	ldd	r24, Z+2	; 0x02
    3e68:	93 81       	ldd	r25, Z+3	; 0x03
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	40 e8       	ldi	r20, 0x80	; 128
    3e70:	5f e3       	ldi	r21, 0x3F	; 63
    3e72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e76:	88 23       	and	r24, r24
    3e78:	34 f4       	brge	.+12     	; 0x3e86 <LCD_function_set_4bit+0x802>
		__ticks = 1;
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	e8 5a       	subi	r30, 0xA8	; 168
    3e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	80 83       	st	Z, r24
    3e84:	e0 c0       	rjmp	.+448    	; 0x4046 <LCD_function_set_4bit+0x9c2>
	else if (__tmp > 255)
    3e86:	fe 01       	movw	r30, r28
    3e88:	e7 5a       	subi	r30, 0xA7	; 167
    3e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8c:	60 81       	ld	r22, Z
    3e8e:	71 81       	ldd	r23, Z+1	; 0x01
    3e90:	82 81       	ldd	r24, Z+2	; 0x02
    3e92:	93 81       	ldd	r25, Z+3	; 0x03
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	4f e7       	ldi	r20, 0x7F	; 127
    3e9a:	53 e4       	ldi	r21, 0x43	; 67
    3e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ea0:	18 16       	cp	r1, r24
    3ea2:	0c f0       	brlt	.+2      	; 0x3ea6 <LCD_function_set_4bit+0x822>
    3ea4:	c0 c0       	rjmp	.+384    	; 0x4026 <LCD_function_set_4bit+0x9a2>
	{
		_delay_ms(__us / 1000.0);
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	e3 5a       	subi	r30, 0xA3	; 163
    3eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3eac:	60 81       	ld	r22, Z
    3eae:	71 81       	ldd	r23, Z+1	; 0x01
    3eb0:	82 81       	ldd	r24, Z+2	; 0x02
    3eb2:	93 81       	ldd	r25, Z+3	; 0x03
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	4a e7       	ldi	r20, 0x7A	; 122
    3eba:	54 e4       	ldi	r21, 0x44	; 68
    3ebc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	ec 5a       	subi	r30, 0xAC	; 172
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	80 83       	st	Z, r24
    3ecc:	91 83       	std	Z+1, r25	; 0x01
    3ece:	a2 83       	std	Z+2, r26	; 0x02
    3ed0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ed2:	8e 01       	movw	r16, r28
    3ed4:	00 5b       	subi	r16, 0xB0	; 176
    3ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed8:	fe 01       	movw	r30, r28
    3eda:	ec 5a       	subi	r30, 0xAC	; 172
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	60 81       	ld	r22, Z
    3ee0:	71 81       	ldd	r23, Z+1	; 0x01
    3ee2:	82 81       	ldd	r24, Z+2	; 0x02
    3ee4:	93 81       	ldd	r25, Z+3	; 0x03
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	4a ef       	ldi	r20, 0xFA	; 250
    3eec:	54 e4       	ldi	r21, 0x44	; 68
    3eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	f8 01       	movw	r30, r16
    3ef8:	80 83       	st	Z, r24
    3efa:	91 83       	std	Z+1, r25	; 0x01
    3efc:	a2 83       	std	Z+2, r26	; 0x02
    3efe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f00:	fe 01       	movw	r30, r28
    3f02:	e0 5b       	subi	r30, 0xB0	; 176
    3f04:	ff 4f       	sbci	r31, 0xFF	; 255
    3f06:	60 81       	ld	r22, Z
    3f08:	71 81       	ldd	r23, Z+1	; 0x01
    3f0a:	82 81       	ldd	r24, Z+2	; 0x02
    3f0c:	93 81       	ldd	r25, Z+3	; 0x03
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	40 e8       	ldi	r20, 0x80	; 128
    3f14:	5f e3       	ldi	r21, 0x3F	; 63
    3f16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f1a:	88 23       	and	r24, r24
    3f1c:	44 f4       	brge	.+16     	; 0x3f2e <LCD_function_set_4bit+0x8aa>
		__ticks = 1;
    3f1e:	fe 01       	movw	r30, r28
    3f20:	e2 5b       	subi	r30, 0xB2	; 178
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	91 83       	std	Z+1, r25	; 0x01
    3f2a:	80 83       	st	Z, r24
    3f2c:	64 c0       	rjmp	.+200    	; 0x3ff6 <LCD_function_set_4bit+0x972>
	else if (__tmp > 65535)
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e0 5b       	subi	r30, 0xB0	; 176
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	60 81       	ld	r22, Z
    3f36:	71 81       	ldd	r23, Z+1	; 0x01
    3f38:	82 81       	ldd	r24, Z+2	; 0x02
    3f3a:	93 81       	ldd	r25, Z+3	; 0x03
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	3f ef       	ldi	r19, 0xFF	; 255
    3f40:	4f e7       	ldi	r20, 0x7F	; 127
    3f42:	57 e4       	ldi	r21, 0x47	; 71
    3f44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f48:	18 16       	cp	r1, r24
    3f4a:	0c f0       	brlt	.+2      	; 0x3f4e <LCD_function_set_4bit+0x8ca>
    3f4c:	43 c0       	rjmp	.+134    	; 0x3fd4 <LCD_function_set_4bit+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f4e:	fe 01       	movw	r30, r28
    3f50:	ec 5a       	subi	r30, 0xAC	; 172
    3f52:	ff 4f       	sbci	r31, 0xFF	; 255
    3f54:	60 81       	ld	r22, Z
    3f56:	71 81       	ldd	r23, Z+1	; 0x01
    3f58:	82 81       	ldd	r24, Z+2	; 0x02
    3f5a:	93 81       	ldd	r25, Z+3	; 0x03
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	40 e2       	ldi	r20, 0x20	; 32
    3f62:	51 e4       	ldi	r21, 0x41	; 65
    3f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	8e 01       	movw	r16, r28
    3f6e:	02 5b       	subi	r16, 0xB2	; 178
    3f70:	1f 4f       	sbci	r17, 0xFF	; 255
    3f72:	bc 01       	movw	r22, r24
    3f74:	cd 01       	movw	r24, r26
    3f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	cb 01       	movw	r24, r22
    3f7e:	f8 01       	movw	r30, r16
    3f80:	91 83       	std	Z+1, r25	; 0x01
    3f82:	80 83       	st	Z, r24
    3f84:	1f c0       	rjmp	.+62     	; 0x3fc4 <LCD_function_set_4bit+0x940>
    3f86:	fe 01       	movw	r30, r28
    3f88:	e4 5b       	subi	r30, 0xB4	; 180
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	88 ec       	ldi	r24, 0xC8	; 200
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	91 83       	std	Z+1, r25	; 0x01
    3f92:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f94:	fe 01       	movw	r30, r28
    3f96:	e4 5b       	subi	r30, 0xB4	; 180
    3f98:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9a:	80 81       	ld	r24, Z
    3f9c:	91 81       	ldd	r25, Z+1	; 0x01
    3f9e:	01 97       	sbiw	r24, 0x01	; 1
    3fa0:	f1 f7       	brne	.-4      	; 0x3f9e <LCD_function_set_4bit+0x91a>
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	e4 5b       	subi	r30, 0xB4	; 180
    3fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa8:	91 83       	std	Z+1, r25	; 0x01
    3faa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fac:	de 01       	movw	r26, r28
    3fae:	a2 5b       	subi	r26, 0xB2	; 178
    3fb0:	bf 4f       	sbci	r27, 0xFF	; 255
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	e2 5b       	subi	r30, 0xB2	; 178
    3fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb8:	80 81       	ld	r24, Z
    3fba:	91 81       	ldd	r25, Z+1	; 0x01
    3fbc:	01 97       	sbiw	r24, 0x01	; 1
    3fbe:	11 96       	adiw	r26, 0x01	; 1
    3fc0:	9c 93       	st	X, r25
    3fc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	e2 5b       	subi	r30, 0xB2	; 178
    3fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fca:	80 81       	ld	r24, Z
    3fcc:	91 81       	ldd	r25, Z+1	; 0x01
    3fce:	00 97       	sbiw	r24, 0x00	; 0
    3fd0:	d1 f6       	brne	.-76     	; 0x3f86 <LCD_function_set_4bit+0x902>
    3fd2:	4b c0       	rjmp	.+150    	; 0x406a <LCD_function_set_4bit+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd4:	8e 01       	movw	r16, r28
    3fd6:	02 5b       	subi	r16, 0xB2	; 178
    3fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fda:	fe 01       	movw	r30, r28
    3fdc:	e0 5b       	subi	r30, 0xB0	; 176
    3fde:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe0:	60 81       	ld	r22, Z
    3fe2:	71 81       	ldd	r23, Z+1	; 0x01
    3fe4:	82 81       	ldd	r24, Z+2	; 0x02
    3fe6:	93 81       	ldd	r25, Z+3	; 0x03
    3fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	f8 01       	movw	r30, r16
    3ff2:	91 83       	std	Z+1, r25	; 0x01
    3ff4:	80 83       	st	Z, r24
    3ff6:	de 01       	movw	r26, r28
    3ff8:	a6 5b       	subi	r26, 0xB6	; 182
    3ffa:	bf 4f       	sbci	r27, 0xFF	; 255
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e2 5b       	subi	r30, 0xB2	; 178
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	80 81       	ld	r24, Z
    4004:	91 81       	ldd	r25, Z+1	; 0x01
    4006:	11 96       	adiw	r26, 0x01	; 1
    4008:	9c 93       	st	X, r25
    400a:	8e 93       	st	-X, r24
    400c:	fe 01       	movw	r30, r28
    400e:	e6 5b       	subi	r30, 0xB6	; 182
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	80 81       	ld	r24, Z
    4014:	91 81       	ldd	r25, Z+1	; 0x01
    4016:	01 97       	sbiw	r24, 0x01	; 1
    4018:	f1 f7       	brne	.-4      	; 0x4016 <LCD_function_set_4bit+0x992>
    401a:	fe 01       	movw	r30, r28
    401c:	e6 5b       	subi	r30, 0xB6	; 182
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	91 83       	std	Z+1, r25	; 0x01
    4022:	80 83       	st	Z, r24
    4024:	22 c0       	rjmp	.+68     	; 0x406a <LCD_function_set_4bit+0x9e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4026:	8e 01       	movw	r16, r28
    4028:	08 5a       	subi	r16, 0xA8	; 168
    402a:	1f 4f       	sbci	r17, 0xFF	; 255
    402c:	fe 01       	movw	r30, r28
    402e:	e7 5a       	subi	r30, 0xA7	; 167
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	60 81       	ld	r22, Z
    4034:	71 81       	ldd	r23, Z+1	; 0x01
    4036:	82 81       	ldd	r24, Z+2	; 0x02
    4038:	93 81       	ldd	r25, Z+3	; 0x03
    403a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    403e:	dc 01       	movw	r26, r24
    4040:	cb 01       	movw	r24, r22
    4042:	f8 01       	movw	r30, r16
    4044:	80 83       	st	Z, r24
    4046:	de 01       	movw	r26, r28
    4048:	a7 5b       	subi	r26, 0xB7	; 183
    404a:	bf 4f       	sbci	r27, 0xFF	; 255
    404c:	fe 01       	movw	r30, r28
    404e:	e8 5a       	subi	r30, 0xA8	; 168
    4050:	ff 4f       	sbci	r31, 0xFF	; 255
    4052:	80 81       	ld	r24, Z
    4054:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4056:	fe 01       	movw	r30, r28
    4058:	e7 5b       	subi	r30, 0xB7	; 183
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	80 81       	ld	r24, Z
    405e:	8a 95       	dec	r24
    4060:	f1 f7       	brne	.-4      	; 0x405e <LCD_function_set_4bit+0x9da>
    4062:	fe 01       	movw	r30, r28
    4064:	e7 5b       	subi	r30, 0xB7	; 183
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    406a:	fe 01       	movw	r30, r28
    406c:	e6 55       	subi	r30, 0x56	; 86
    406e:	ff 4f       	sbci	r31, 0xFF	; 255
    4070:	10 82       	st	Z, r1
    4072:	23 c0       	rjmp	.+70     	; 0x40ba <LCD_function_set_4bit+0xa36>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    4074:	fe 01       	movw	r30, r28
    4076:	e6 55       	subi	r30, 0x56	; 86
    4078:	ff 4f       	sbci	r31, 0xFF	; 255
    407a:	80 81       	ld	r24, Z
    407c:	48 2f       	mov	r20, r24
    407e:	4c 5f       	subi	r20, 0xFC	; 252
    4080:	fe 01       	movw	r30, r28
    4082:	e6 55       	subi	r30, 0x56	; 86
    4084:	ff 4f       	sbci	r31, 0xFF	; 255
    4086:	80 81       	ld	r24, Z
    4088:	28 2f       	mov	r18, r24
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	82 e0       	ldi	r24, 0x02	; 2
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	02 c0       	rjmp	.+4      	; 0x4096 <LCD_function_set_4bit+0xa12>
    4092:	95 95       	asr	r25
    4094:	87 95       	ror	r24
    4096:	2a 95       	dec	r18
    4098:	e2 f7       	brpl	.-8      	; 0x4092 <LCD_function_set_4bit+0xa0e>
    409a:	98 2f       	mov	r25, r24
    409c:	91 70       	andi	r25, 0x01	; 1
    409e:	82 e0       	ldi	r24, 0x02	; 2
    40a0:	64 2f       	mov	r22, r20
    40a2:	49 2f       	mov	r20, r25
    40a4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    40a8:	de 01       	movw	r26, r28
    40aa:	a6 55       	subi	r26, 0x56	; 86
    40ac:	bf 4f       	sbci	r27, 0xFF	; 255
    40ae:	fe 01       	movw	r30, r28
    40b0:	e6 55       	subi	r30, 0x56	; 86
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	80 81       	ld	r24, Z
    40b6:	8f 5f       	subi	r24, 0xFF	; 255
    40b8:	8c 93       	st	X, r24
    40ba:	fe 01       	movw	r30, r28
    40bc:	e6 55       	subi	r30, 0x56	; 86
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	80 81       	ld	r24, Z
    40c2:	84 30       	cpi	r24, 0x04	; 4
    40c4:	b8 f2       	brcs	.-82     	; 0x4074 <LCD_function_set_4bit+0x9f0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    40c6:	82 e0       	ldi	r24, 0x02	; 2
    40c8:	60 e0       	ldi	r22, 0x00	; 0
    40ca:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
    40ce:	fe 01       	movw	r30, r28
    40d0:	eb 5b       	subi	r30, 0xBB	; 187
    40d2:	ff 4f       	sbci	r31, 0xFF	; 255
    40d4:	80 e0       	ldi	r24, 0x00	; 0
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	a0 e2       	ldi	r26, 0x20	; 32
    40da:	b1 e4       	ldi	r27, 0x41	; 65
    40dc:	80 83       	st	Z, r24
    40de:	91 83       	std	Z+1, r25	; 0x01
    40e0:	a2 83       	std	Z+2, r26	; 0x02
    40e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    40e4:	8e 01       	movw	r16, r28
    40e6:	0f 5b       	subi	r16, 0xBF	; 191
    40e8:	1f 4f       	sbci	r17, 0xFF	; 255
    40ea:	fe 01       	movw	r30, r28
    40ec:	eb 5b       	subi	r30, 0xBB	; 187
    40ee:	ff 4f       	sbci	r31, 0xFF	; 255
    40f0:	60 81       	ld	r22, Z
    40f2:	71 81       	ldd	r23, Z+1	; 0x01
    40f4:	82 81       	ldd	r24, Z+2	; 0x02
    40f6:	93 81       	ldd	r25, Z+3	; 0x03
    40f8:	2b ea       	ldi	r18, 0xAB	; 171
    40fa:	3a ea       	ldi	r19, 0xAA	; 170
    40fc:	4a e2       	ldi	r20, 0x2A	; 42
    40fe:	50 e4       	ldi	r21, 0x40	; 64
    4100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	f8 01       	movw	r30, r16
    410a:	80 83       	st	Z, r24
    410c:	91 83       	std	Z+1, r25	; 0x01
    410e:	a2 83       	std	Z+2, r26	; 0x02
    4110:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4112:	fe 01       	movw	r30, r28
    4114:	ef 5b       	subi	r30, 0xBF	; 191
    4116:	ff 4f       	sbci	r31, 0xFF	; 255
    4118:	60 81       	ld	r22, Z
    411a:	71 81       	ldd	r23, Z+1	; 0x01
    411c:	82 81       	ldd	r24, Z+2	; 0x02
    411e:	93 81       	ldd	r25, Z+3	; 0x03
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	40 e8       	ldi	r20, 0x80	; 128
    4126:	5f e3       	ldi	r21, 0x3F	; 63
    4128:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    412c:	88 23       	and	r24, r24
    412e:	34 f4       	brge	.+12     	; 0x413c <LCD_function_set_4bit+0xab8>
		__ticks = 1;
    4130:	81 e0       	ldi	r24, 0x01	; 1
    4132:	fe 01       	movw	r30, r28
    4134:	e0 5c       	subi	r30, 0xC0	; 192
    4136:	ff 4f       	sbci	r31, 0xFF	; 255
    4138:	80 83       	st	Z, r24
    413a:	9d c0       	rjmp	.+314    	; 0x4276 <LCD_function_set_4bit+0xbf2>
	else if (__tmp > 255)
    413c:	fe 01       	movw	r30, r28
    413e:	ef 5b       	subi	r30, 0xBF	; 191
    4140:	ff 4f       	sbci	r31, 0xFF	; 255
    4142:	60 81       	ld	r22, Z
    4144:	71 81       	ldd	r23, Z+1	; 0x01
    4146:	82 81       	ldd	r24, Z+2	; 0x02
    4148:	93 81       	ldd	r25, Z+3	; 0x03
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	4f e7       	ldi	r20, 0x7F	; 127
    4150:	53 e4       	ldi	r21, 0x43	; 67
    4152:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4156:	18 16       	cp	r1, r24
    4158:	0c f0       	brlt	.+2      	; 0x415c <LCD_function_set_4bit+0xad8>
    415a:	7e c0       	rjmp	.+252    	; 0x4258 <LCD_function_set_4bit+0xbd4>
	{
		_delay_ms(__us / 1000.0);
    415c:	fe 01       	movw	r30, r28
    415e:	eb 5b       	subi	r30, 0xBB	; 187
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	60 81       	ld	r22, Z
    4164:	71 81       	ldd	r23, Z+1	; 0x01
    4166:	82 81       	ldd	r24, Z+2	; 0x02
    4168:	93 81       	ldd	r25, Z+3	; 0x03
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	4a e7       	ldi	r20, 0x7A	; 122
    4170:	54 e4       	ldi	r21, 0x44	; 68
    4172:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	8c af       	std	Y+60, r24	; 0x3c
    417c:	9d af       	std	Y+61, r25	; 0x3d
    417e:	ae af       	std	Y+62, r26	; 0x3e
    4180:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4182:	6c ad       	ldd	r22, Y+60	; 0x3c
    4184:	7d ad       	ldd	r23, Y+61	; 0x3d
    4186:	8e ad       	ldd	r24, Y+62	; 0x3e
    4188:	9f ad       	ldd	r25, Y+63	; 0x3f
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	4a ef       	ldi	r20, 0xFA	; 250
    4190:	54 e4       	ldi	r21, 0x44	; 68
    4192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	88 af       	std	Y+56, r24	; 0x38
    419c:	99 af       	std	Y+57, r25	; 0x39
    419e:	aa af       	std	Y+58, r26	; 0x3a
    41a0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    41a2:	68 ad       	ldd	r22, Y+56	; 0x38
    41a4:	79 ad       	ldd	r23, Y+57	; 0x39
    41a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    41a8:	9b ad       	ldd	r25, Y+59	; 0x3b
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	40 e8       	ldi	r20, 0x80	; 128
    41b0:	5f e3       	ldi	r21, 0x3F	; 63
    41b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41b6:	88 23       	and	r24, r24
    41b8:	2c f4       	brge	.+10     	; 0x41c4 <LCD_function_set_4bit+0xb40>
		__ticks = 1;
    41ba:	81 e0       	ldi	r24, 0x01	; 1
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	9f ab       	std	Y+55, r25	; 0x37
    41c0:	8e ab       	std	Y+54, r24	; 0x36
    41c2:	3f c0       	rjmp	.+126    	; 0x4242 <LCD_function_set_4bit+0xbbe>
	else if (__tmp > 65535)
    41c4:	68 ad       	ldd	r22, Y+56	; 0x38
    41c6:	79 ad       	ldd	r23, Y+57	; 0x39
    41c8:	8a ad       	ldd	r24, Y+58	; 0x3a
    41ca:	9b ad       	ldd	r25, Y+59	; 0x3b
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	3f ef       	ldi	r19, 0xFF	; 255
    41d0:	4f e7       	ldi	r20, 0x7F	; 127
    41d2:	57 e4       	ldi	r21, 0x47	; 71
    41d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41d8:	18 16       	cp	r1, r24
    41da:	4c f5       	brge	.+82     	; 0x422e <LCD_function_set_4bit+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41dc:	6c ad       	ldd	r22, Y+60	; 0x3c
    41de:	7d ad       	ldd	r23, Y+61	; 0x3d
    41e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    41e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    41e4:	20 e0       	ldi	r18, 0x00	; 0
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	40 e2       	ldi	r20, 0x20	; 32
    41ea:	51 e4       	ldi	r21, 0x41	; 65
    41ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41f0:	dc 01       	movw	r26, r24
    41f2:	cb 01       	movw	r24, r22
    41f4:	bc 01       	movw	r22, r24
    41f6:	cd 01       	movw	r24, r26
    41f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41fc:	dc 01       	movw	r26, r24
    41fe:	cb 01       	movw	r24, r22
    4200:	9f ab       	std	Y+55, r25	; 0x37
    4202:	8e ab       	std	Y+54, r24	; 0x36
    4204:	0f c0       	rjmp	.+30     	; 0x4224 <LCD_function_set_4bit+0xba0>
    4206:	88 ec       	ldi	r24, 0xC8	; 200
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	9d ab       	std	Y+53, r25	; 0x35
    420c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    420e:	8c a9       	ldd	r24, Y+52	; 0x34
    4210:	9d a9       	ldd	r25, Y+53	; 0x35
    4212:	01 97       	sbiw	r24, 0x01	; 1
    4214:	f1 f7       	brne	.-4      	; 0x4212 <LCD_function_set_4bit+0xb8e>
    4216:	9d ab       	std	Y+53, r25	; 0x35
    4218:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    421a:	8e a9       	ldd	r24, Y+54	; 0x36
    421c:	9f a9       	ldd	r25, Y+55	; 0x37
    421e:	01 97       	sbiw	r24, 0x01	; 1
    4220:	9f ab       	std	Y+55, r25	; 0x37
    4222:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4224:	8e a9       	ldd	r24, Y+54	; 0x36
    4226:	9f a9       	ldd	r25, Y+55	; 0x37
    4228:	00 97       	sbiw	r24, 0x00	; 0
    422a:	69 f7       	brne	.-38     	; 0x4206 <LCD_function_set_4bit+0xb82>
    422c:	2d c0       	rjmp	.+90     	; 0x4288 <LCD_function_set_4bit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    422e:	68 ad       	ldd	r22, Y+56	; 0x38
    4230:	79 ad       	ldd	r23, Y+57	; 0x39
    4232:	8a ad       	ldd	r24, Y+58	; 0x3a
    4234:	9b ad       	ldd	r25, Y+59	; 0x3b
    4236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    423a:	dc 01       	movw	r26, r24
    423c:	cb 01       	movw	r24, r22
    423e:	9f ab       	std	Y+55, r25	; 0x37
    4240:	8e ab       	std	Y+54, r24	; 0x36
    4242:	8e a9       	ldd	r24, Y+54	; 0x36
    4244:	9f a9       	ldd	r25, Y+55	; 0x37
    4246:	9b ab       	std	Y+51, r25	; 0x33
    4248:	8a ab       	std	Y+50, r24	; 0x32
    424a:	8a a9       	ldd	r24, Y+50	; 0x32
    424c:	9b a9       	ldd	r25, Y+51	; 0x33
    424e:	01 97       	sbiw	r24, 0x01	; 1
    4250:	f1 f7       	brne	.-4      	; 0x424e <LCD_function_set_4bit+0xbca>
    4252:	9b ab       	std	Y+51, r25	; 0x33
    4254:	8a ab       	std	Y+50, r24	; 0x32
    4256:	18 c0       	rjmp	.+48     	; 0x4288 <LCD_function_set_4bit+0xc04>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4258:	fe 01       	movw	r30, r28
    425a:	ef 5b       	subi	r30, 0xBF	; 191
    425c:	ff 4f       	sbci	r31, 0xFF	; 255
    425e:	60 81       	ld	r22, Z
    4260:	71 81       	ldd	r23, Z+1	; 0x01
    4262:	82 81       	ldd	r24, Z+2	; 0x02
    4264:	93 81       	ldd	r25, Z+3	; 0x03
    4266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	fe 01       	movw	r30, r28
    4270:	e0 5c       	subi	r30, 0xC0	; 192
    4272:	ff 4f       	sbci	r31, 0xFF	; 255
    4274:	80 83       	st	Z, r24
    4276:	fe 01       	movw	r30, r28
    4278:	e0 5c       	subi	r30, 0xC0	; 192
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	80 81       	ld	r24, Z
    427e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4280:	89 a9       	ldd	r24, Y+49	; 0x31
    4282:	8a 95       	dec	r24
    4284:	f1 f7       	brne	.-4      	; 0x4282 <LCD_function_set_4bit+0xbfe>
    4286:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    4288:	82 e0       	ldi	r24, 0x02	; 2
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	a0 e8       	ldi	r26, 0x80	; 128
    4296:	bf e3       	ldi	r27, 0x3F	; 63
    4298:	8d a7       	std	Y+45, r24	; 0x2d
    429a:	9e a7       	std	Y+46, r25	; 0x2e
    429c:	af a7       	std	Y+47, r26	; 0x2f
    429e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    42a0:	6d a5       	ldd	r22, Y+45	; 0x2d
    42a2:	7e a5       	ldd	r23, Y+46	; 0x2e
    42a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    42a6:	98 a9       	ldd	r25, Y+48	; 0x30
    42a8:	2b ea       	ldi	r18, 0xAB	; 171
    42aa:	3a ea       	ldi	r19, 0xAA	; 170
    42ac:	4a e2       	ldi	r20, 0x2A	; 42
    42ae:	50 e4       	ldi	r21, 0x40	; 64
    42b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	89 a7       	std	Y+41, r24	; 0x29
    42ba:	9a a7       	std	Y+42, r25	; 0x2a
    42bc:	ab a7       	std	Y+43, r26	; 0x2b
    42be:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    42c0:	69 a5       	ldd	r22, Y+41	; 0x29
    42c2:	7a a5       	ldd	r23, Y+42	; 0x2a
    42c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    42c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	40 e8       	ldi	r20, 0x80	; 128
    42ce:	5f e3       	ldi	r21, 0x3F	; 63
    42d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42d4:	88 23       	and	r24, r24
    42d6:	1c f4       	brge	.+6      	; 0x42de <LCD_function_set_4bit+0xc5a>
		__ticks = 1;
    42d8:	81 e0       	ldi	r24, 0x01	; 1
    42da:	88 a7       	std	Y+40, r24	; 0x28
    42dc:	91 c0       	rjmp	.+290    	; 0x4400 <LCD_function_set_4bit+0xd7c>
	else if (__tmp > 255)
    42de:	69 a5       	ldd	r22, Y+41	; 0x29
    42e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    42e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    42e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	30 e0       	ldi	r19, 0x00	; 0
    42ea:	4f e7       	ldi	r20, 0x7F	; 127
    42ec:	53 e4       	ldi	r21, 0x43	; 67
    42ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42f2:	18 16       	cp	r1, r24
    42f4:	0c f0       	brlt	.+2      	; 0x42f8 <LCD_function_set_4bit+0xc74>
    42f6:	7b c0       	rjmp	.+246    	; 0x43ee <LCD_function_set_4bit+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    42f8:	6d a5       	ldd	r22, Y+45	; 0x2d
    42fa:	7e a5       	ldd	r23, Y+46	; 0x2e
    42fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    42fe:	98 a9       	ldd	r25, Y+48	; 0x30
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	4a e7       	ldi	r20, 0x7A	; 122
    4306:	54 e4       	ldi	r21, 0x44	; 68
    4308:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
    4310:	8c a3       	std	Y+36, r24	; 0x24
    4312:	9d a3       	std	Y+37, r25	; 0x25
    4314:	ae a3       	std	Y+38, r26	; 0x26
    4316:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4318:	6c a1       	ldd	r22, Y+36	; 0x24
    431a:	7d a1       	ldd	r23, Y+37	; 0x25
    431c:	8e a1       	ldd	r24, Y+38	; 0x26
    431e:	9f a1       	ldd	r25, Y+39	; 0x27
    4320:	20 e0       	ldi	r18, 0x00	; 0
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	4a ef       	ldi	r20, 0xFA	; 250
    4326:	54 e4       	ldi	r21, 0x44	; 68
    4328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    432c:	dc 01       	movw	r26, r24
    432e:	cb 01       	movw	r24, r22
    4330:	88 a3       	std	Y+32, r24	; 0x20
    4332:	99 a3       	std	Y+33, r25	; 0x21
    4334:	aa a3       	std	Y+34, r26	; 0x22
    4336:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4338:	68 a1       	ldd	r22, Y+32	; 0x20
    433a:	79 a1       	ldd	r23, Y+33	; 0x21
    433c:	8a a1       	ldd	r24, Y+34	; 0x22
    433e:	9b a1       	ldd	r25, Y+35	; 0x23
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	40 e8       	ldi	r20, 0x80	; 128
    4346:	5f e3       	ldi	r21, 0x3F	; 63
    4348:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    434c:	88 23       	and	r24, r24
    434e:	2c f4       	brge	.+10     	; 0x435a <LCD_function_set_4bit+0xcd6>
		__ticks = 1;
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	9f 8f       	std	Y+31, r25	; 0x1f
    4356:	8e 8f       	std	Y+30, r24	; 0x1e
    4358:	3f c0       	rjmp	.+126    	; 0x43d8 <LCD_function_set_4bit+0xd54>
	else if (__tmp > 65535)
    435a:	68 a1       	ldd	r22, Y+32	; 0x20
    435c:	79 a1       	ldd	r23, Y+33	; 0x21
    435e:	8a a1       	ldd	r24, Y+34	; 0x22
    4360:	9b a1       	ldd	r25, Y+35	; 0x23
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	3f ef       	ldi	r19, 0xFF	; 255
    4366:	4f e7       	ldi	r20, 0x7F	; 127
    4368:	57 e4       	ldi	r21, 0x47	; 71
    436a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    436e:	18 16       	cp	r1, r24
    4370:	4c f5       	brge	.+82     	; 0x43c4 <LCD_function_set_4bit+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4372:	6c a1       	ldd	r22, Y+36	; 0x24
    4374:	7d a1       	ldd	r23, Y+37	; 0x25
    4376:	8e a1       	ldd	r24, Y+38	; 0x26
    4378:	9f a1       	ldd	r25, Y+39	; 0x27
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	40 e2       	ldi	r20, 0x20	; 32
    4380:	51 e4       	ldi	r21, 0x41	; 65
    4382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4386:	dc 01       	movw	r26, r24
    4388:	cb 01       	movw	r24, r22
    438a:	bc 01       	movw	r22, r24
    438c:	cd 01       	movw	r24, r26
    438e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4392:	dc 01       	movw	r26, r24
    4394:	cb 01       	movw	r24, r22
    4396:	9f 8f       	std	Y+31, r25	; 0x1f
    4398:	8e 8f       	std	Y+30, r24	; 0x1e
    439a:	0f c0       	rjmp	.+30     	; 0x43ba <LCD_function_set_4bit+0xd36>
    439c:	88 ec       	ldi	r24, 0xC8	; 200
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	9d 8f       	std	Y+29, r25	; 0x1d
    43a2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    43a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    43a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    43a8:	01 97       	sbiw	r24, 0x01	; 1
    43aa:	f1 f7       	brne	.-4      	; 0x43a8 <LCD_function_set_4bit+0xd24>
    43ac:	9d 8f       	std	Y+29, r25	; 0x1d
    43ae:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43b4:	01 97       	sbiw	r24, 0x01	; 1
    43b6:	9f 8f       	std	Y+31, r25	; 0x1f
    43b8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43bc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43be:	00 97       	sbiw	r24, 0x00	; 0
    43c0:	69 f7       	brne	.-38     	; 0x439c <LCD_function_set_4bit+0xd18>
    43c2:	24 c0       	rjmp	.+72     	; 0x440c <LCD_function_set_4bit+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c4:	68 a1       	ldd	r22, Y+32	; 0x20
    43c6:	79 a1       	ldd	r23, Y+33	; 0x21
    43c8:	8a a1       	ldd	r24, Y+34	; 0x22
    43ca:	9b a1       	ldd	r25, Y+35	; 0x23
    43cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d0:	dc 01       	movw	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	9f 8f       	std	Y+31, r25	; 0x1f
    43d6:	8e 8f       	std	Y+30, r24	; 0x1e
    43d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43dc:	9b 8f       	std	Y+27, r25	; 0x1b
    43de:	8a 8f       	std	Y+26, r24	; 0x1a
    43e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    43e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    43e4:	01 97       	sbiw	r24, 0x01	; 1
    43e6:	f1 f7       	brne	.-4      	; 0x43e4 <LCD_function_set_4bit+0xd60>
    43e8:	9b 8f       	std	Y+27, r25	; 0x1b
    43ea:	8a 8f       	std	Y+26, r24	; 0x1a
    43ec:	0f c0       	rjmp	.+30     	; 0x440c <LCD_function_set_4bit+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    43ee:	69 a5       	ldd	r22, Y+41	; 0x29
    43f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    43f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    43f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    43f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	88 a7       	std	Y+40, r24	; 0x28
    4400:	88 a5       	ldd	r24, Y+40	; 0x28
    4402:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4404:	89 8d       	ldd	r24, Y+25	; 0x19
    4406:	8a 95       	dec	r24
    4408:	f1 f7       	brne	.-4      	; 0x4406 <LCD_function_set_4bit+0xd82>
    440a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    440c:	fe 01       	movw	r30, r28
    440e:	e7 55       	subi	r30, 0x57	; 87
    4410:	ff 4f       	sbci	r31, 0xFF	; 255
    4412:	10 82       	st	Z, r1
    4414:	23 c0       	rjmp	.+70     	; 0x445c <LCD_function_set_4bit+0xdd8>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
    4416:	fe 01       	movw	r30, r28
    4418:	e7 55       	subi	r30, 0x57	; 87
    441a:	ff 4f       	sbci	r31, 0xFF	; 255
    441c:	80 81       	ld	r24, Z
    441e:	48 2f       	mov	r20, r24
    4420:	4c 5f       	subi	r20, 0xFC	; 252
    4422:	fe 01       	movw	r30, r28
    4424:	e7 55       	subi	r30, 0x57	; 87
    4426:	ff 4f       	sbci	r31, 0xFF	; 255
    4428:	80 81       	ld	r24, Z
    442a:	28 2f       	mov	r18, r24
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	88 e0       	ldi	r24, 0x08	; 8
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	02 c0       	rjmp	.+4      	; 0x4438 <LCD_function_set_4bit+0xdb4>
    4434:	95 95       	asr	r25
    4436:	87 95       	ror	r24
    4438:	2a 95       	dec	r18
    443a:	e2 f7       	brpl	.-8      	; 0x4434 <LCD_function_set_4bit+0xdb0>
    443c:	98 2f       	mov	r25, r24
    443e:	91 70       	andi	r25, 0x01	; 1
    4440:	82 e0       	ldi	r24, 0x02	; 2
    4442:	64 2f       	mov	r22, r20
    4444:	49 2f       	mov	r20, r25
    4446:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    444a:	de 01       	movw	r26, r28
    444c:	a7 55       	subi	r26, 0x57	; 87
    444e:	bf 4f       	sbci	r27, 0xFF	; 255
    4450:	fe 01       	movw	r30, r28
    4452:	e7 55       	subi	r30, 0x57	; 87
    4454:	ff 4f       	sbci	r31, 0xFF	; 255
    4456:	80 81       	ld	r24, Z
    4458:	8f 5f       	subi	r24, 0xFF	; 255
    445a:	8c 93       	st	X, r24
    445c:	fe 01       	movw	r30, r28
    445e:	e7 55       	subi	r30, 0x57	; 87
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	80 81       	ld	r24, Z
    4464:	84 30       	cpi	r24, 0x04	; 4
    4466:	b8 f2       	brcs	.-82     	; 0x4416 <LCD_function_set_4bit+0xd92>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    4468:	82 e0       	ldi	r24, 0x02	; 2
    446a:	60 e0       	ldi	r22, 0x00	; 0
    446c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
    4470:	80 e0       	ldi	r24, 0x00	; 0
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	a0 e2       	ldi	r26, 0x20	; 32
    4476:	b1 e4       	ldi	r27, 0x41	; 65
    4478:	8d 8b       	std	Y+21, r24	; 0x15
    447a:	9e 8b       	std	Y+22, r25	; 0x16
    447c:	af 8b       	std	Y+23, r26	; 0x17
    447e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4480:	6d 89       	ldd	r22, Y+21	; 0x15
    4482:	7e 89       	ldd	r23, Y+22	; 0x16
    4484:	8f 89       	ldd	r24, Y+23	; 0x17
    4486:	98 8d       	ldd	r25, Y+24	; 0x18
    4488:	2b ea       	ldi	r18, 0xAB	; 171
    448a:	3a ea       	ldi	r19, 0xAA	; 170
    448c:	4a e2       	ldi	r20, 0x2A	; 42
    448e:	50 e4       	ldi	r21, 0x40	; 64
    4490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4494:	dc 01       	movw	r26, r24
    4496:	cb 01       	movw	r24, r22
    4498:	89 8b       	std	Y+17, r24	; 0x11
    449a:	9a 8b       	std	Y+18, r25	; 0x12
    449c:	ab 8b       	std	Y+19, r26	; 0x13
    449e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    44a0:	69 89       	ldd	r22, Y+17	; 0x11
    44a2:	7a 89       	ldd	r23, Y+18	; 0x12
    44a4:	8b 89       	ldd	r24, Y+19	; 0x13
    44a6:	9c 89       	ldd	r25, Y+20	; 0x14
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	30 e0       	ldi	r19, 0x00	; 0
    44ac:	40 e8       	ldi	r20, 0x80	; 128
    44ae:	5f e3       	ldi	r21, 0x3F	; 63
    44b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44b4:	88 23       	and	r24, r24
    44b6:	1c f4       	brge	.+6      	; 0x44be <LCD_function_set_4bit+0xe3a>
		__ticks = 1;
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	88 8b       	std	Y+16, r24	; 0x10
    44bc:	91 c0       	rjmp	.+290    	; 0x45e0 <LCD_function_set_4bit+0xf5c>
	else if (__tmp > 255)
    44be:	69 89       	ldd	r22, Y+17	; 0x11
    44c0:	7a 89       	ldd	r23, Y+18	; 0x12
    44c2:	8b 89       	ldd	r24, Y+19	; 0x13
    44c4:	9c 89       	ldd	r25, Y+20	; 0x14
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	4f e7       	ldi	r20, 0x7F	; 127
    44cc:	53 e4       	ldi	r21, 0x43	; 67
    44ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44d2:	18 16       	cp	r1, r24
    44d4:	0c f0       	brlt	.+2      	; 0x44d8 <LCD_function_set_4bit+0xe54>
    44d6:	7b c0       	rjmp	.+246    	; 0x45ce <LCD_function_set_4bit+0xf4a>
	{
		_delay_ms(__us / 1000.0);
    44d8:	6d 89       	ldd	r22, Y+21	; 0x15
    44da:	7e 89       	ldd	r23, Y+22	; 0x16
    44dc:	8f 89       	ldd	r24, Y+23	; 0x17
    44de:	98 8d       	ldd	r25, Y+24	; 0x18
    44e0:	20 e0       	ldi	r18, 0x00	; 0
    44e2:	30 e0       	ldi	r19, 0x00	; 0
    44e4:	4a e7       	ldi	r20, 0x7A	; 122
    44e6:	54 e4       	ldi	r21, 0x44	; 68
    44e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    44ec:	dc 01       	movw	r26, r24
    44ee:	cb 01       	movw	r24, r22
    44f0:	8c 87       	std	Y+12, r24	; 0x0c
    44f2:	9d 87       	std	Y+13, r25	; 0x0d
    44f4:	ae 87       	std	Y+14, r26	; 0x0e
    44f6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    44fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    44fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    44fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    4500:	20 e0       	ldi	r18, 0x00	; 0
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	4a ef       	ldi	r20, 0xFA	; 250
    4506:	54 e4       	ldi	r21, 0x44	; 68
    4508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    450c:	dc 01       	movw	r26, r24
    450e:	cb 01       	movw	r24, r22
    4510:	88 87       	std	Y+8, r24	; 0x08
    4512:	99 87       	std	Y+9, r25	; 0x09
    4514:	aa 87       	std	Y+10, r26	; 0x0a
    4516:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4518:	68 85       	ldd	r22, Y+8	; 0x08
    451a:	79 85       	ldd	r23, Y+9	; 0x09
    451c:	8a 85       	ldd	r24, Y+10	; 0x0a
    451e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	40 e8       	ldi	r20, 0x80	; 128
    4526:	5f e3       	ldi	r21, 0x3F	; 63
    4528:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    452c:	88 23       	and	r24, r24
    452e:	2c f4       	brge	.+10     	; 0x453a <LCD_function_set_4bit+0xeb6>
		__ticks = 1;
    4530:	81 e0       	ldi	r24, 0x01	; 1
    4532:	90 e0       	ldi	r25, 0x00	; 0
    4534:	9f 83       	std	Y+7, r25	; 0x07
    4536:	8e 83       	std	Y+6, r24	; 0x06
    4538:	3f c0       	rjmp	.+126    	; 0x45b8 <LCD_function_set_4bit+0xf34>
	else if (__tmp > 65535)
    453a:	68 85       	ldd	r22, Y+8	; 0x08
    453c:	79 85       	ldd	r23, Y+9	; 0x09
    453e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4540:	9b 85       	ldd	r25, Y+11	; 0x0b
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	3f ef       	ldi	r19, 0xFF	; 255
    4546:	4f e7       	ldi	r20, 0x7F	; 127
    4548:	57 e4       	ldi	r21, 0x47	; 71
    454a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    454e:	18 16       	cp	r1, r24
    4550:	4c f5       	brge	.+82     	; 0x45a4 <LCD_function_set_4bit+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4552:	6c 85       	ldd	r22, Y+12	; 0x0c
    4554:	7d 85       	ldd	r23, Y+13	; 0x0d
    4556:	8e 85       	ldd	r24, Y+14	; 0x0e
    4558:	9f 85       	ldd	r25, Y+15	; 0x0f
    455a:	20 e0       	ldi	r18, 0x00	; 0
    455c:	30 e0       	ldi	r19, 0x00	; 0
    455e:	40 e2       	ldi	r20, 0x20	; 32
    4560:	51 e4       	ldi	r21, 0x41	; 65
    4562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4566:	dc 01       	movw	r26, r24
    4568:	cb 01       	movw	r24, r22
    456a:	bc 01       	movw	r22, r24
    456c:	cd 01       	movw	r24, r26
    456e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4572:	dc 01       	movw	r26, r24
    4574:	cb 01       	movw	r24, r22
    4576:	9f 83       	std	Y+7, r25	; 0x07
    4578:	8e 83       	std	Y+6, r24	; 0x06
    457a:	0f c0       	rjmp	.+30     	; 0x459a <LCD_function_set_4bit+0xf16>
    457c:	88 ec       	ldi	r24, 0xC8	; 200
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	9d 83       	std	Y+5, r25	; 0x05
    4582:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4584:	8c 81       	ldd	r24, Y+4	; 0x04
    4586:	9d 81       	ldd	r25, Y+5	; 0x05
    4588:	01 97       	sbiw	r24, 0x01	; 1
    458a:	f1 f7       	brne	.-4      	; 0x4588 <LCD_function_set_4bit+0xf04>
    458c:	9d 83       	std	Y+5, r25	; 0x05
    458e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4590:	8e 81       	ldd	r24, Y+6	; 0x06
    4592:	9f 81       	ldd	r25, Y+7	; 0x07
    4594:	01 97       	sbiw	r24, 0x01	; 1
    4596:	9f 83       	std	Y+7, r25	; 0x07
    4598:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    459a:	8e 81       	ldd	r24, Y+6	; 0x06
    459c:	9f 81       	ldd	r25, Y+7	; 0x07
    459e:	00 97       	sbiw	r24, 0x00	; 0
    45a0:	69 f7       	brne	.-38     	; 0x457c <LCD_function_set_4bit+0xef8>
    45a2:	24 c0       	rjmp	.+72     	; 0x45ec <LCD_function_set_4bit+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45a4:	68 85       	ldd	r22, Y+8	; 0x08
    45a6:	79 85       	ldd	r23, Y+9	; 0x09
    45a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    45aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    45ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	9f 83       	std	Y+7, r25	; 0x07
    45b6:	8e 83       	std	Y+6, r24	; 0x06
    45b8:	8e 81       	ldd	r24, Y+6	; 0x06
    45ba:	9f 81       	ldd	r25, Y+7	; 0x07
    45bc:	9b 83       	std	Y+3, r25	; 0x03
    45be:	8a 83       	std	Y+2, r24	; 0x02
    45c0:	8a 81       	ldd	r24, Y+2	; 0x02
    45c2:	9b 81       	ldd	r25, Y+3	; 0x03
    45c4:	01 97       	sbiw	r24, 0x01	; 1
    45c6:	f1 f7       	brne	.-4      	; 0x45c4 <LCD_function_set_4bit+0xf40>
    45c8:	9b 83       	std	Y+3, r25	; 0x03
    45ca:	8a 83       	std	Y+2, r24	; 0x02
    45cc:	0f c0       	rjmp	.+30     	; 0x45ec <LCD_function_set_4bit+0xf68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    45ce:	69 89       	ldd	r22, Y+17	; 0x11
    45d0:	7a 89       	ldd	r23, Y+18	; 0x12
    45d2:	8b 89       	ldd	r24, Y+19	; 0x13
    45d4:	9c 89       	ldd	r25, Y+20	; 0x14
    45d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	88 8b       	std	Y+16, r24	; 0x10
    45e0:	88 89       	ldd	r24, Y+16	; 0x10
    45e2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    45e4:	89 81       	ldd	r24, Y+1	; 0x01
    45e6:	8a 95       	dec	r24
    45e8:	f1 f7       	brne	.-4      	; 0x45e6 <LCD_function_set_4bit+0xf62>
    45ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    45ec:	c5 55       	subi	r28, 0x55	; 85
    45ee:	df 4f       	sbci	r29, 0xFF	; 255
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	cf 91       	pop	r28
    45fc:	df 91       	pop	r29
    45fe:	1f 91       	pop	r17
    4600:	0f 91       	pop	r16
    4602:	08 95       	ret

00004604 <LCD_read_data_4bit>:

u8 LCD_read_data_4bit(void){
    4604:	0f 93       	push	r16
    4606:	1f 93       	push	r17
    4608:	df 93       	push	r29
    460a:	cf 93       	push	r28
    460c:	cd b7       	in	r28, 0x3d	; 61
    460e:	de b7       	in	r29, 0x3e	; 62
    4610:	c1 56       	subi	r28, 0x61	; 97
    4612:	d0 40       	sbci	r29, 0x00	; 0
    4614:	0f b6       	in	r0, 0x3f	; 63
    4616:	f8 94       	cli
    4618:	de bf       	out	0x3e, r29	; 62
    461a:	0f be       	out	0x3f, r0	; 63
    461c:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data pins to input
	DIO_void_set_pin_dir(lcd_data_port, B7, INPUT);
    461e:	82 e0       	ldi	r24, 0x02	; 2
    4620:	67 e0       	ldi	r22, 0x07	; 7
    4622:	40 e0       	ldi	r20, 0x00	; 0
    4624:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, INPUT);
    4628:	82 e0       	ldi	r24, 0x02	; 2
    462a:	66 e0       	ldi	r22, 0x06	; 6
    462c:	40 e0       	ldi	r20, 0x00	; 0
    462e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, INPUT);
    4632:	82 e0       	ldi	r24, 0x02	; 2
    4634:	65 e0       	ldi	r22, 0x05	; 5
    4636:	40 e0       	ldi	r20, 0x00	; 0
    4638:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, INPUT);
    463c:	82 e0       	ldi	r24, 0x02	; 2
    463e:	64 e0       	ldi	r22, 0x04	; 4
    4640:	40 e0       	ldi	r20, 0x00	; 0
    4642:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    4646:	82 e0       	ldi	r24, 0x02	; 2
    4648:	62 e0       	ldi	r22, 0x02	; 2
    464a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    464e:	82 e0       	ldi	r24, 0x02	; 2
    4650:	61 e0       	ldi	r22, 0x01	; 1
    4652:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    4656:	fe 01       	movw	r30, r28
    4658:	e3 5a       	subi	r30, 0xA3	; 163
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	80 e0       	ldi	r24, 0x00	; 0
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	a0 e8       	ldi	r26, 0x80	; 128
    4662:	bf e3       	ldi	r27, 0x3F	; 63
    4664:	80 83       	st	Z, r24
    4666:	91 83       	std	Z+1, r25	; 0x01
    4668:	a2 83       	std	Z+2, r26	; 0x02
    466a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    466c:	8e 01       	movw	r16, r28
    466e:	07 5a       	subi	r16, 0xA7	; 167
    4670:	1f 4f       	sbci	r17, 0xFF	; 255
    4672:	fe 01       	movw	r30, r28
    4674:	e3 5a       	subi	r30, 0xA3	; 163
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	60 81       	ld	r22, Z
    467a:	71 81       	ldd	r23, Z+1	; 0x01
    467c:	82 81       	ldd	r24, Z+2	; 0x02
    467e:	93 81       	ldd	r25, Z+3	; 0x03
    4680:	2b ea       	ldi	r18, 0xAB	; 171
    4682:	3a ea       	ldi	r19, 0xAA	; 170
    4684:	4a e2       	ldi	r20, 0x2A	; 42
    4686:	50 e4       	ldi	r21, 0x40	; 64
    4688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    468c:	dc 01       	movw	r26, r24
    468e:	cb 01       	movw	r24, r22
    4690:	f8 01       	movw	r30, r16
    4692:	80 83       	st	Z, r24
    4694:	91 83       	std	Z+1, r25	; 0x01
    4696:	a2 83       	std	Z+2, r26	; 0x02
    4698:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    469a:	fe 01       	movw	r30, r28
    469c:	e7 5a       	subi	r30, 0xA7	; 167
    469e:	ff 4f       	sbci	r31, 0xFF	; 255
    46a0:	60 81       	ld	r22, Z
    46a2:	71 81       	ldd	r23, Z+1	; 0x01
    46a4:	82 81       	ldd	r24, Z+2	; 0x02
    46a6:	93 81       	ldd	r25, Z+3	; 0x03
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	40 e8       	ldi	r20, 0x80	; 128
    46ae:	5f e3       	ldi	r21, 0x3F	; 63
    46b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46b4:	88 23       	and	r24, r24
    46b6:	34 f4       	brge	.+12     	; 0x46c4 <LCD_read_data_4bit+0xc0>
		__ticks = 1;
    46b8:	fe 01       	movw	r30, r28
    46ba:	e8 5a       	subi	r30, 0xA8	; 168
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	80 83       	st	Z, r24
    46c2:	e0 c0       	rjmp	.+448    	; 0x4884 <LCD_read_data_4bit+0x280>
	else if (__tmp > 255)
    46c4:	fe 01       	movw	r30, r28
    46c6:	e7 5a       	subi	r30, 0xA7	; 167
    46c8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ca:	60 81       	ld	r22, Z
    46cc:	71 81       	ldd	r23, Z+1	; 0x01
    46ce:	82 81       	ldd	r24, Z+2	; 0x02
    46d0:	93 81       	ldd	r25, Z+3	; 0x03
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	4f e7       	ldi	r20, 0x7F	; 127
    46d8:	53 e4       	ldi	r21, 0x43	; 67
    46da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46de:	18 16       	cp	r1, r24
    46e0:	0c f0       	brlt	.+2      	; 0x46e4 <LCD_read_data_4bit+0xe0>
    46e2:	c0 c0       	rjmp	.+384    	; 0x4864 <LCD_read_data_4bit+0x260>
	{
		_delay_ms(__us / 1000.0);
    46e4:	fe 01       	movw	r30, r28
    46e6:	e3 5a       	subi	r30, 0xA3	; 163
    46e8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ea:	60 81       	ld	r22, Z
    46ec:	71 81       	ldd	r23, Z+1	; 0x01
    46ee:	82 81       	ldd	r24, Z+2	; 0x02
    46f0:	93 81       	ldd	r25, Z+3	; 0x03
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	4a e7       	ldi	r20, 0x7A	; 122
    46f8:	54 e4       	ldi	r21, 0x44	; 68
    46fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    46fe:	dc 01       	movw	r26, r24
    4700:	cb 01       	movw	r24, r22
    4702:	fe 01       	movw	r30, r28
    4704:	ec 5a       	subi	r30, 0xAC	; 172
    4706:	ff 4f       	sbci	r31, 0xFF	; 255
    4708:	80 83       	st	Z, r24
    470a:	91 83       	std	Z+1, r25	; 0x01
    470c:	a2 83       	std	Z+2, r26	; 0x02
    470e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4710:	8e 01       	movw	r16, r28
    4712:	00 5b       	subi	r16, 0xB0	; 176
    4714:	1f 4f       	sbci	r17, 0xFF	; 255
    4716:	fe 01       	movw	r30, r28
    4718:	ec 5a       	subi	r30, 0xAC	; 172
    471a:	ff 4f       	sbci	r31, 0xFF	; 255
    471c:	60 81       	ld	r22, Z
    471e:	71 81       	ldd	r23, Z+1	; 0x01
    4720:	82 81       	ldd	r24, Z+2	; 0x02
    4722:	93 81       	ldd	r25, Z+3	; 0x03
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	4a ef       	ldi	r20, 0xFA	; 250
    472a:	54 e4       	ldi	r21, 0x44	; 68
    472c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4730:	dc 01       	movw	r26, r24
    4732:	cb 01       	movw	r24, r22
    4734:	f8 01       	movw	r30, r16
    4736:	80 83       	st	Z, r24
    4738:	91 83       	std	Z+1, r25	; 0x01
    473a:	a2 83       	std	Z+2, r26	; 0x02
    473c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    473e:	fe 01       	movw	r30, r28
    4740:	e0 5b       	subi	r30, 0xB0	; 176
    4742:	ff 4f       	sbci	r31, 0xFF	; 255
    4744:	60 81       	ld	r22, Z
    4746:	71 81       	ldd	r23, Z+1	; 0x01
    4748:	82 81       	ldd	r24, Z+2	; 0x02
    474a:	93 81       	ldd	r25, Z+3	; 0x03
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	40 e8       	ldi	r20, 0x80	; 128
    4752:	5f e3       	ldi	r21, 0x3F	; 63
    4754:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4758:	88 23       	and	r24, r24
    475a:	44 f4       	brge	.+16     	; 0x476c <LCD_read_data_4bit+0x168>
		__ticks = 1;
    475c:	fe 01       	movw	r30, r28
    475e:	e2 5b       	subi	r30, 0xB2	; 178
    4760:	ff 4f       	sbci	r31, 0xFF	; 255
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	91 83       	std	Z+1, r25	; 0x01
    4768:	80 83       	st	Z, r24
    476a:	64 c0       	rjmp	.+200    	; 0x4834 <LCD_read_data_4bit+0x230>
	else if (__tmp > 65535)
    476c:	fe 01       	movw	r30, r28
    476e:	e0 5b       	subi	r30, 0xB0	; 176
    4770:	ff 4f       	sbci	r31, 0xFF	; 255
    4772:	60 81       	ld	r22, Z
    4774:	71 81       	ldd	r23, Z+1	; 0x01
    4776:	82 81       	ldd	r24, Z+2	; 0x02
    4778:	93 81       	ldd	r25, Z+3	; 0x03
    477a:	20 e0       	ldi	r18, 0x00	; 0
    477c:	3f ef       	ldi	r19, 0xFF	; 255
    477e:	4f e7       	ldi	r20, 0x7F	; 127
    4780:	57 e4       	ldi	r21, 0x47	; 71
    4782:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4786:	18 16       	cp	r1, r24
    4788:	0c f0       	brlt	.+2      	; 0x478c <LCD_read_data_4bit+0x188>
    478a:	43 c0       	rjmp	.+134    	; 0x4812 <LCD_read_data_4bit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    478c:	fe 01       	movw	r30, r28
    478e:	ec 5a       	subi	r30, 0xAC	; 172
    4790:	ff 4f       	sbci	r31, 0xFF	; 255
    4792:	60 81       	ld	r22, Z
    4794:	71 81       	ldd	r23, Z+1	; 0x01
    4796:	82 81       	ldd	r24, Z+2	; 0x02
    4798:	93 81       	ldd	r25, Z+3	; 0x03
    479a:	20 e0       	ldi	r18, 0x00	; 0
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	40 e2       	ldi	r20, 0x20	; 32
    47a0:	51 e4       	ldi	r21, 0x41	; 65
    47a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a6:	dc 01       	movw	r26, r24
    47a8:	cb 01       	movw	r24, r22
    47aa:	8e 01       	movw	r16, r28
    47ac:	02 5b       	subi	r16, 0xB2	; 178
    47ae:	1f 4f       	sbci	r17, 0xFF	; 255
    47b0:	bc 01       	movw	r22, r24
    47b2:	cd 01       	movw	r24, r26
    47b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b8:	dc 01       	movw	r26, r24
    47ba:	cb 01       	movw	r24, r22
    47bc:	f8 01       	movw	r30, r16
    47be:	91 83       	std	Z+1, r25	; 0x01
    47c0:	80 83       	st	Z, r24
    47c2:	1f c0       	rjmp	.+62     	; 0x4802 <LCD_read_data_4bit+0x1fe>
    47c4:	fe 01       	movw	r30, r28
    47c6:	e4 5b       	subi	r30, 0xB4	; 180
    47c8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ca:	88 ec       	ldi	r24, 0xC8	; 200
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	91 83       	std	Z+1, r25	; 0x01
    47d0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    47d2:	fe 01       	movw	r30, r28
    47d4:	e4 5b       	subi	r30, 0xB4	; 180
    47d6:	ff 4f       	sbci	r31, 0xFF	; 255
    47d8:	80 81       	ld	r24, Z
    47da:	91 81       	ldd	r25, Z+1	; 0x01
    47dc:	01 97       	sbiw	r24, 0x01	; 1
    47de:	f1 f7       	brne	.-4      	; 0x47dc <LCD_read_data_4bit+0x1d8>
    47e0:	fe 01       	movw	r30, r28
    47e2:	e4 5b       	subi	r30, 0xB4	; 180
    47e4:	ff 4f       	sbci	r31, 0xFF	; 255
    47e6:	91 83       	std	Z+1, r25	; 0x01
    47e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ea:	de 01       	movw	r26, r28
    47ec:	a2 5b       	subi	r26, 0xB2	; 178
    47ee:	bf 4f       	sbci	r27, 0xFF	; 255
    47f0:	fe 01       	movw	r30, r28
    47f2:	e2 5b       	subi	r30, 0xB2	; 178
    47f4:	ff 4f       	sbci	r31, 0xFF	; 255
    47f6:	80 81       	ld	r24, Z
    47f8:	91 81       	ldd	r25, Z+1	; 0x01
    47fa:	01 97       	sbiw	r24, 0x01	; 1
    47fc:	11 96       	adiw	r26, 0x01	; 1
    47fe:	9c 93       	st	X, r25
    4800:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4802:	fe 01       	movw	r30, r28
    4804:	e2 5b       	subi	r30, 0xB2	; 178
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	80 81       	ld	r24, Z
    480a:	91 81       	ldd	r25, Z+1	; 0x01
    480c:	00 97       	sbiw	r24, 0x00	; 0
    480e:	d1 f6       	brne	.-76     	; 0x47c4 <LCD_read_data_4bit+0x1c0>
    4810:	4b c0       	rjmp	.+150    	; 0x48a8 <LCD_read_data_4bit+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4812:	8e 01       	movw	r16, r28
    4814:	02 5b       	subi	r16, 0xB2	; 178
    4816:	1f 4f       	sbci	r17, 0xFF	; 255
    4818:	fe 01       	movw	r30, r28
    481a:	e0 5b       	subi	r30, 0xB0	; 176
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	60 81       	ld	r22, Z
    4820:	71 81       	ldd	r23, Z+1	; 0x01
    4822:	82 81       	ldd	r24, Z+2	; 0x02
    4824:	93 81       	ldd	r25, Z+3	; 0x03
    4826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    482a:	dc 01       	movw	r26, r24
    482c:	cb 01       	movw	r24, r22
    482e:	f8 01       	movw	r30, r16
    4830:	91 83       	std	Z+1, r25	; 0x01
    4832:	80 83       	st	Z, r24
    4834:	de 01       	movw	r26, r28
    4836:	a6 5b       	subi	r26, 0xB6	; 182
    4838:	bf 4f       	sbci	r27, 0xFF	; 255
    483a:	fe 01       	movw	r30, r28
    483c:	e2 5b       	subi	r30, 0xB2	; 178
    483e:	ff 4f       	sbci	r31, 0xFF	; 255
    4840:	80 81       	ld	r24, Z
    4842:	91 81       	ldd	r25, Z+1	; 0x01
    4844:	11 96       	adiw	r26, 0x01	; 1
    4846:	9c 93       	st	X, r25
    4848:	8e 93       	st	-X, r24
    484a:	fe 01       	movw	r30, r28
    484c:	e6 5b       	subi	r30, 0xB6	; 182
    484e:	ff 4f       	sbci	r31, 0xFF	; 255
    4850:	80 81       	ld	r24, Z
    4852:	91 81       	ldd	r25, Z+1	; 0x01
    4854:	01 97       	sbiw	r24, 0x01	; 1
    4856:	f1 f7       	brne	.-4      	; 0x4854 <LCD_read_data_4bit+0x250>
    4858:	fe 01       	movw	r30, r28
    485a:	e6 5b       	subi	r30, 0xB6	; 182
    485c:	ff 4f       	sbci	r31, 0xFF	; 255
    485e:	91 83       	std	Z+1, r25	; 0x01
    4860:	80 83       	st	Z, r24
    4862:	22 c0       	rjmp	.+68     	; 0x48a8 <LCD_read_data_4bit+0x2a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4864:	8e 01       	movw	r16, r28
    4866:	08 5a       	subi	r16, 0xA8	; 168
    4868:	1f 4f       	sbci	r17, 0xFF	; 255
    486a:	fe 01       	movw	r30, r28
    486c:	e7 5a       	subi	r30, 0xA7	; 167
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	60 81       	ld	r22, Z
    4872:	71 81       	ldd	r23, Z+1	; 0x01
    4874:	82 81       	ldd	r24, Z+2	; 0x02
    4876:	93 81       	ldd	r25, Z+3	; 0x03
    4878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	f8 01       	movw	r30, r16
    4882:	80 83       	st	Z, r24
    4884:	de 01       	movw	r26, r28
    4886:	a7 5b       	subi	r26, 0xB7	; 183
    4888:	bf 4f       	sbci	r27, 0xFF	; 255
    488a:	fe 01       	movw	r30, r28
    488c:	e8 5a       	subi	r30, 0xA8	; 168
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	80 81       	ld	r24, Z
    4892:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4894:	fe 01       	movw	r30, r28
    4896:	e7 5b       	subi	r30, 0xB7	; 183
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	80 81       	ld	r24, Z
    489c:	8a 95       	dec	r24
    489e:	f1 f7       	brne	.-4      	; 0x489c <LCD_read_data_4bit+0x298>
    48a0:	fe 01       	movw	r30, r28
    48a2:	e7 5b       	subi	r30, 0xB7	; 183
    48a4:	ff 4f       	sbci	r31, 0xFF	; 255
    48a6:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to recive the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    48a8:	82 e0       	ldi	r24, 0x02	; 2
    48aa:	60 e0       	ldi	r22, 0x00	; 0
    48ac:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    48b0:	fe 01       	movw	r30, r28
    48b2:	eb 5b       	subi	r30, 0xBB	; 187
    48b4:	ff 4f       	sbci	r31, 0xFF	; 255
    48b6:	80 e0       	ldi	r24, 0x00	; 0
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	a0 e8       	ldi	r26, 0x80	; 128
    48bc:	bf e3       	ldi	r27, 0x3F	; 63
    48be:	80 83       	st	Z, r24
    48c0:	91 83       	std	Z+1, r25	; 0x01
    48c2:	a2 83       	std	Z+2, r26	; 0x02
    48c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    48c6:	8e 01       	movw	r16, r28
    48c8:	0f 5b       	subi	r16, 0xBF	; 191
    48ca:	1f 4f       	sbci	r17, 0xFF	; 255
    48cc:	fe 01       	movw	r30, r28
    48ce:	eb 5b       	subi	r30, 0xBB	; 187
    48d0:	ff 4f       	sbci	r31, 0xFF	; 255
    48d2:	60 81       	ld	r22, Z
    48d4:	71 81       	ldd	r23, Z+1	; 0x01
    48d6:	82 81       	ldd	r24, Z+2	; 0x02
    48d8:	93 81       	ldd	r25, Z+3	; 0x03
    48da:	2b ea       	ldi	r18, 0xAB	; 171
    48dc:	3a ea       	ldi	r19, 0xAA	; 170
    48de:	4a e2       	ldi	r20, 0x2A	; 42
    48e0:	50 e4       	ldi	r21, 0x40	; 64
    48e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e6:	dc 01       	movw	r26, r24
    48e8:	cb 01       	movw	r24, r22
    48ea:	f8 01       	movw	r30, r16
    48ec:	80 83       	st	Z, r24
    48ee:	91 83       	std	Z+1, r25	; 0x01
    48f0:	a2 83       	std	Z+2, r26	; 0x02
    48f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48f4:	fe 01       	movw	r30, r28
    48f6:	ef 5b       	subi	r30, 0xBF	; 191
    48f8:	ff 4f       	sbci	r31, 0xFF	; 255
    48fa:	60 81       	ld	r22, Z
    48fc:	71 81       	ldd	r23, Z+1	; 0x01
    48fe:	82 81       	ldd	r24, Z+2	; 0x02
    4900:	93 81       	ldd	r25, Z+3	; 0x03
    4902:	20 e0       	ldi	r18, 0x00	; 0
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	40 e8       	ldi	r20, 0x80	; 128
    4908:	5f e3       	ldi	r21, 0x3F	; 63
    490a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    490e:	88 23       	and	r24, r24
    4910:	34 f4       	brge	.+12     	; 0x491e <LCD_read_data_4bit+0x31a>
		__ticks = 1;
    4912:	81 e0       	ldi	r24, 0x01	; 1
    4914:	fe 01       	movw	r30, r28
    4916:	e0 5c       	subi	r30, 0xC0	; 192
    4918:	ff 4f       	sbci	r31, 0xFF	; 255
    491a:	80 83       	st	Z, r24
    491c:	9d c0       	rjmp	.+314    	; 0x4a58 <LCD_read_data_4bit+0x454>
	else if (__tmp > 255)
    491e:	fe 01       	movw	r30, r28
    4920:	ef 5b       	subi	r30, 0xBF	; 191
    4922:	ff 4f       	sbci	r31, 0xFF	; 255
    4924:	60 81       	ld	r22, Z
    4926:	71 81       	ldd	r23, Z+1	; 0x01
    4928:	82 81       	ldd	r24, Z+2	; 0x02
    492a:	93 81       	ldd	r25, Z+3	; 0x03
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	4f e7       	ldi	r20, 0x7F	; 127
    4932:	53 e4       	ldi	r21, 0x43	; 67
    4934:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4938:	18 16       	cp	r1, r24
    493a:	0c f0       	brlt	.+2      	; 0x493e <LCD_read_data_4bit+0x33a>
    493c:	7e c0       	rjmp	.+252    	; 0x4a3a <LCD_read_data_4bit+0x436>
	{
		_delay_ms(__us / 1000.0);
    493e:	fe 01       	movw	r30, r28
    4940:	eb 5b       	subi	r30, 0xBB	; 187
    4942:	ff 4f       	sbci	r31, 0xFF	; 255
    4944:	60 81       	ld	r22, Z
    4946:	71 81       	ldd	r23, Z+1	; 0x01
    4948:	82 81       	ldd	r24, Z+2	; 0x02
    494a:	93 81       	ldd	r25, Z+3	; 0x03
    494c:	20 e0       	ldi	r18, 0x00	; 0
    494e:	30 e0       	ldi	r19, 0x00	; 0
    4950:	4a e7       	ldi	r20, 0x7A	; 122
    4952:	54 e4       	ldi	r21, 0x44	; 68
    4954:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4958:	dc 01       	movw	r26, r24
    495a:	cb 01       	movw	r24, r22
    495c:	8c af       	std	Y+60, r24	; 0x3c
    495e:	9d af       	std	Y+61, r25	; 0x3d
    4960:	ae af       	std	Y+62, r26	; 0x3e
    4962:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4964:	6c ad       	ldd	r22, Y+60	; 0x3c
    4966:	7d ad       	ldd	r23, Y+61	; 0x3d
    4968:	8e ad       	ldd	r24, Y+62	; 0x3e
    496a:	9f ad       	ldd	r25, Y+63	; 0x3f
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	4a ef       	ldi	r20, 0xFA	; 250
    4972:	54 e4       	ldi	r21, 0x44	; 68
    4974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4978:	dc 01       	movw	r26, r24
    497a:	cb 01       	movw	r24, r22
    497c:	88 af       	std	Y+56, r24	; 0x38
    497e:	99 af       	std	Y+57, r25	; 0x39
    4980:	aa af       	std	Y+58, r26	; 0x3a
    4982:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4984:	68 ad       	ldd	r22, Y+56	; 0x38
    4986:	79 ad       	ldd	r23, Y+57	; 0x39
    4988:	8a ad       	ldd	r24, Y+58	; 0x3a
    498a:	9b ad       	ldd	r25, Y+59	; 0x3b
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	40 e8       	ldi	r20, 0x80	; 128
    4992:	5f e3       	ldi	r21, 0x3F	; 63
    4994:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4998:	88 23       	and	r24, r24
    499a:	2c f4       	brge	.+10     	; 0x49a6 <LCD_read_data_4bit+0x3a2>
		__ticks = 1;
    499c:	81 e0       	ldi	r24, 0x01	; 1
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	9f ab       	std	Y+55, r25	; 0x37
    49a2:	8e ab       	std	Y+54, r24	; 0x36
    49a4:	3f c0       	rjmp	.+126    	; 0x4a24 <LCD_read_data_4bit+0x420>
	else if (__tmp > 65535)
    49a6:	68 ad       	ldd	r22, Y+56	; 0x38
    49a8:	79 ad       	ldd	r23, Y+57	; 0x39
    49aa:	8a ad       	ldd	r24, Y+58	; 0x3a
    49ac:	9b ad       	ldd	r25, Y+59	; 0x3b
    49ae:	20 e0       	ldi	r18, 0x00	; 0
    49b0:	3f ef       	ldi	r19, 0xFF	; 255
    49b2:	4f e7       	ldi	r20, 0x7F	; 127
    49b4:	57 e4       	ldi	r21, 0x47	; 71
    49b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49ba:	18 16       	cp	r1, r24
    49bc:	4c f5       	brge	.+82     	; 0x4a10 <LCD_read_data_4bit+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49be:	6c ad       	ldd	r22, Y+60	; 0x3c
    49c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    49c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    49c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    49c6:	20 e0       	ldi	r18, 0x00	; 0
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	40 e2       	ldi	r20, 0x20	; 32
    49cc:	51 e4       	ldi	r21, 0x41	; 65
    49ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d2:	dc 01       	movw	r26, r24
    49d4:	cb 01       	movw	r24, r22
    49d6:	bc 01       	movw	r22, r24
    49d8:	cd 01       	movw	r24, r26
    49da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49de:	dc 01       	movw	r26, r24
    49e0:	cb 01       	movw	r24, r22
    49e2:	9f ab       	std	Y+55, r25	; 0x37
    49e4:	8e ab       	std	Y+54, r24	; 0x36
    49e6:	0f c0       	rjmp	.+30     	; 0x4a06 <LCD_read_data_4bit+0x402>
    49e8:	88 ec       	ldi	r24, 0xC8	; 200
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	9d ab       	std	Y+53, r25	; 0x35
    49ee:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    49f0:	8c a9       	ldd	r24, Y+52	; 0x34
    49f2:	9d a9       	ldd	r25, Y+53	; 0x35
    49f4:	01 97       	sbiw	r24, 0x01	; 1
    49f6:	f1 f7       	brne	.-4      	; 0x49f4 <LCD_read_data_4bit+0x3f0>
    49f8:	9d ab       	std	Y+53, r25	; 0x35
    49fa:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49fc:	8e a9       	ldd	r24, Y+54	; 0x36
    49fe:	9f a9       	ldd	r25, Y+55	; 0x37
    4a00:	01 97       	sbiw	r24, 0x01	; 1
    4a02:	9f ab       	std	Y+55, r25	; 0x37
    4a04:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a06:	8e a9       	ldd	r24, Y+54	; 0x36
    4a08:	9f a9       	ldd	r25, Y+55	; 0x37
    4a0a:	00 97       	sbiw	r24, 0x00	; 0
    4a0c:	69 f7       	brne	.-38     	; 0x49e8 <LCD_read_data_4bit+0x3e4>
    4a0e:	2d c0       	rjmp	.+90     	; 0x4a6a <LCD_read_data_4bit+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a10:	68 ad       	ldd	r22, Y+56	; 0x38
    4a12:	79 ad       	ldd	r23, Y+57	; 0x39
    4a14:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a16:	9b ad       	ldd	r25, Y+59	; 0x3b
    4a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	cb 01       	movw	r24, r22
    4a20:	9f ab       	std	Y+55, r25	; 0x37
    4a22:	8e ab       	std	Y+54, r24	; 0x36
    4a24:	8e a9       	ldd	r24, Y+54	; 0x36
    4a26:	9f a9       	ldd	r25, Y+55	; 0x37
    4a28:	9b ab       	std	Y+51, r25	; 0x33
    4a2a:	8a ab       	std	Y+50, r24	; 0x32
    4a2c:	8a a9       	ldd	r24, Y+50	; 0x32
    4a2e:	9b a9       	ldd	r25, Y+51	; 0x33
    4a30:	01 97       	sbiw	r24, 0x01	; 1
    4a32:	f1 f7       	brne	.-4      	; 0x4a30 <LCD_read_data_4bit+0x42c>
    4a34:	9b ab       	std	Y+51, r25	; 0x33
    4a36:	8a ab       	std	Y+50, r24	; 0x32
    4a38:	18 c0       	rjmp	.+48     	; 0x4a6a <LCD_read_data_4bit+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4a3a:	fe 01       	movw	r30, r28
    4a3c:	ef 5b       	subi	r30, 0xBF	; 191
    4a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a40:	60 81       	ld	r22, Z
    4a42:	71 81       	ldd	r23, Z+1	; 0x01
    4a44:	82 81       	ldd	r24, Z+2	; 0x02
    4a46:	93 81       	ldd	r25, Z+3	; 0x03
    4a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a4c:	dc 01       	movw	r26, r24
    4a4e:	cb 01       	movw	r24, r22
    4a50:	fe 01       	movw	r30, r28
    4a52:	e0 5c       	subi	r30, 0xC0	; 192
    4a54:	ff 4f       	sbci	r31, 0xFF	; 255
    4a56:	80 83       	st	Z, r24
    4a58:	fe 01       	movw	r30, r28
    4a5a:	e0 5c       	subi	r30, 0xC0	; 192
    4a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5e:	80 81       	ld	r24, Z
    4a60:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4a62:	89 a9       	ldd	r24, Y+49	; 0x31
    4a64:	8a 95       	dec	r24
    4a66:	f1 f7       	brne	.-4      	; 0x4a64 <LCD_read_data_4bit+0x460>
    4a68:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Recive the higher nipple
	u8 address= (DIO_u8_get_port(lcd_data_port) << 4);
    4a6a:	82 e0       	ldi	r24, 0x02	; 2
    4a6c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <DIO_u8_get_port>
    4a70:	fe 01       	movw	r30, r28
    4a72:	ef 59       	subi	r30, 0x9F	; 159
    4a74:	ff 4f       	sbci	r31, 0xFF	; 255
    4a76:	82 95       	swap	r24
    4a78:	80 7f       	andi	r24, 0xF0	; 240
    4a7a:	80 83       	st	Z, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    4a7c:	82 e0       	ldi	r24, 0x02	; 2
    4a7e:	60 e0       	ldi	r22, 0x00	; 0
    4a80:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
    4a84:	80 e0       	ldi	r24, 0x00	; 0
    4a86:	90 e0       	ldi	r25, 0x00	; 0
    4a88:	a0 e2       	ldi	r26, 0x20	; 32
    4a8a:	b1 e4       	ldi	r27, 0x41	; 65
    4a8c:	8d a7       	std	Y+45, r24	; 0x2d
    4a8e:	9e a7       	std	Y+46, r25	; 0x2e
    4a90:	af a7       	std	Y+47, r26	; 0x2f
    4a92:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4a94:	6d a5       	ldd	r22, Y+45	; 0x2d
    4a96:	7e a5       	ldd	r23, Y+46	; 0x2e
    4a98:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a9a:	98 a9       	ldd	r25, Y+48	; 0x30
    4a9c:	2b ea       	ldi	r18, 0xAB	; 171
    4a9e:	3a ea       	ldi	r19, 0xAA	; 170
    4aa0:	4a e2       	ldi	r20, 0x2A	; 42
    4aa2:	50 e4       	ldi	r21, 0x40	; 64
    4aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aa8:	dc 01       	movw	r26, r24
    4aaa:	cb 01       	movw	r24, r22
    4aac:	89 a7       	std	Y+41, r24	; 0x29
    4aae:	9a a7       	std	Y+42, r25	; 0x2a
    4ab0:	ab a7       	std	Y+43, r26	; 0x2b
    4ab2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4ab4:	69 a5       	ldd	r22, Y+41	; 0x29
    4ab6:	7a a5       	ldd	r23, Y+42	; 0x2a
    4ab8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4aba:	9c a5       	ldd	r25, Y+44	; 0x2c
    4abc:	20 e0       	ldi	r18, 0x00	; 0
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	40 e8       	ldi	r20, 0x80	; 128
    4ac2:	5f e3       	ldi	r21, 0x3F	; 63
    4ac4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ac8:	88 23       	and	r24, r24
    4aca:	1c f4       	brge	.+6      	; 0x4ad2 <LCD_read_data_4bit+0x4ce>
		__ticks = 1;
    4acc:	81 e0       	ldi	r24, 0x01	; 1
    4ace:	88 a7       	std	Y+40, r24	; 0x28
    4ad0:	91 c0       	rjmp	.+290    	; 0x4bf4 <LCD_read_data_4bit+0x5f0>
	else if (__tmp > 255)
    4ad2:	69 a5       	ldd	r22, Y+41	; 0x29
    4ad4:	7a a5       	ldd	r23, Y+42	; 0x2a
    4ad6:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ad8:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ada:	20 e0       	ldi	r18, 0x00	; 0
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	4f e7       	ldi	r20, 0x7F	; 127
    4ae0:	53 e4       	ldi	r21, 0x43	; 67
    4ae2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ae6:	18 16       	cp	r1, r24
    4ae8:	0c f0       	brlt	.+2      	; 0x4aec <LCD_read_data_4bit+0x4e8>
    4aea:	7b c0       	rjmp	.+246    	; 0x4be2 <LCD_read_data_4bit+0x5de>
	{
		_delay_ms(__us / 1000.0);
    4aec:	6d a5       	ldd	r22, Y+45	; 0x2d
    4aee:	7e a5       	ldd	r23, Y+46	; 0x2e
    4af0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4af2:	98 a9       	ldd	r25, Y+48	; 0x30
    4af4:	20 e0       	ldi	r18, 0x00	; 0
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	4a e7       	ldi	r20, 0x7A	; 122
    4afa:	54 e4       	ldi	r21, 0x44	; 68
    4afc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4b00:	dc 01       	movw	r26, r24
    4b02:	cb 01       	movw	r24, r22
    4b04:	8c a3       	std	Y+36, r24	; 0x24
    4b06:	9d a3       	std	Y+37, r25	; 0x25
    4b08:	ae a3       	std	Y+38, r26	; 0x26
    4b0a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b0c:	6c a1       	ldd	r22, Y+36	; 0x24
    4b0e:	7d a1       	ldd	r23, Y+37	; 0x25
    4b10:	8e a1       	ldd	r24, Y+38	; 0x26
    4b12:	9f a1       	ldd	r25, Y+39	; 0x27
    4b14:	20 e0       	ldi	r18, 0x00	; 0
    4b16:	30 e0       	ldi	r19, 0x00	; 0
    4b18:	4a ef       	ldi	r20, 0xFA	; 250
    4b1a:	54 e4       	ldi	r21, 0x44	; 68
    4b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b20:	dc 01       	movw	r26, r24
    4b22:	cb 01       	movw	r24, r22
    4b24:	88 a3       	std	Y+32, r24	; 0x20
    4b26:	99 a3       	std	Y+33, r25	; 0x21
    4b28:	aa a3       	std	Y+34, r26	; 0x22
    4b2a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4b2c:	68 a1       	ldd	r22, Y+32	; 0x20
    4b2e:	79 a1       	ldd	r23, Y+33	; 0x21
    4b30:	8a a1       	ldd	r24, Y+34	; 0x22
    4b32:	9b a1       	ldd	r25, Y+35	; 0x23
    4b34:	20 e0       	ldi	r18, 0x00	; 0
    4b36:	30 e0       	ldi	r19, 0x00	; 0
    4b38:	40 e8       	ldi	r20, 0x80	; 128
    4b3a:	5f e3       	ldi	r21, 0x3F	; 63
    4b3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b40:	88 23       	and	r24, r24
    4b42:	2c f4       	brge	.+10     	; 0x4b4e <LCD_read_data_4bit+0x54a>
		__ticks = 1;
    4b44:	81 e0       	ldi	r24, 0x01	; 1
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	9f 8f       	std	Y+31, r25	; 0x1f
    4b4a:	8e 8f       	std	Y+30, r24	; 0x1e
    4b4c:	3f c0       	rjmp	.+126    	; 0x4bcc <LCD_read_data_4bit+0x5c8>
	else if (__tmp > 65535)
    4b4e:	68 a1       	ldd	r22, Y+32	; 0x20
    4b50:	79 a1       	ldd	r23, Y+33	; 0x21
    4b52:	8a a1       	ldd	r24, Y+34	; 0x22
    4b54:	9b a1       	ldd	r25, Y+35	; 0x23
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	3f ef       	ldi	r19, 0xFF	; 255
    4b5a:	4f e7       	ldi	r20, 0x7F	; 127
    4b5c:	57 e4       	ldi	r21, 0x47	; 71
    4b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b62:	18 16       	cp	r1, r24
    4b64:	4c f5       	brge	.+82     	; 0x4bb8 <LCD_read_data_4bit+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b66:	6c a1       	ldd	r22, Y+36	; 0x24
    4b68:	7d a1       	ldd	r23, Y+37	; 0x25
    4b6a:	8e a1       	ldd	r24, Y+38	; 0x26
    4b6c:	9f a1       	ldd	r25, Y+39	; 0x27
    4b6e:	20 e0       	ldi	r18, 0x00	; 0
    4b70:	30 e0       	ldi	r19, 0x00	; 0
    4b72:	40 e2       	ldi	r20, 0x20	; 32
    4b74:	51 e4       	ldi	r21, 0x41	; 65
    4b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b7a:	dc 01       	movw	r26, r24
    4b7c:	cb 01       	movw	r24, r22
    4b7e:	bc 01       	movw	r22, r24
    4b80:	cd 01       	movw	r24, r26
    4b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b86:	dc 01       	movw	r26, r24
    4b88:	cb 01       	movw	r24, r22
    4b8a:	9f 8f       	std	Y+31, r25	; 0x1f
    4b8c:	8e 8f       	std	Y+30, r24	; 0x1e
    4b8e:	0f c0       	rjmp	.+30     	; 0x4bae <LCD_read_data_4bit+0x5aa>
    4b90:	88 ec       	ldi	r24, 0xC8	; 200
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	9d 8f       	std	Y+29, r25	; 0x1d
    4b96:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4b98:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4b9a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4b9c:	01 97       	sbiw	r24, 0x01	; 1
    4b9e:	f1 f7       	brne	.-4      	; 0x4b9c <LCD_read_data_4bit+0x598>
    4ba0:	9d 8f       	std	Y+29, r25	; 0x1d
    4ba2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ba4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4ba6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4ba8:	01 97       	sbiw	r24, 0x01	; 1
    4baa:	9f 8f       	std	Y+31, r25	; 0x1f
    4bac:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4bb0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4bb2:	00 97       	sbiw	r24, 0x00	; 0
    4bb4:	69 f7       	brne	.-38     	; 0x4b90 <LCD_read_data_4bit+0x58c>
    4bb6:	24 c0       	rjmp	.+72     	; 0x4c00 <LCD_read_data_4bit+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bb8:	68 a1       	ldd	r22, Y+32	; 0x20
    4bba:	79 a1       	ldd	r23, Y+33	; 0x21
    4bbc:	8a a1       	ldd	r24, Y+34	; 0x22
    4bbe:	9b a1       	ldd	r25, Y+35	; 0x23
    4bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bc4:	dc 01       	movw	r26, r24
    4bc6:	cb 01       	movw	r24, r22
    4bc8:	9f 8f       	std	Y+31, r25	; 0x1f
    4bca:	8e 8f       	std	Y+30, r24	; 0x1e
    4bcc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4bce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4bd0:	9b 8f       	std	Y+27, r25	; 0x1b
    4bd2:	8a 8f       	std	Y+26, r24	; 0x1a
    4bd4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4bd6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4bd8:	01 97       	sbiw	r24, 0x01	; 1
    4bda:	f1 f7       	brne	.-4      	; 0x4bd8 <LCD_read_data_4bit+0x5d4>
    4bdc:	9b 8f       	std	Y+27, r25	; 0x1b
    4bde:	8a 8f       	std	Y+26, r24	; 0x1a
    4be0:	0f c0       	rjmp	.+30     	; 0x4c00 <LCD_read_data_4bit+0x5fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4be2:	69 a5       	ldd	r22, Y+41	; 0x29
    4be4:	7a a5       	ldd	r23, Y+42	; 0x2a
    4be6:	8b a5       	ldd	r24, Y+43	; 0x2b
    4be8:	9c a5       	ldd	r25, Y+44	; 0x2c
    4bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bee:	dc 01       	movw	r26, r24
    4bf0:	cb 01       	movw	r24, r22
    4bf2:	88 a7       	std	Y+40, r24	; 0x28
    4bf4:	88 a5       	ldd	r24, Y+40	; 0x28
    4bf6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4bf8:	89 8d       	ldd	r24, Y+25	; 0x19
    4bfa:	8a 95       	dec	r24
    4bfc:	f1 f7       	brne	.-4      	; 0x4bfa <LCD_read_data_4bit+0x5f6>
    4bfe:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to recive the lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    4c00:	82 e0       	ldi	r24, 0x02	; 2
    4c02:	60 e0       	ldi	r22, 0x00	; 0
    4c04:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_void_set_pin>
    4c08:	80 e0       	ldi	r24, 0x00	; 0
    4c0a:	90 e0       	ldi	r25, 0x00	; 0
    4c0c:	a0 e8       	ldi	r26, 0x80	; 128
    4c0e:	bf e3       	ldi	r27, 0x3F	; 63
    4c10:	8d 8b       	std	Y+21, r24	; 0x15
    4c12:	9e 8b       	std	Y+22, r25	; 0x16
    4c14:	af 8b       	std	Y+23, r26	; 0x17
    4c16:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4c18:	6d 89       	ldd	r22, Y+21	; 0x15
    4c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    4c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    4c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    4c20:	2b ea       	ldi	r18, 0xAB	; 171
    4c22:	3a ea       	ldi	r19, 0xAA	; 170
    4c24:	4a e2       	ldi	r20, 0x2A	; 42
    4c26:	50 e4       	ldi	r21, 0x40	; 64
    4c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c2c:	dc 01       	movw	r26, r24
    4c2e:	cb 01       	movw	r24, r22
    4c30:	89 8b       	std	Y+17, r24	; 0x11
    4c32:	9a 8b       	std	Y+18, r25	; 0x12
    4c34:	ab 8b       	std	Y+19, r26	; 0x13
    4c36:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4c38:	69 89       	ldd	r22, Y+17	; 0x11
    4c3a:	7a 89       	ldd	r23, Y+18	; 0x12
    4c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    4c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    4c40:	20 e0       	ldi	r18, 0x00	; 0
    4c42:	30 e0       	ldi	r19, 0x00	; 0
    4c44:	40 e8       	ldi	r20, 0x80	; 128
    4c46:	5f e3       	ldi	r21, 0x3F	; 63
    4c48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c4c:	88 23       	and	r24, r24
    4c4e:	1c f4       	brge	.+6      	; 0x4c56 <LCD_read_data_4bit+0x652>
		__ticks = 1;
    4c50:	81 e0       	ldi	r24, 0x01	; 1
    4c52:	88 8b       	std	Y+16, r24	; 0x10
    4c54:	91 c0       	rjmp	.+290    	; 0x4d78 <LCD_read_data_4bit+0x774>
	else if (__tmp > 255)
    4c56:	69 89       	ldd	r22, Y+17	; 0x11
    4c58:	7a 89       	ldd	r23, Y+18	; 0x12
    4c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    4c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	4f e7       	ldi	r20, 0x7F	; 127
    4c64:	53 e4       	ldi	r21, 0x43	; 67
    4c66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c6a:	18 16       	cp	r1, r24
    4c6c:	0c f0       	brlt	.+2      	; 0x4c70 <LCD_read_data_4bit+0x66c>
    4c6e:	7b c0       	rjmp	.+246    	; 0x4d66 <LCD_read_data_4bit+0x762>
	{
		_delay_ms(__us / 1000.0);
    4c70:	6d 89       	ldd	r22, Y+21	; 0x15
    4c72:	7e 89       	ldd	r23, Y+22	; 0x16
    4c74:	8f 89       	ldd	r24, Y+23	; 0x17
    4c76:	98 8d       	ldd	r25, Y+24	; 0x18
    4c78:	20 e0       	ldi	r18, 0x00	; 0
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	4a e7       	ldi	r20, 0x7A	; 122
    4c7e:	54 e4       	ldi	r21, 0x44	; 68
    4c80:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4c84:	dc 01       	movw	r26, r24
    4c86:	cb 01       	movw	r24, r22
    4c88:	8c 87       	std	Y+12, r24	; 0x0c
    4c8a:	9d 87       	std	Y+13, r25	; 0x0d
    4c8c:	ae 87       	std	Y+14, r26	; 0x0e
    4c8e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c90:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c92:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c94:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c96:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c98:	20 e0       	ldi	r18, 0x00	; 0
    4c9a:	30 e0       	ldi	r19, 0x00	; 0
    4c9c:	4a ef       	ldi	r20, 0xFA	; 250
    4c9e:	54 e4       	ldi	r21, 0x44	; 68
    4ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ca4:	dc 01       	movw	r26, r24
    4ca6:	cb 01       	movw	r24, r22
    4ca8:	88 87       	std	Y+8, r24	; 0x08
    4caa:	99 87       	std	Y+9, r25	; 0x09
    4cac:	aa 87       	std	Y+10, r26	; 0x0a
    4cae:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4cb0:	68 85       	ldd	r22, Y+8	; 0x08
    4cb2:	79 85       	ldd	r23, Y+9	; 0x09
    4cb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cb8:	20 e0       	ldi	r18, 0x00	; 0
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	40 e8       	ldi	r20, 0x80	; 128
    4cbe:	5f e3       	ldi	r21, 0x3F	; 63
    4cc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cc4:	88 23       	and	r24, r24
    4cc6:	2c f4       	brge	.+10     	; 0x4cd2 <LCD_read_data_4bit+0x6ce>
		__ticks = 1;
    4cc8:	81 e0       	ldi	r24, 0x01	; 1
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	9f 83       	std	Y+7, r25	; 0x07
    4cce:	8e 83       	std	Y+6, r24	; 0x06
    4cd0:	3f c0       	rjmp	.+126    	; 0x4d50 <LCD_read_data_4bit+0x74c>
	else if (__tmp > 65535)
    4cd2:	68 85       	ldd	r22, Y+8	; 0x08
    4cd4:	79 85       	ldd	r23, Y+9	; 0x09
    4cd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cda:	20 e0       	ldi	r18, 0x00	; 0
    4cdc:	3f ef       	ldi	r19, 0xFF	; 255
    4cde:	4f e7       	ldi	r20, 0x7F	; 127
    4ce0:	57 e4       	ldi	r21, 0x47	; 71
    4ce2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ce6:	18 16       	cp	r1, r24
    4ce8:	4c f5       	brge	.+82     	; 0x4d3c <LCD_read_data_4bit+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cea:	6c 85       	ldd	r22, Y+12	; 0x0c
    4cec:	7d 85       	ldd	r23, Y+13	; 0x0d
    4cee:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cf0:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cf2:	20 e0       	ldi	r18, 0x00	; 0
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
    4cf6:	40 e2       	ldi	r20, 0x20	; 32
    4cf8:	51 e4       	ldi	r21, 0x41	; 65
    4cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cfe:	dc 01       	movw	r26, r24
    4d00:	cb 01       	movw	r24, r22
    4d02:	bc 01       	movw	r22, r24
    4d04:	cd 01       	movw	r24, r26
    4d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d0a:	dc 01       	movw	r26, r24
    4d0c:	cb 01       	movw	r24, r22
    4d0e:	9f 83       	std	Y+7, r25	; 0x07
    4d10:	8e 83       	std	Y+6, r24	; 0x06
    4d12:	0f c0       	rjmp	.+30     	; 0x4d32 <LCD_read_data_4bit+0x72e>
    4d14:	88 ec       	ldi	r24, 0xC8	; 200
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	9d 83       	std	Y+5, r25	; 0x05
    4d1a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4d1c:	8c 81       	ldd	r24, Y+4	; 0x04
    4d1e:	9d 81       	ldd	r25, Y+5	; 0x05
    4d20:	01 97       	sbiw	r24, 0x01	; 1
    4d22:	f1 f7       	brne	.-4      	; 0x4d20 <LCD_read_data_4bit+0x71c>
    4d24:	9d 83       	std	Y+5, r25	; 0x05
    4d26:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d28:	8e 81       	ldd	r24, Y+6	; 0x06
    4d2a:	9f 81       	ldd	r25, Y+7	; 0x07
    4d2c:	01 97       	sbiw	r24, 0x01	; 1
    4d2e:	9f 83       	std	Y+7, r25	; 0x07
    4d30:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d32:	8e 81       	ldd	r24, Y+6	; 0x06
    4d34:	9f 81       	ldd	r25, Y+7	; 0x07
    4d36:	00 97       	sbiw	r24, 0x00	; 0
    4d38:	69 f7       	brne	.-38     	; 0x4d14 <LCD_read_data_4bit+0x710>
    4d3a:	24 c0       	rjmp	.+72     	; 0x4d84 <LCD_read_data_4bit+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d3c:	68 85       	ldd	r22, Y+8	; 0x08
    4d3e:	79 85       	ldd	r23, Y+9	; 0x09
    4d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d48:	dc 01       	movw	r26, r24
    4d4a:	cb 01       	movw	r24, r22
    4d4c:	9f 83       	std	Y+7, r25	; 0x07
    4d4e:	8e 83       	std	Y+6, r24	; 0x06
    4d50:	8e 81       	ldd	r24, Y+6	; 0x06
    4d52:	9f 81       	ldd	r25, Y+7	; 0x07
    4d54:	9b 83       	std	Y+3, r25	; 0x03
    4d56:	8a 83       	std	Y+2, r24	; 0x02
    4d58:	8a 81       	ldd	r24, Y+2	; 0x02
    4d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d5c:	01 97       	sbiw	r24, 0x01	; 1
    4d5e:	f1 f7       	brne	.-4      	; 0x4d5c <LCD_read_data_4bit+0x758>
    4d60:	9b 83       	std	Y+3, r25	; 0x03
    4d62:	8a 83       	std	Y+2, r24	; 0x02
    4d64:	0f c0       	rjmp	.+30     	; 0x4d84 <LCD_read_data_4bit+0x780>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4d66:	69 89       	ldd	r22, Y+17	; 0x11
    4d68:	7a 89       	ldd	r23, Y+18	; 0x12
    4d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    4d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d72:	dc 01       	movw	r26, r24
    4d74:	cb 01       	movw	r24, r22
    4d76:	88 8b       	std	Y+16, r24	; 0x10
    4d78:	88 89       	ldd	r24, Y+16	; 0x10
    4d7a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4d7c:	89 81       	ldd	r24, Y+1	; 0x01
    4d7e:	8a 95       	dec	r24
    4d80:	f1 f7       	brne	.-4      	; 0x4d7e <LCD_read_data_4bit+0x77a>
    4d82:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the lower nipple
	address|= DIO_u8_get_port(lcd_data_port);
    4d84:	82 e0       	ldi	r24, 0x02	; 2
    4d86:	0e 94 57 0b 	call	0x16ae	; 0x16ae <DIO_u8_get_port>
    4d8a:	98 2f       	mov	r25, r24
    4d8c:	de 01       	movw	r26, r28
    4d8e:	af 59       	subi	r26, 0x9F	; 159
    4d90:	bf 4f       	sbci	r27, 0xFF	; 255
    4d92:	fe 01       	movw	r30, r28
    4d94:	ef 59       	subi	r30, 0x9F	; 159
    4d96:	ff 4f       	sbci	r31, 0xFF	; 255
    4d98:	80 81       	ld	r24, Z
    4d9a:	89 2b       	or	r24, r25
    4d9c:	8c 93       	st	X, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    4d9e:	82 e0       	ldi	r24, 0x02	; 2
    4da0:	60 e0       	ldi	r22, 0x00	; 0
    4da2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    4da6:	de 01       	movw	r26, r28
    4da8:	af 59       	subi	r26, 0x9F	; 159
    4daa:	bf 4f       	sbci	r27, 0xFF	; 255
    4dac:	fe 01       	movw	r30, r28
    4dae:	ef 59       	subi	r30, 0x9F	; 159
    4db0:	ff 4f       	sbci	r31, 0xFF	; 255
    4db2:	80 81       	ld	r24, Z
    4db4:	8f 77       	andi	r24, 0x7F	; 127
    4db6:	8c 93       	st	X, r24
	// Configure the data pins back to output
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    4db8:	82 e0       	ldi	r24, 0x02	; 2
    4dba:	67 e0       	ldi	r22, 0x07	; 7
    4dbc:	41 e0       	ldi	r20, 0x01	; 1
    4dbe:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    4dc2:	82 e0       	ldi	r24, 0x02	; 2
    4dc4:	66 e0       	ldi	r22, 0x06	; 6
    4dc6:	41 e0       	ldi	r20, 0x01	; 1
    4dc8:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    4dcc:	82 e0       	ldi	r24, 0x02	; 2
    4dce:	65 e0       	ldi	r22, 0x05	; 5
    4dd0:	41 e0       	ldi	r20, 0x01	; 1
    4dd2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    4dd6:	82 e0       	ldi	r24, 0x02	; 2
    4dd8:	64 e0       	ldi	r22, 0x04	; 4
    4dda:	41 e0       	ldi	r20, 0x01	; 1
    4ddc:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	// Return the current address
	return address;
    4de0:	fe 01       	movw	r30, r28
    4de2:	ef 59       	subi	r30, 0x9F	; 159
    4de4:	ff 4f       	sbci	r31, 0xFF	; 255
    4de6:	80 81       	ld	r24, Z
}
    4de8:	cf 59       	subi	r28, 0x9F	; 159
    4dea:	df 4f       	sbci	r29, 0xFF	; 255
    4dec:	0f b6       	in	r0, 0x3f	; 63
    4dee:	f8 94       	cli
    4df0:	de bf       	out	0x3e, r29	; 62
    4df2:	0f be       	out	0x3f, r0	; 63
    4df4:	cd bf       	out	0x3d, r28	; 61
    4df6:	cf 91       	pop	r28
    4df8:	df 91       	pop	r29
    4dfa:	1f 91       	pop	r17
    4dfc:	0f 91       	pop	r16
    4dfe:	08 95       	ret

00004e00 <LCD_init>:


/******************************************************************************/

/* User interfacing functions implementation */
void LCD_init(void){
    4e00:	0f 93       	push	r16
    4e02:	1f 93       	push	r17
    4e04:	df 93       	push	r29
    4e06:	cf 93       	push	r28
    4e08:	cd b7       	in	r28, 0x3d	; 61
    4e0a:	de b7       	in	r29, 0x3e	; 62
    4e0c:	cc 54       	subi	r28, 0x4C	; 76
    4e0e:	d0 40       	sbci	r29, 0x00	; 0
    4e10:	0f b6       	in	r0, 0x3f	; 63
    4e12:	f8 94       	cli
    4e14:	de bf       	out	0x3e, r29	; 62
    4e16:	0f be       	out	0x3f, r0	; 63
    4e18:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_clear);
	// Wait more than 1.53 ms
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Configure the I/O Data pins
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    4e1a:	82 e0       	ldi	r24, 0x02	; 2
    4e1c:	67 e0       	ldi	r22, 0x07	; 7
    4e1e:	41 e0       	ldi	r20, 0x01	; 1
    4e20:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    4e24:	82 e0       	ldi	r24, 0x02	; 2
    4e26:	66 e0       	ldi	r22, 0x06	; 6
    4e28:	41 e0       	ldi	r20, 0x01	; 1
    4e2a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    4e2e:	82 e0       	ldi	r24, 0x02	; 2
    4e30:	65 e0       	ldi	r22, 0x05	; 5
    4e32:	41 e0       	ldi	r20, 0x01	; 1
    4e34:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    4e38:	82 e0       	ldi	r24, 0x02	; 2
    4e3a:	64 e0       	ldi	r22, 0x04	; 4
    4e3c:	41 e0       	ldi	r20, 0x01	; 1
    4e3e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	// Configure the I/O control pins
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_EN, OUTPUT);
    4e42:	82 e0       	ldi	r24, 0x02	; 2
    4e44:	60 e0       	ldi	r22, 0x00	; 0
    4e46:	41 e0       	ldi	r20, 0x01	; 1
    4e48:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RW, OUTPUT);
    4e4c:	82 e0       	ldi	r24, 0x02	; 2
    4e4e:	61 e0       	ldi	r22, 0x01	; 1
    4e50:	41 e0       	ldi	r20, 0x01	; 1
    4e52:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RS, OUTPUT);
    4e56:	82 e0       	ldi	r24, 0x02	; 2
    4e58:	62 e0       	ldi	r22, 0x02	; 2
    4e5a:	41 e0       	ldi	r20, 0x01	; 1
    4e5c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_void_set_pin_dir>
    4e60:	fe 01       	movw	r30, r28
    4e62:	e7 5b       	subi	r30, 0xB7	; 183
    4e64:	ff 4f       	sbci	r31, 0xFF	; 255
    4e66:	80 e0       	ldi	r24, 0x00	; 0
    4e68:	90 e0       	ldi	r25, 0x00	; 0
    4e6a:	a8 e4       	ldi	r26, 0x48	; 72
    4e6c:	b2 e4       	ldi	r27, 0x42	; 66
    4e6e:	80 83       	st	Z, r24
    4e70:	91 83       	std	Z+1, r25	; 0x01
    4e72:	a2 83       	std	Z+2, r26	; 0x02
    4e74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e76:	8e 01       	movw	r16, r28
    4e78:	0b 5b       	subi	r16, 0xBB	; 187
    4e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	e7 5b       	subi	r30, 0xB7	; 183
    4e80:	ff 4f       	sbci	r31, 0xFF	; 255
    4e82:	60 81       	ld	r22, Z
    4e84:	71 81       	ldd	r23, Z+1	; 0x01
    4e86:	82 81       	ldd	r24, Z+2	; 0x02
    4e88:	93 81       	ldd	r25, Z+3	; 0x03
    4e8a:	20 e0       	ldi	r18, 0x00	; 0
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	4a ef       	ldi	r20, 0xFA	; 250
    4e90:	54 e4       	ldi	r21, 0x44	; 68
    4e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e96:	dc 01       	movw	r26, r24
    4e98:	cb 01       	movw	r24, r22
    4e9a:	f8 01       	movw	r30, r16
    4e9c:	80 83       	st	Z, r24
    4e9e:	91 83       	std	Z+1, r25	; 0x01
    4ea0:	a2 83       	std	Z+2, r26	; 0x02
    4ea2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ea4:	fe 01       	movw	r30, r28
    4ea6:	eb 5b       	subi	r30, 0xBB	; 187
    4ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eaa:	60 81       	ld	r22, Z
    4eac:	71 81       	ldd	r23, Z+1	; 0x01
    4eae:	82 81       	ldd	r24, Z+2	; 0x02
    4eb0:	93 81       	ldd	r25, Z+3	; 0x03
    4eb2:	20 e0       	ldi	r18, 0x00	; 0
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	40 e8       	ldi	r20, 0x80	; 128
    4eb8:	5f e3       	ldi	r21, 0x3F	; 63
    4eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ebe:	88 23       	and	r24, r24
    4ec0:	44 f4       	brge	.+16     	; 0x4ed2 <LCD_init+0xd2>
		__ticks = 1;
    4ec2:	fe 01       	movw	r30, r28
    4ec4:	ed 5b       	subi	r30, 0xBD	; 189
    4ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec8:	81 e0       	ldi	r24, 0x01	; 1
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	91 83       	std	Z+1, r25	; 0x01
    4ece:	80 83       	st	Z, r24
    4ed0:	64 c0       	rjmp	.+200    	; 0x4f9a <LCD_init+0x19a>
	else if (__tmp > 65535)
    4ed2:	fe 01       	movw	r30, r28
    4ed4:	eb 5b       	subi	r30, 0xBB	; 187
    4ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed8:	60 81       	ld	r22, Z
    4eda:	71 81       	ldd	r23, Z+1	; 0x01
    4edc:	82 81       	ldd	r24, Z+2	; 0x02
    4ede:	93 81       	ldd	r25, Z+3	; 0x03
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	3f ef       	ldi	r19, 0xFF	; 255
    4ee4:	4f e7       	ldi	r20, 0x7F	; 127
    4ee6:	57 e4       	ldi	r21, 0x47	; 71
    4ee8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eec:	18 16       	cp	r1, r24
    4eee:	0c f0       	brlt	.+2      	; 0x4ef2 <LCD_init+0xf2>
    4ef0:	43 c0       	rjmp	.+134    	; 0x4f78 <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ef2:	fe 01       	movw	r30, r28
    4ef4:	e7 5b       	subi	r30, 0xB7	; 183
    4ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef8:	60 81       	ld	r22, Z
    4efa:	71 81       	ldd	r23, Z+1	; 0x01
    4efc:	82 81       	ldd	r24, Z+2	; 0x02
    4efe:	93 81       	ldd	r25, Z+3	; 0x03
    4f00:	20 e0       	ldi	r18, 0x00	; 0
    4f02:	30 e0       	ldi	r19, 0x00	; 0
    4f04:	40 e2       	ldi	r20, 0x20	; 32
    4f06:	51 e4       	ldi	r21, 0x41	; 65
    4f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f0c:	dc 01       	movw	r26, r24
    4f0e:	cb 01       	movw	r24, r22
    4f10:	8e 01       	movw	r16, r28
    4f12:	0d 5b       	subi	r16, 0xBD	; 189
    4f14:	1f 4f       	sbci	r17, 0xFF	; 255
    4f16:	bc 01       	movw	r22, r24
    4f18:	cd 01       	movw	r24, r26
    4f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f1e:	dc 01       	movw	r26, r24
    4f20:	cb 01       	movw	r24, r22
    4f22:	f8 01       	movw	r30, r16
    4f24:	91 83       	std	Z+1, r25	; 0x01
    4f26:	80 83       	st	Z, r24
    4f28:	1f c0       	rjmp	.+62     	; 0x4f68 <LCD_init+0x168>
    4f2a:	fe 01       	movw	r30, r28
    4f2c:	ef 5b       	subi	r30, 0xBF	; 191
    4f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f30:	88 ec       	ldi	r24, 0xC8	; 200
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	91 83       	std	Z+1, r25	; 0x01
    4f36:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4f38:	fe 01       	movw	r30, r28
    4f3a:	ef 5b       	subi	r30, 0xBF	; 191
    4f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3e:	80 81       	ld	r24, Z
    4f40:	91 81       	ldd	r25, Z+1	; 0x01
    4f42:	01 97       	sbiw	r24, 0x01	; 1
    4f44:	f1 f7       	brne	.-4      	; 0x4f42 <LCD_init+0x142>
    4f46:	fe 01       	movw	r30, r28
    4f48:	ef 5b       	subi	r30, 0xBF	; 191
    4f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4c:	91 83       	std	Z+1, r25	; 0x01
    4f4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f50:	de 01       	movw	r26, r28
    4f52:	ad 5b       	subi	r26, 0xBD	; 189
    4f54:	bf 4f       	sbci	r27, 0xFF	; 255
    4f56:	fe 01       	movw	r30, r28
    4f58:	ed 5b       	subi	r30, 0xBD	; 189
    4f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5c:	80 81       	ld	r24, Z
    4f5e:	91 81       	ldd	r25, Z+1	; 0x01
    4f60:	01 97       	sbiw	r24, 0x01	; 1
    4f62:	11 96       	adiw	r26, 0x01	; 1
    4f64:	9c 93       	st	X, r25
    4f66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f68:	fe 01       	movw	r30, r28
    4f6a:	ed 5b       	subi	r30, 0xBD	; 189
    4f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6e:	80 81       	ld	r24, Z
    4f70:	91 81       	ldd	r25, Z+1	; 0x01
    4f72:	00 97       	sbiw	r24, 0x00	; 0
    4f74:	d1 f6       	brne	.-76     	; 0x4f2a <LCD_init+0x12a>
    4f76:	24 c0       	rjmp	.+72     	; 0x4fc0 <LCD_init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f78:	8e 01       	movw	r16, r28
    4f7a:	0d 5b       	subi	r16, 0xBD	; 189
    4f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f7e:	fe 01       	movw	r30, r28
    4f80:	eb 5b       	subi	r30, 0xBB	; 187
    4f82:	ff 4f       	sbci	r31, 0xFF	; 255
    4f84:	60 81       	ld	r22, Z
    4f86:	71 81       	ldd	r23, Z+1	; 0x01
    4f88:	82 81       	ldd	r24, Z+2	; 0x02
    4f8a:	93 81       	ldd	r25, Z+3	; 0x03
    4f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f90:	dc 01       	movw	r26, r24
    4f92:	cb 01       	movw	r24, r22
    4f94:	f8 01       	movw	r30, r16
    4f96:	91 83       	std	Z+1, r25	; 0x01
    4f98:	80 83       	st	Z, r24
    4f9a:	fe 01       	movw	r30, r28
    4f9c:	ed 5b       	subi	r30, 0xBD	; 189
    4f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa0:	80 81       	ld	r24, Z
    4fa2:	91 81       	ldd	r25, Z+1	; 0x01
    4fa4:	fe 01       	movw	r30, r28
    4fa6:	ff 96       	adiw	r30, 0x3f	; 63
    4fa8:	91 83       	std	Z+1, r25	; 0x01
    4faa:	80 83       	st	Z, r24
    4fac:	fe 01       	movw	r30, r28
    4fae:	ff 96       	adiw	r30, 0x3f	; 63
    4fb0:	80 81       	ld	r24, Z
    4fb2:	91 81       	ldd	r25, Z+1	; 0x01
    4fb4:	01 97       	sbiw	r24, 0x01	; 1
    4fb6:	f1 f7       	brne	.-4      	; 0x4fb4 <LCD_init+0x1b4>
    4fb8:	fe 01       	movw	r30, r28
    4fba:	ff 96       	adiw	r30, 0x3f	; 63
    4fbc:	91 83       	std	Z+1, r25	; 0x01
    4fbe:	80 83       	st	Z, r24

	// Wait more than 30 ms
	_delay_ms(50);
	// Send the function set command
	LCD_function_set_4bit();
    4fc0:	0e 94 42 1b 	call	0x3684	; 0x3684 <LCD_function_set_4bit>
    4fc4:	80 e0       	ldi	r24, 0x00	; 0
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	a8 e4       	ldi	r26, 0x48	; 72
    4fca:	b2 e4       	ldi	r27, 0x42	; 66
    4fcc:	8b af       	std	Y+59, r24	; 0x3b
    4fce:	9c af       	std	Y+60, r25	; 0x3c
    4fd0:	ad af       	std	Y+61, r26	; 0x3d
    4fd2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4fd4:	6b ad       	ldd	r22, Y+59	; 0x3b
    4fd6:	7c ad       	ldd	r23, Y+60	; 0x3c
    4fd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fda:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fdc:	2b ea       	ldi	r18, 0xAB	; 171
    4fde:	3a ea       	ldi	r19, 0xAA	; 170
    4fe0:	4a e2       	ldi	r20, 0x2A	; 42
    4fe2:	50 e4       	ldi	r21, 0x40	; 64
    4fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fe8:	dc 01       	movw	r26, r24
    4fea:	cb 01       	movw	r24, r22
    4fec:	8f ab       	std	Y+55, r24	; 0x37
    4fee:	98 af       	std	Y+56, r25	; 0x38
    4ff0:	a9 af       	std	Y+57, r26	; 0x39
    4ff2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    4ff4:	6f a9       	ldd	r22, Y+55	; 0x37
    4ff6:	78 ad       	ldd	r23, Y+56	; 0x38
    4ff8:	89 ad       	ldd	r24, Y+57	; 0x39
    4ffa:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ffc:	20 e0       	ldi	r18, 0x00	; 0
    4ffe:	30 e0       	ldi	r19, 0x00	; 0
    5000:	40 e8       	ldi	r20, 0x80	; 128
    5002:	5f e3       	ldi	r21, 0x3F	; 63
    5004:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5008:	88 23       	and	r24, r24
    500a:	1c f4       	brge	.+6      	; 0x5012 <LCD_init+0x212>
		__ticks = 1;
    500c:	81 e0       	ldi	r24, 0x01	; 1
    500e:	8e ab       	std	Y+54, r24	; 0x36
    5010:	91 c0       	rjmp	.+290    	; 0x5134 <LCD_init+0x334>
	else if (__tmp > 255)
    5012:	6f a9       	ldd	r22, Y+55	; 0x37
    5014:	78 ad       	ldd	r23, Y+56	; 0x38
    5016:	89 ad       	ldd	r24, Y+57	; 0x39
    5018:	9a ad       	ldd	r25, Y+58	; 0x3a
    501a:	20 e0       	ldi	r18, 0x00	; 0
    501c:	30 e0       	ldi	r19, 0x00	; 0
    501e:	4f e7       	ldi	r20, 0x7F	; 127
    5020:	53 e4       	ldi	r21, 0x43	; 67
    5022:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5026:	18 16       	cp	r1, r24
    5028:	0c f0       	brlt	.+2      	; 0x502c <LCD_init+0x22c>
    502a:	7b c0       	rjmp	.+246    	; 0x5122 <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    502c:	6b ad       	ldd	r22, Y+59	; 0x3b
    502e:	7c ad       	ldd	r23, Y+60	; 0x3c
    5030:	8d ad       	ldd	r24, Y+61	; 0x3d
    5032:	9e ad       	ldd	r25, Y+62	; 0x3e
    5034:	20 e0       	ldi	r18, 0x00	; 0
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	4a e7       	ldi	r20, 0x7A	; 122
    503a:	54 e4       	ldi	r21, 0x44	; 68
    503c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5040:	dc 01       	movw	r26, r24
    5042:	cb 01       	movw	r24, r22
    5044:	8a ab       	std	Y+50, r24	; 0x32
    5046:	9b ab       	std	Y+51, r25	; 0x33
    5048:	ac ab       	std	Y+52, r26	; 0x34
    504a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    504c:	6a a9       	ldd	r22, Y+50	; 0x32
    504e:	7b a9       	ldd	r23, Y+51	; 0x33
    5050:	8c a9       	ldd	r24, Y+52	; 0x34
    5052:	9d a9       	ldd	r25, Y+53	; 0x35
    5054:	20 e0       	ldi	r18, 0x00	; 0
    5056:	30 e0       	ldi	r19, 0x00	; 0
    5058:	4a ef       	ldi	r20, 0xFA	; 250
    505a:	54 e4       	ldi	r21, 0x44	; 68
    505c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5060:	dc 01       	movw	r26, r24
    5062:	cb 01       	movw	r24, r22
    5064:	8e a7       	std	Y+46, r24	; 0x2e
    5066:	9f a7       	std	Y+47, r25	; 0x2f
    5068:	a8 ab       	std	Y+48, r26	; 0x30
    506a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    506c:	6e a5       	ldd	r22, Y+46	; 0x2e
    506e:	7f a5       	ldd	r23, Y+47	; 0x2f
    5070:	88 a9       	ldd	r24, Y+48	; 0x30
    5072:	99 a9       	ldd	r25, Y+49	; 0x31
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	40 e8       	ldi	r20, 0x80	; 128
    507a:	5f e3       	ldi	r21, 0x3F	; 63
    507c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5080:	88 23       	and	r24, r24
    5082:	2c f4       	brge	.+10     	; 0x508e <LCD_init+0x28e>
		__ticks = 1;
    5084:	81 e0       	ldi	r24, 0x01	; 1
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	9d a7       	std	Y+45, r25	; 0x2d
    508a:	8c a7       	std	Y+44, r24	; 0x2c
    508c:	3f c0       	rjmp	.+126    	; 0x510c <LCD_init+0x30c>
	else if (__tmp > 65535)
    508e:	6e a5       	ldd	r22, Y+46	; 0x2e
    5090:	7f a5       	ldd	r23, Y+47	; 0x2f
    5092:	88 a9       	ldd	r24, Y+48	; 0x30
    5094:	99 a9       	ldd	r25, Y+49	; 0x31
    5096:	20 e0       	ldi	r18, 0x00	; 0
    5098:	3f ef       	ldi	r19, 0xFF	; 255
    509a:	4f e7       	ldi	r20, 0x7F	; 127
    509c:	57 e4       	ldi	r21, 0x47	; 71
    509e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50a2:	18 16       	cp	r1, r24
    50a4:	4c f5       	brge	.+82     	; 0x50f8 <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50a6:	6a a9       	ldd	r22, Y+50	; 0x32
    50a8:	7b a9       	ldd	r23, Y+51	; 0x33
    50aa:	8c a9       	ldd	r24, Y+52	; 0x34
    50ac:	9d a9       	ldd	r25, Y+53	; 0x35
    50ae:	20 e0       	ldi	r18, 0x00	; 0
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	40 e2       	ldi	r20, 0x20	; 32
    50b4:	51 e4       	ldi	r21, 0x41	; 65
    50b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50ba:	dc 01       	movw	r26, r24
    50bc:	cb 01       	movw	r24, r22
    50be:	bc 01       	movw	r22, r24
    50c0:	cd 01       	movw	r24, r26
    50c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c6:	dc 01       	movw	r26, r24
    50c8:	cb 01       	movw	r24, r22
    50ca:	9d a7       	std	Y+45, r25	; 0x2d
    50cc:	8c a7       	std	Y+44, r24	; 0x2c
    50ce:	0f c0       	rjmp	.+30     	; 0x50ee <LCD_init+0x2ee>
    50d0:	88 ec       	ldi	r24, 0xC8	; 200
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	9b a7       	std	Y+43, r25	; 0x2b
    50d6:	8a a7       	std	Y+42, r24	; 0x2a
    50d8:	8a a5       	ldd	r24, Y+42	; 0x2a
    50da:	9b a5       	ldd	r25, Y+43	; 0x2b
    50dc:	01 97       	sbiw	r24, 0x01	; 1
    50de:	f1 f7       	brne	.-4      	; 0x50dc <LCD_init+0x2dc>
    50e0:	9b a7       	std	Y+43, r25	; 0x2b
    50e2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    50e6:	9d a5       	ldd	r25, Y+45	; 0x2d
    50e8:	01 97       	sbiw	r24, 0x01	; 1
    50ea:	9d a7       	std	Y+45, r25	; 0x2d
    50ec:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ee:	8c a5       	ldd	r24, Y+44	; 0x2c
    50f0:	9d a5       	ldd	r25, Y+45	; 0x2d
    50f2:	00 97       	sbiw	r24, 0x00	; 0
    50f4:	69 f7       	brne	.-38     	; 0x50d0 <LCD_init+0x2d0>
    50f6:	24 c0       	rjmp	.+72     	; 0x5140 <LCD_init+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50f8:	6e a5       	ldd	r22, Y+46	; 0x2e
    50fa:	7f a5       	ldd	r23, Y+47	; 0x2f
    50fc:	88 a9       	ldd	r24, Y+48	; 0x30
    50fe:	99 a9       	ldd	r25, Y+49	; 0x31
    5100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5104:	dc 01       	movw	r26, r24
    5106:	cb 01       	movw	r24, r22
    5108:	9d a7       	std	Y+45, r25	; 0x2d
    510a:	8c a7       	std	Y+44, r24	; 0x2c
    510c:	8c a5       	ldd	r24, Y+44	; 0x2c
    510e:	9d a5       	ldd	r25, Y+45	; 0x2d
    5110:	99 a7       	std	Y+41, r25	; 0x29
    5112:	88 a7       	std	Y+40, r24	; 0x28
    5114:	88 a5       	ldd	r24, Y+40	; 0x28
    5116:	99 a5       	ldd	r25, Y+41	; 0x29
    5118:	01 97       	sbiw	r24, 0x01	; 1
    511a:	f1 f7       	brne	.-4      	; 0x5118 <LCD_init+0x318>
    511c:	99 a7       	std	Y+41, r25	; 0x29
    511e:	88 a7       	std	Y+40, r24	; 0x28
    5120:	0f c0       	rjmp	.+30     	; 0x5140 <LCD_init+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5122:	6f a9       	ldd	r22, Y+55	; 0x37
    5124:	78 ad       	ldd	r23, Y+56	; 0x38
    5126:	89 ad       	ldd	r24, Y+57	; 0x39
    5128:	9a ad       	ldd	r25, Y+58	; 0x3a
    512a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    512e:	dc 01       	movw	r26, r24
    5130:	cb 01       	movw	r24, r22
    5132:	8e ab       	std	Y+54, r24	; 0x36
    5134:	8e a9       	ldd	r24, Y+54	; 0x36
    5136:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5138:	8f a1       	ldd	r24, Y+39	; 0x27
    513a:	8a 95       	dec	r24
    513c:	f1 f7       	brne	.-4      	; 0x513a <LCD_init+0x33a>
    513e:	8f a3       	std	Y+39, r24	; 0x27
	// Wait more than 39 us
	_delay_us(50);
	// Send the display on command
	LCD_write_cmd_4bit(display_on);
    5140:	8c e0       	ldi	r24, 0x0C	; 12
    5142:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <LCD_write_cmd_4bit>
    5146:	80 e0       	ldi	r24, 0x00	; 0
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	a8 e4       	ldi	r26, 0x48	; 72
    514c:	b2 e4       	ldi	r27, 0x42	; 66
    514e:	8b a3       	std	Y+35, r24	; 0x23
    5150:	9c a3       	std	Y+36, r25	; 0x24
    5152:	ad a3       	std	Y+37, r26	; 0x25
    5154:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5156:	6b a1       	ldd	r22, Y+35	; 0x23
    5158:	7c a1       	ldd	r23, Y+36	; 0x24
    515a:	8d a1       	ldd	r24, Y+37	; 0x25
    515c:	9e a1       	ldd	r25, Y+38	; 0x26
    515e:	2b ea       	ldi	r18, 0xAB	; 171
    5160:	3a ea       	ldi	r19, 0xAA	; 170
    5162:	4a e2       	ldi	r20, 0x2A	; 42
    5164:	50 e4       	ldi	r21, 0x40	; 64
    5166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    516a:	dc 01       	movw	r26, r24
    516c:	cb 01       	movw	r24, r22
    516e:	8f 8f       	std	Y+31, r24	; 0x1f
    5170:	98 a3       	std	Y+32, r25	; 0x20
    5172:	a9 a3       	std	Y+33, r26	; 0x21
    5174:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    5176:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5178:	78 a1       	ldd	r23, Y+32	; 0x20
    517a:	89 a1       	ldd	r24, Y+33	; 0x21
    517c:	9a a1       	ldd	r25, Y+34	; 0x22
    517e:	20 e0       	ldi	r18, 0x00	; 0
    5180:	30 e0       	ldi	r19, 0x00	; 0
    5182:	40 e8       	ldi	r20, 0x80	; 128
    5184:	5f e3       	ldi	r21, 0x3F	; 63
    5186:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    518a:	88 23       	and	r24, r24
    518c:	1c f4       	brge	.+6      	; 0x5194 <LCD_init+0x394>
		__ticks = 1;
    518e:	81 e0       	ldi	r24, 0x01	; 1
    5190:	8e 8f       	std	Y+30, r24	; 0x1e
    5192:	91 c0       	rjmp	.+290    	; 0x52b6 <LCD_init+0x4b6>
	else if (__tmp > 255)
    5194:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5196:	78 a1       	ldd	r23, Y+32	; 0x20
    5198:	89 a1       	ldd	r24, Y+33	; 0x21
    519a:	9a a1       	ldd	r25, Y+34	; 0x22
    519c:	20 e0       	ldi	r18, 0x00	; 0
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	4f e7       	ldi	r20, 0x7F	; 127
    51a2:	53 e4       	ldi	r21, 0x43	; 67
    51a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51a8:	18 16       	cp	r1, r24
    51aa:	0c f0       	brlt	.+2      	; 0x51ae <LCD_init+0x3ae>
    51ac:	7b c0       	rjmp	.+246    	; 0x52a4 <LCD_init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    51ae:	6b a1       	ldd	r22, Y+35	; 0x23
    51b0:	7c a1       	ldd	r23, Y+36	; 0x24
    51b2:	8d a1       	ldd	r24, Y+37	; 0x25
    51b4:	9e a1       	ldd	r25, Y+38	; 0x26
    51b6:	20 e0       	ldi	r18, 0x00	; 0
    51b8:	30 e0       	ldi	r19, 0x00	; 0
    51ba:	4a e7       	ldi	r20, 0x7A	; 122
    51bc:	54 e4       	ldi	r21, 0x44	; 68
    51be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    51c2:	dc 01       	movw	r26, r24
    51c4:	cb 01       	movw	r24, r22
    51c6:	8a 8f       	std	Y+26, r24	; 0x1a
    51c8:	9b 8f       	std	Y+27, r25	; 0x1b
    51ca:	ac 8f       	std	Y+28, r26	; 0x1c
    51cc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51ce:	6a 8d       	ldd	r22, Y+26	; 0x1a
    51d0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    51d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    51d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    51d6:	20 e0       	ldi	r18, 0x00	; 0
    51d8:	30 e0       	ldi	r19, 0x00	; 0
    51da:	4a ef       	ldi	r20, 0xFA	; 250
    51dc:	54 e4       	ldi	r21, 0x44	; 68
    51de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51e2:	dc 01       	movw	r26, r24
    51e4:	cb 01       	movw	r24, r22
    51e6:	8e 8b       	std	Y+22, r24	; 0x16
    51e8:	9f 8b       	std	Y+23, r25	; 0x17
    51ea:	a8 8f       	std	Y+24, r26	; 0x18
    51ec:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    51ee:	6e 89       	ldd	r22, Y+22	; 0x16
    51f0:	7f 89       	ldd	r23, Y+23	; 0x17
    51f2:	88 8d       	ldd	r24, Y+24	; 0x18
    51f4:	99 8d       	ldd	r25, Y+25	; 0x19
    51f6:	20 e0       	ldi	r18, 0x00	; 0
    51f8:	30 e0       	ldi	r19, 0x00	; 0
    51fa:	40 e8       	ldi	r20, 0x80	; 128
    51fc:	5f e3       	ldi	r21, 0x3F	; 63
    51fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5202:	88 23       	and	r24, r24
    5204:	2c f4       	brge	.+10     	; 0x5210 <LCD_init+0x410>
		__ticks = 1;
    5206:	81 e0       	ldi	r24, 0x01	; 1
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	9d 8b       	std	Y+21, r25	; 0x15
    520c:	8c 8b       	std	Y+20, r24	; 0x14
    520e:	3f c0       	rjmp	.+126    	; 0x528e <LCD_init+0x48e>
	else if (__tmp > 65535)
    5210:	6e 89       	ldd	r22, Y+22	; 0x16
    5212:	7f 89       	ldd	r23, Y+23	; 0x17
    5214:	88 8d       	ldd	r24, Y+24	; 0x18
    5216:	99 8d       	ldd	r25, Y+25	; 0x19
    5218:	20 e0       	ldi	r18, 0x00	; 0
    521a:	3f ef       	ldi	r19, 0xFF	; 255
    521c:	4f e7       	ldi	r20, 0x7F	; 127
    521e:	57 e4       	ldi	r21, 0x47	; 71
    5220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5224:	18 16       	cp	r1, r24
    5226:	4c f5       	brge	.+82     	; 0x527a <LCD_init+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5228:	6a 8d       	ldd	r22, Y+26	; 0x1a
    522a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    522c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    522e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5230:	20 e0       	ldi	r18, 0x00	; 0
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	40 e2       	ldi	r20, 0x20	; 32
    5236:	51 e4       	ldi	r21, 0x41	; 65
    5238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    523c:	dc 01       	movw	r26, r24
    523e:	cb 01       	movw	r24, r22
    5240:	bc 01       	movw	r22, r24
    5242:	cd 01       	movw	r24, r26
    5244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	9d 8b       	std	Y+21, r25	; 0x15
    524e:	8c 8b       	std	Y+20, r24	; 0x14
    5250:	0f c0       	rjmp	.+30     	; 0x5270 <LCD_init+0x470>
    5252:	88 ec       	ldi	r24, 0xC8	; 200
    5254:	90 e0       	ldi	r25, 0x00	; 0
    5256:	9b 8b       	std	Y+19, r25	; 0x13
    5258:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    525a:	8a 89       	ldd	r24, Y+18	; 0x12
    525c:	9b 89       	ldd	r25, Y+19	; 0x13
    525e:	01 97       	sbiw	r24, 0x01	; 1
    5260:	f1 f7       	brne	.-4      	; 0x525e <LCD_init+0x45e>
    5262:	9b 8b       	std	Y+19, r25	; 0x13
    5264:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5266:	8c 89       	ldd	r24, Y+20	; 0x14
    5268:	9d 89       	ldd	r25, Y+21	; 0x15
    526a:	01 97       	sbiw	r24, 0x01	; 1
    526c:	9d 8b       	std	Y+21, r25	; 0x15
    526e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5270:	8c 89       	ldd	r24, Y+20	; 0x14
    5272:	9d 89       	ldd	r25, Y+21	; 0x15
    5274:	00 97       	sbiw	r24, 0x00	; 0
    5276:	69 f7       	brne	.-38     	; 0x5252 <LCD_init+0x452>
    5278:	24 c0       	rjmp	.+72     	; 0x52c2 <LCD_init+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    527a:	6e 89       	ldd	r22, Y+22	; 0x16
    527c:	7f 89       	ldd	r23, Y+23	; 0x17
    527e:	88 8d       	ldd	r24, Y+24	; 0x18
    5280:	99 8d       	ldd	r25, Y+25	; 0x19
    5282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5286:	dc 01       	movw	r26, r24
    5288:	cb 01       	movw	r24, r22
    528a:	9d 8b       	std	Y+21, r25	; 0x15
    528c:	8c 8b       	std	Y+20, r24	; 0x14
    528e:	8c 89       	ldd	r24, Y+20	; 0x14
    5290:	9d 89       	ldd	r25, Y+21	; 0x15
    5292:	99 8b       	std	Y+17, r25	; 0x11
    5294:	88 8b       	std	Y+16, r24	; 0x10
    5296:	88 89       	ldd	r24, Y+16	; 0x10
    5298:	99 89       	ldd	r25, Y+17	; 0x11
    529a:	01 97       	sbiw	r24, 0x01	; 1
    529c:	f1 f7       	brne	.-4      	; 0x529a <LCD_init+0x49a>
    529e:	99 8b       	std	Y+17, r25	; 0x11
    52a0:	88 8b       	std	Y+16, r24	; 0x10
    52a2:	0f c0       	rjmp	.+30     	; 0x52c2 <LCD_init+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    52a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    52a6:	78 a1       	ldd	r23, Y+32	; 0x20
    52a8:	89 a1       	ldd	r24, Y+33	; 0x21
    52aa:	9a a1       	ldd	r25, Y+34	; 0x22
    52ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52b0:	dc 01       	movw	r26, r24
    52b2:	cb 01       	movw	r24, r22
    52b4:	8e 8f       	std	Y+30, r24	; 0x1e
    52b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    52b8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    52ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    52bc:	8a 95       	dec	r24
    52be:	f1 f7       	brne	.-4      	; 0x52bc <LCD_init+0x4bc>
    52c0:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 39 us
	_delay_us(50);
	// Send the display clean command
	LCD_write_cmd_4bit(display_clear);
    52c2:	81 e0       	ldi	r24, 0x01	; 1
    52c4:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <LCD_write_cmd_4bit>
    52c8:	80 e0       	ldi	r24, 0x00	; 0
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	a0 e0       	ldi	r26, 0x00	; 0
    52ce:	b0 e4       	ldi	r27, 0x40	; 64
    52d0:	8b 87       	std	Y+11, r24	; 0x0b
    52d2:	9c 87       	std	Y+12, r25	; 0x0c
    52d4:	ad 87       	std	Y+13, r26	; 0x0d
    52d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    52da:	7c 85       	ldd	r23, Y+12	; 0x0c
    52dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    52de:	9e 85       	ldd	r25, Y+14	; 0x0e
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	30 e0       	ldi	r19, 0x00	; 0
    52e4:	4a ef       	ldi	r20, 0xFA	; 250
    52e6:	54 e4       	ldi	r21, 0x44	; 68
    52e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52ec:	dc 01       	movw	r26, r24
    52ee:	cb 01       	movw	r24, r22
    52f0:	8f 83       	std	Y+7, r24	; 0x07
    52f2:	98 87       	std	Y+8, r25	; 0x08
    52f4:	a9 87       	std	Y+9, r26	; 0x09
    52f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52f8:	6f 81       	ldd	r22, Y+7	; 0x07
    52fa:	78 85       	ldd	r23, Y+8	; 0x08
    52fc:	89 85       	ldd	r24, Y+9	; 0x09
    52fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5300:	20 e0       	ldi	r18, 0x00	; 0
    5302:	30 e0       	ldi	r19, 0x00	; 0
    5304:	40 e8       	ldi	r20, 0x80	; 128
    5306:	5f e3       	ldi	r21, 0x3F	; 63
    5308:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    530c:	88 23       	and	r24, r24
    530e:	2c f4       	brge	.+10     	; 0x531a <LCD_init+0x51a>
		__ticks = 1;
    5310:	81 e0       	ldi	r24, 0x01	; 1
    5312:	90 e0       	ldi	r25, 0x00	; 0
    5314:	9e 83       	std	Y+6, r25	; 0x06
    5316:	8d 83       	std	Y+5, r24	; 0x05
    5318:	3f c0       	rjmp	.+126    	; 0x5398 <LCD_init+0x598>
	else if (__tmp > 65535)
    531a:	6f 81       	ldd	r22, Y+7	; 0x07
    531c:	78 85       	ldd	r23, Y+8	; 0x08
    531e:	89 85       	ldd	r24, Y+9	; 0x09
    5320:	9a 85       	ldd	r25, Y+10	; 0x0a
    5322:	20 e0       	ldi	r18, 0x00	; 0
    5324:	3f ef       	ldi	r19, 0xFF	; 255
    5326:	4f e7       	ldi	r20, 0x7F	; 127
    5328:	57 e4       	ldi	r21, 0x47	; 71
    532a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    532e:	18 16       	cp	r1, r24
    5330:	4c f5       	brge	.+82     	; 0x5384 <LCD_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5332:	6b 85       	ldd	r22, Y+11	; 0x0b
    5334:	7c 85       	ldd	r23, Y+12	; 0x0c
    5336:	8d 85       	ldd	r24, Y+13	; 0x0d
    5338:	9e 85       	ldd	r25, Y+14	; 0x0e
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	40 e2       	ldi	r20, 0x20	; 32
    5340:	51 e4       	ldi	r21, 0x41	; 65
    5342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5346:	dc 01       	movw	r26, r24
    5348:	cb 01       	movw	r24, r22
    534a:	bc 01       	movw	r22, r24
    534c:	cd 01       	movw	r24, r26
    534e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5352:	dc 01       	movw	r26, r24
    5354:	cb 01       	movw	r24, r22
    5356:	9e 83       	std	Y+6, r25	; 0x06
    5358:	8d 83       	std	Y+5, r24	; 0x05
    535a:	0f c0       	rjmp	.+30     	; 0x537a <LCD_init+0x57a>
    535c:	88 ec       	ldi	r24, 0xC8	; 200
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	9c 83       	std	Y+4, r25	; 0x04
    5362:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5364:	8b 81       	ldd	r24, Y+3	; 0x03
    5366:	9c 81       	ldd	r25, Y+4	; 0x04
    5368:	01 97       	sbiw	r24, 0x01	; 1
    536a:	f1 f7       	brne	.-4      	; 0x5368 <LCD_init+0x568>
    536c:	9c 83       	std	Y+4, r25	; 0x04
    536e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5370:	8d 81       	ldd	r24, Y+5	; 0x05
    5372:	9e 81       	ldd	r25, Y+6	; 0x06
    5374:	01 97       	sbiw	r24, 0x01	; 1
    5376:	9e 83       	std	Y+6, r25	; 0x06
    5378:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    537a:	8d 81       	ldd	r24, Y+5	; 0x05
    537c:	9e 81       	ldd	r25, Y+6	; 0x06
    537e:	00 97       	sbiw	r24, 0x00	; 0
    5380:	69 f7       	brne	.-38     	; 0x535c <LCD_init+0x55c>
    5382:	14 c0       	rjmp	.+40     	; 0x53ac <LCD_init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5384:	6f 81       	ldd	r22, Y+7	; 0x07
    5386:	78 85       	ldd	r23, Y+8	; 0x08
    5388:	89 85       	ldd	r24, Y+9	; 0x09
    538a:	9a 85       	ldd	r25, Y+10	; 0x0a
    538c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5390:	dc 01       	movw	r26, r24
    5392:	cb 01       	movw	r24, r22
    5394:	9e 83       	std	Y+6, r25	; 0x06
    5396:	8d 83       	std	Y+5, r24	; 0x05
    5398:	8d 81       	ldd	r24, Y+5	; 0x05
    539a:	9e 81       	ldd	r25, Y+6	; 0x06
    539c:	9a 83       	std	Y+2, r25	; 0x02
    539e:	89 83       	std	Y+1, r24	; 0x01
    53a0:	89 81       	ldd	r24, Y+1	; 0x01
    53a2:	9a 81       	ldd	r25, Y+2	; 0x02
    53a4:	01 97       	sbiw	r24, 0x01	; 1
    53a6:	f1 f7       	brne	.-4      	; 0x53a4 <LCD_init+0x5a4>
    53a8:	9a 83       	std	Y+2, r25	; 0x02
    53aa:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 1.53 ms
	_delay_ms(2);
#endif
}
    53ac:	c4 5b       	subi	r28, 0xB4	; 180
    53ae:	df 4f       	sbci	r29, 0xFF	; 255
    53b0:	0f b6       	in	r0, 0x3f	; 63
    53b2:	f8 94       	cli
    53b4:	de bf       	out	0x3e, r29	; 62
    53b6:	0f be       	out	0x3f, r0	; 63
    53b8:	cd bf       	out	0x3d, r28	; 61
    53ba:	cf 91       	pop	r28
    53bc:	df 91       	pop	r29
    53be:	1f 91       	pop	r17
    53c0:	0f 91       	pop	r16
    53c2:	08 95       	ret

000053c4 <LCD_set_cursor>:

void LCD_set_cursor(u8 copy_u8_row, u8 copy_u8_column){
    53c4:	df 93       	push	r29
    53c6:	cf 93       	push	r28
    53c8:	cd b7       	in	r28, 0x3d	; 61
    53ca:	de b7       	in	r29, 0x3e	; 62
    53cc:	6b 97       	sbiw	r28, 0x1b	; 27
    53ce:	0f b6       	in	r0, 0x3f	; 63
    53d0:	f8 94       	cli
    53d2:	de bf       	out	0x3e, r29	; 62
    53d4:	0f be       	out	0x3f, r0	; 63
    53d6:	cd bf       	out	0x3d, r28	; 61
    53d8:	8a 8f       	std	Y+26, r24	; 0x1a
    53da:	6b 8f       	std	Y+27, r22	; 0x1b
	LCD_write_cmd_8bit(address);
	// wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// calculate the addres from the given rows and columns
	u8 address= 128+(copy_u8_row*line2)+(copy_u8_column);
    53dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    53de:	88 2f       	mov	r24, r24
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	02 96       	adiw	r24, 0x02	; 2
    53e4:	00 24       	eor	r0, r0
    53e6:	96 95       	lsr	r25
    53e8:	87 95       	ror	r24
    53ea:	07 94       	ror	r0
    53ec:	96 95       	lsr	r25
    53ee:	87 95       	ror	r24
    53f0:	07 94       	ror	r0
    53f2:	98 2f       	mov	r25, r24
    53f4:	80 2d       	mov	r24, r0
    53f6:	98 2f       	mov	r25, r24
    53f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53fa:	89 0f       	add	r24, r25
    53fc:	89 8f       	std	Y+25, r24	; 0x19
	// Sent set address command
	LCD_write_cmd_4bit(address);
    53fe:	89 8d       	ldd	r24, Y+25	; 0x19
    5400:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <LCD_write_cmd_4bit>
    5404:	80 e0       	ldi	r24, 0x00	; 0
    5406:	90 e0       	ldi	r25, 0x00	; 0
    5408:	a8 e4       	ldi	r26, 0x48	; 72
    540a:	b2 e4       	ldi	r27, 0x42	; 66
    540c:	8d 8b       	std	Y+21, r24	; 0x15
    540e:	9e 8b       	std	Y+22, r25	; 0x16
    5410:	af 8b       	std	Y+23, r26	; 0x17
    5412:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5414:	6d 89       	ldd	r22, Y+21	; 0x15
    5416:	7e 89       	ldd	r23, Y+22	; 0x16
    5418:	8f 89       	ldd	r24, Y+23	; 0x17
    541a:	98 8d       	ldd	r25, Y+24	; 0x18
    541c:	2b ea       	ldi	r18, 0xAB	; 171
    541e:	3a ea       	ldi	r19, 0xAA	; 170
    5420:	4a e2       	ldi	r20, 0x2A	; 42
    5422:	50 e4       	ldi	r21, 0x40	; 64
    5424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5428:	dc 01       	movw	r26, r24
    542a:	cb 01       	movw	r24, r22
    542c:	89 8b       	std	Y+17, r24	; 0x11
    542e:	9a 8b       	std	Y+18, r25	; 0x12
    5430:	ab 8b       	std	Y+19, r26	; 0x13
    5432:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5434:	69 89       	ldd	r22, Y+17	; 0x11
    5436:	7a 89       	ldd	r23, Y+18	; 0x12
    5438:	8b 89       	ldd	r24, Y+19	; 0x13
    543a:	9c 89       	ldd	r25, Y+20	; 0x14
    543c:	20 e0       	ldi	r18, 0x00	; 0
    543e:	30 e0       	ldi	r19, 0x00	; 0
    5440:	40 e8       	ldi	r20, 0x80	; 128
    5442:	5f e3       	ldi	r21, 0x3F	; 63
    5444:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5448:	88 23       	and	r24, r24
    544a:	1c f4       	brge	.+6      	; 0x5452 <LCD_set_cursor+0x8e>
		__ticks = 1;
    544c:	81 e0       	ldi	r24, 0x01	; 1
    544e:	88 8b       	std	Y+16, r24	; 0x10
    5450:	91 c0       	rjmp	.+290    	; 0x5574 <LCD_set_cursor+0x1b0>
	else if (__tmp > 255)
    5452:	69 89       	ldd	r22, Y+17	; 0x11
    5454:	7a 89       	ldd	r23, Y+18	; 0x12
    5456:	8b 89       	ldd	r24, Y+19	; 0x13
    5458:	9c 89       	ldd	r25, Y+20	; 0x14
    545a:	20 e0       	ldi	r18, 0x00	; 0
    545c:	30 e0       	ldi	r19, 0x00	; 0
    545e:	4f e7       	ldi	r20, 0x7F	; 127
    5460:	53 e4       	ldi	r21, 0x43	; 67
    5462:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5466:	18 16       	cp	r1, r24
    5468:	0c f0       	brlt	.+2      	; 0x546c <LCD_set_cursor+0xa8>
    546a:	7b c0       	rjmp	.+246    	; 0x5562 <LCD_set_cursor+0x19e>
	{
		_delay_ms(__us / 1000.0);
    546c:	6d 89       	ldd	r22, Y+21	; 0x15
    546e:	7e 89       	ldd	r23, Y+22	; 0x16
    5470:	8f 89       	ldd	r24, Y+23	; 0x17
    5472:	98 8d       	ldd	r25, Y+24	; 0x18
    5474:	20 e0       	ldi	r18, 0x00	; 0
    5476:	30 e0       	ldi	r19, 0x00	; 0
    5478:	4a e7       	ldi	r20, 0x7A	; 122
    547a:	54 e4       	ldi	r21, 0x44	; 68
    547c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	8c 87       	std	Y+12, r24	; 0x0c
    5486:	9d 87       	std	Y+13, r25	; 0x0d
    5488:	ae 87       	std	Y+14, r26	; 0x0e
    548a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    548c:	6c 85       	ldd	r22, Y+12	; 0x0c
    548e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5490:	8e 85       	ldd	r24, Y+14	; 0x0e
    5492:	9f 85       	ldd	r25, Y+15	; 0x0f
    5494:	20 e0       	ldi	r18, 0x00	; 0
    5496:	30 e0       	ldi	r19, 0x00	; 0
    5498:	4a ef       	ldi	r20, 0xFA	; 250
    549a:	54 e4       	ldi	r21, 0x44	; 68
    549c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54a0:	dc 01       	movw	r26, r24
    54a2:	cb 01       	movw	r24, r22
    54a4:	88 87       	std	Y+8, r24	; 0x08
    54a6:	99 87       	std	Y+9, r25	; 0x09
    54a8:	aa 87       	std	Y+10, r26	; 0x0a
    54aa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    54ac:	68 85       	ldd	r22, Y+8	; 0x08
    54ae:	79 85       	ldd	r23, Y+9	; 0x09
    54b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    54b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    54b4:	20 e0       	ldi	r18, 0x00	; 0
    54b6:	30 e0       	ldi	r19, 0x00	; 0
    54b8:	40 e8       	ldi	r20, 0x80	; 128
    54ba:	5f e3       	ldi	r21, 0x3F	; 63
    54bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54c0:	88 23       	and	r24, r24
    54c2:	2c f4       	brge	.+10     	; 0x54ce <LCD_set_cursor+0x10a>
		__ticks = 1;
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	9f 83       	std	Y+7, r25	; 0x07
    54ca:	8e 83       	std	Y+6, r24	; 0x06
    54cc:	3f c0       	rjmp	.+126    	; 0x554c <LCD_set_cursor+0x188>
	else if (__tmp > 65535)
    54ce:	68 85       	ldd	r22, Y+8	; 0x08
    54d0:	79 85       	ldd	r23, Y+9	; 0x09
    54d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    54d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    54d6:	20 e0       	ldi	r18, 0x00	; 0
    54d8:	3f ef       	ldi	r19, 0xFF	; 255
    54da:	4f e7       	ldi	r20, 0x7F	; 127
    54dc:	57 e4       	ldi	r21, 0x47	; 71
    54de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54e2:	18 16       	cp	r1, r24
    54e4:	4c f5       	brge	.+82     	; 0x5538 <LCD_set_cursor+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    54e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    54ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    54ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    54ee:	20 e0       	ldi	r18, 0x00	; 0
    54f0:	30 e0       	ldi	r19, 0x00	; 0
    54f2:	40 e2       	ldi	r20, 0x20	; 32
    54f4:	51 e4       	ldi	r21, 0x41	; 65
    54f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54fa:	dc 01       	movw	r26, r24
    54fc:	cb 01       	movw	r24, r22
    54fe:	bc 01       	movw	r22, r24
    5500:	cd 01       	movw	r24, r26
    5502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5506:	dc 01       	movw	r26, r24
    5508:	cb 01       	movw	r24, r22
    550a:	9f 83       	std	Y+7, r25	; 0x07
    550c:	8e 83       	std	Y+6, r24	; 0x06
    550e:	0f c0       	rjmp	.+30     	; 0x552e <LCD_set_cursor+0x16a>
    5510:	88 ec       	ldi	r24, 0xC8	; 200
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	9d 83       	std	Y+5, r25	; 0x05
    5516:	8c 83       	std	Y+4, r24	; 0x04
    5518:	8c 81       	ldd	r24, Y+4	; 0x04
    551a:	9d 81       	ldd	r25, Y+5	; 0x05
    551c:	01 97       	sbiw	r24, 0x01	; 1
    551e:	f1 f7       	brne	.-4      	; 0x551c <LCD_set_cursor+0x158>
    5520:	9d 83       	std	Y+5, r25	; 0x05
    5522:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5524:	8e 81       	ldd	r24, Y+6	; 0x06
    5526:	9f 81       	ldd	r25, Y+7	; 0x07
    5528:	01 97       	sbiw	r24, 0x01	; 1
    552a:	9f 83       	std	Y+7, r25	; 0x07
    552c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    552e:	8e 81       	ldd	r24, Y+6	; 0x06
    5530:	9f 81       	ldd	r25, Y+7	; 0x07
    5532:	00 97       	sbiw	r24, 0x00	; 0
    5534:	69 f7       	brne	.-38     	; 0x5510 <LCD_set_cursor+0x14c>
    5536:	24 c0       	rjmp	.+72     	; 0x5580 <LCD_set_cursor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5538:	68 85       	ldd	r22, Y+8	; 0x08
    553a:	79 85       	ldd	r23, Y+9	; 0x09
    553c:	8a 85       	ldd	r24, Y+10	; 0x0a
    553e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5544:	dc 01       	movw	r26, r24
    5546:	cb 01       	movw	r24, r22
    5548:	9f 83       	std	Y+7, r25	; 0x07
    554a:	8e 83       	std	Y+6, r24	; 0x06
    554c:	8e 81       	ldd	r24, Y+6	; 0x06
    554e:	9f 81       	ldd	r25, Y+7	; 0x07
    5550:	9b 83       	std	Y+3, r25	; 0x03
    5552:	8a 83       	std	Y+2, r24	; 0x02
    5554:	8a 81       	ldd	r24, Y+2	; 0x02
    5556:	9b 81       	ldd	r25, Y+3	; 0x03
    5558:	01 97       	sbiw	r24, 0x01	; 1
    555a:	f1 f7       	brne	.-4      	; 0x5558 <LCD_set_cursor+0x194>
    555c:	9b 83       	std	Y+3, r25	; 0x03
    555e:	8a 83       	std	Y+2, r24	; 0x02
    5560:	0f c0       	rjmp	.+30     	; 0x5580 <LCD_set_cursor+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5562:	69 89       	ldd	r22, Y+17	; 0x11
    5564:	7a 89       	ldd	r23, Y+18	; 0x12
    5566:	8b 89       	ldd	r24, Y+19	; 0x13
    5568:	9c 89       	ldd	r25, Y+20	; 0x14
    556a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    556e:	dc 01       	movw	r26, r24
    5570:	cb 01       	movw	r24, r22
    5572:	88 8b       	std	Y+16, r24	; 0x10
    5574:	88 89       	ldd	r24, Y+16	; 0x10
    5576:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5578:	89 81       	ldd	r24, Y+1	; 0x01
    557a:	8a 95       	dec	r24
    557c:	f1 f7       	brne	.-4      	; 0x557a <LCD_set_cursor+0x1b6>
    557e:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_us(50);
#endif
}
    5580:	6b 96       	adiw	r28, 0x1b	; 27
    5582:	0f b6       	in	r0, 0x3f	; 63
    5584:	f8 94       	cli
    5586:	de bf       	out	0x3e, r29	; 62
    5588:	0f be       	out	0x3f, r0	; 63
    558a:	cd bf       	out	0x3d, r28	; 61
    558c:	cf 91       	pop	r28
    558e:	df 91       	pop	r29
    5590:	08 95       	ret

00005592 <LCD_clear>:

void LCD_clear(void){
    5592:	df 93       	push	r29
    5594:	cf 93       	push	r28
    5596:	cd b7       	in	r28, 0x3d	; 61
    5598:	de b7       	in	r29, 0x3e	; 62
    559a:	6c 97       	sbiw	r28, 0x1c	; 28
    559c:	0f b6       	in	r0, 0x3f	; 63
    559e:	f8 94       	cli
    55a0:	de bf       	out	0x3e, r29	; 62
    55a2:	0f be       	out	0x3f, r0	; 63
    55a4:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(return_home);
	// wait more than 39 us
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Send Display clear command
	LCD_write_cmd_4bit(display_clear);
    55a6:	81 e0       	ldi	r24, 0x01	; 1
    55a8:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <LCD_write_cmd_4bit>
    55ac:	80 e0       	ldi	r24, 0x00	; 0
    55ae:	90 e0       	ldi	r25, 0x00	; 0
    55b0:	a0 e0       	ldi	r26, 0x00	; 0
    55b2:	b0 e4       	ldi	r27, 0x40	; 64
    55b4:	89 8f       	std	Y+25, r24	; 0x19
    55b6:	9a 8f       	std	Y+26, r25	; 0x1a
    55b8:	ab 8f       	std	Y+27, r26	; 0x1b
    55ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55bc:	69 8d       	ldd	r22, Y+25	; 0x19
    55be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55c4:	20 e0       	ldi	r18, 0x00	; 0
    55c6:	30 e0       	ldi	r19, 0x00	; 0
    55c8:	4a ef       	ldi	r20, 0xFA	; 250
    55ca:	54 e4       	ldi	r21, 0x44	; 68
    55cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55d0:	dc 01       	movw	r26, r24
    55d2:	cb 01       	movw	r24, r22
    55d4:	8d 8b       	std	Y+21, r24	; 0x15
    55d6:	9e 8b       	std	Y+22, r25	; 0x16
    55d8:	af 8b       	std	Y+23, r26	; 0x17
    55da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    55dc:	6d 89       	ldd	r22, Y+21	; 0x15
    55de:	7e 89       	ldd	r23, Y+22	; 0x16
    55e0:	8f 89       	ldd	r24, Y+23	; 0x17
    55e2:	98 8d       	ldd	r25, Y+24	; 0x18
    55e4:	20 e0       	ldi	r18, 0x00	; 0
    55e6:	30 e0       	ldi	r19, 0x00	; 0
    55e8:	40 e8       	ldi	r20, 0x80	; 128
    55ea:	5f e3       	ldi	r21, 0x3F	; 63
    55ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55f0:	88 23       	and	r24, r24
    55f2:	2c f4       	brge	.+10     	; 0x55fe <LCD_clear+0x6c>
		__ticks = 1;
    55f4:	81 e0       	ldi	r24, 0x01	; 1
    55f6:	90 e0       	ldi	r25, 0x00	; 0
    55f8:	9c 8b       	std	Y+20, r25	; 0x14
    55fa:	8b 8b       	std	Y+19, r24	; 0x13
    55fc:	3f c0       	rjmp	.+126    	; 0x567c <LCD_clear+0xea>
	else if (__tmp > 65535)
    55fe:	6d 89       	ldd	r22, Y+21	; 0x15
    5600:	7e 89       	ldd	r23, Y+22	; 0x16
    5602:	8f 89       	ldd	r24, Y+23	; 0x17
    5604:	98 8d       	ldd	r25, Y+24	; 0x18
    5606:	20 e0       	ldi	r18, 0x00	; 0
    5608:	3f ef       	ldi	r19, 0xFF	; 255
    560a:	4f e7       	ldi	r20, 0x7F	; 127
    560c:	57 e4       	ldi	r21, 0x47	; 71
    560e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5612:	18 16       	cp	r1, r24
    5614:	4c f5       	brge	.+82     	; 0x5668 <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5616:	69 8d       	ldd	r22, Y+25	; 0x19
    5618:	7a 8d       	ldd	r23, Y+26	; 0x1a
    561a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    561c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    561e:	20 e0       	ldi	r18, 0x00	; 0
    5620:	30 e0       	ldi	r19, 0x00	; 0
    5622:	40 e2       	ldi	r20, 0x20	; 32
    5624:	51 e4       	ldi	r21, 0x41	; 65
    5626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    562a:	dc 01       	movw	r26, r24
    562c:	cb 01       	movw	r24, r22
    562e:	bc 01       	movw	r22, r24
    5630:	cd 01       	movw	r24, r26
    5632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5636:	dc 01       	movw	r26, r24
    5638:	cb 01       	movw	r24, r22
    563a:	9c 8b       	std	Y+20, r25	; 0x14
    563c:	8b 8b       	std	Y+19, r24	; 0x13
    563e:	0f c0       	rjmp	.+30     	; 0x565e <LCD_clear+0xcc>
    5640:	88 ec       	ldi	r24, 0xC8	; 200
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	9a 8b       	std	Y+18, r25	; 0x12
    5646:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5648:	89 89       	ldd	r24, Y+17	; 0x11
    564a:	9a 89       	ldd	r25, Y+18	; 0x12
    564c:	01 97       	sbiw	r24, 0x01	; 1
    564e:	f1 f7       	brne	.-4      	; 0x564c <LCD_clear+0xba>
    5650:	9a 8b       	std	Y+18, r25	; 0x12
    5652:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5654:	8b 89       	ldd	r24, Y+19	; 0x13
    5656:	9c 89       	ldd	r25, Y+20	; 0x14
    5658:	01 97       	sbiw	r24, 0x01	; 1
    565a:	9c 8b       	std	Y+20, r25	; 0x14
    565c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    565e:	8b 89       	ldd	r24, Y+19	; 0x13
    5660:	9c 89       	ldd	r25, Y+20	; 0x14
    5662:	00 97       	sbiw	r24, 0x00	; 0
    5664:	69 f7       	brne	.-38     	; 0x5640 <LCD_clear+0xae>
    5666:	14 c0       	rjmp	.+40     	; 0x5690 <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5668:	6d 89       	ldd	r22, Y+21	; 0x15
    566a:	7e 89       	ldd	r23, Y+22	; 0x16
    566c:	8f 89       	ldd	r24, Y+23	; 0x17
    566e:	98 8d       	ldd	r25, Y+24	; 0x18
    5670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5674:	dc 01       	movw	r26, r24
    5676:	cb 01       	movw	r24, r22
    5678:	9c 8b       	std	Y+20, r25	; 0x14
    567a:	8b 8b       	std	Y+19, r24	; 0x13
    567c:	8b 89       	ldd	r24, Y+19	; 0x13
    567e:	9c 89       	ldd	r25, Y+20	; 0x14
    5680:	98 8b       	std	Y+16, r25	; 0x10
    5682:	8f 87       	std	Y+15, r24	; 0x0f
    5684:	8f 85       	ldd	r24, Y+15	; 0x0f
    5686:	98 89       	ldd	r25, Y+16	; 0x10
    5688:	01 97       	sbiw	r24, 0x01	; 1
    568a:	f1 f7       	brne	.-4      	; 0x5688 <LCD_clear+0xf6>
    568c:	98 8b       	std	Y+16, r25	; 0x10
    568e:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 1.53 ms
	_delay_ms(2);
	// Send set address command with home address
	LCD_write_cmd_4bit(return_home);
    5690:	82 e0       	ldi	r24, 0x02	; 2
    5692:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <LCD_write_cmd_4bit>
    5696:	80 e0       	ldi	r24, 0x00	; 0
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	a0 e0       	ldi	r26, 0x00	; 0
    569c:	b0 e4       	ldi	r27, 0x40	; 64
    569e:	8b 87       	std	Y+11, r24	; 0x0b
    56a0:	9c 87       	std	Y+12, r25	; 0x0c
    56a2:	ad 87       	std	Y+13, r26	; 0x0d
    56a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    56a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    56aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    56ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    56ae:	20 e0       	ldi	r18, 0x00	; 0
    56b0:	30 e0       	ldi	r19, 0x00	; 0
    56b2:	4a ef       	ldi	r20, 0xFA	; 250
    56b4:	54 e4       	ldi	r21, 0x44	; 68
    56b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ba:	dc 01       	movw	r26, r24
    56bc:	cb 01       	movw	r24, r22
    56be:	8f 83       	std	Y+7, r24	; 0x07
    56c0:	98 87       	std	Y+8, r25	; 0x08
    56c2:	a9 87       	std	Y+9, r26	; 0x09
    56c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56c6:	6f 81       	ldd	r22, Y+7	; 0x07
    56c8:	78 85       	ldd	r23, Y+8	; 0x08
    56ca:	89 85       	ldd	r24, Y+9	; 0x09
    56cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    56ce:	20 e0       	ldi	r18, 0x00	; 0
    56d0:	30 e0       	ldi	r19, 0x00	; 0
    56d2:	40 e8       	ldi	r20, 0x80	; 128
    56d4:	5f e3       	ldi	r21, 0x3F	; 63
    56d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56da:	88 23       	and	r24, r24
    56dc:	2c f4       	brge	.+10     	; 0x56e8 <LCD_clear+0x156>
		__ticks = 1;
    56de:	81 e0       	ldi	r24, 0x01	; 1
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	9e 83       	std	Y+6, r25	; 0x06
    56e4:	8d 83       	std	Y+5, r24	; 0x05
    56e6:	3f c0       	rjmp	.+126    	; 0x5766 <LCD_clear+0x1d4>
	else if (__tmp > 65535)
    56e8:	6f 81       	ldd	r22, Y+7	; 0x07
    56ea:	78 85       	ldd	r23, Y+8	; 0x08
    56ec:	89 85       	ldd	r24, Y+9	; 0x09
    56ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    56f0:	20 e0       	ldi	r18, 0x00	; 0
    56f2:	3f ef       	ldi	r19, 0xFF	; 255
    56f4:	4f e7       	ldi	r20, 0x7F	; 127
    56f6:	57 e4       	ldi	r21, 0x47	; 71
    56f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56fc:	18 16       	cp	r1, r24
    56fe:	4c f5       	brge	.+82     	; 0x5752 <LCD_clear+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5700:	6b 85       	ldd	r22, Y+11	; 0x0b
    5702:	7c 85       	ldd	r23, Y+12	; 0x0c
    5704:	8d 85       	ldd	r24, Y+13	; 0x0d
    5706:	9e 85       	ldd	r25, Y+14	; 0x0e
    5708:	20 e0       	ldi	r18, 0x00	; 0
    570a:	30 e0       	ldi	r19, 0x00	; 0
    570c:	40 e2       	ldi	r20, 0x20	; 32
    570e:	51 e4       	ldi	r21, 0x41	; 65
    5710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5714:	dc 01       	movw	r26, r24
    5716:	cb 01       	movw	r24, r22
    5718:	bc 01       	movw	r22, r24
    571a:	cd 01       	movw	r24, r26
    571c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5720:	dc 01       	movw	r26, r24
    5722:	cb 01       	movw	r24, r22
    5724:	9e 83       	std	Y+6, r25	; 0x06
    5726:	8d 83       	std	Y+5, r24	; 0x05
    5728:	0f c0       	rjmp	.+30     	; 0x5748 <LCD_clear+0x1b6>
    572a:	88 ec       	ldi	r24, 0xC8	; 200
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	9c 83       	std	Y+4, r25	; 0x04
    5730:	8b 83       	std	Y+3, r24	; 0x03
    5732:	8b 81       	ldd	r24, Y+3	; 0x03
    5734:	9c 81       	ldd	r25, Y+4	; 0x04
    5736:	01 97       	sbiw	r24, 0x01	; 1
    5738:	f1 f7       	brne	.-4      	; 0x5736 <LCD_clear+0x1a4>
    573a:	9c 83       	std	Y+4, r25	; 0x04
    573c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    573e:	8d 81       	ldd	r24, Y+5	; 0x05
    5740:	9e 81       	ldd	r25, Y+6	; 0x06
    5742:	01 97       	sbiw	r24, 0x01	; 1
    5744:	9e 83       	std	Y+6, r25	; 0x06
    5746:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5748:	8d 81       	ldd	r24, Y+5	; 0x05
    574a:	9e 81       	ldd	r25, Y+6	; 0x06
    574c:	00 97       	sbiw	r24, 0x00	; 0
    574e:	69 f7       	brne	.-38     	; 0x572a <LCD_clear+0x198>
    5750:	14 c0       	rjmp	.+40     	; 0x577a <LCD_clear+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5752:	6f 81       	ldd	r22, Y+7	; 0x07
    5754:	78 85       	ldd	r23, Y+8	; 0x08
    5756:	89 85       	ldd	r24, Y+9	; 0x09
    5758:	9a 85       	ldd	r25, Y+10	; 0x0a
    575a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    575e:	dc 01       	movw	r26, r24
    5760:	cb 01       	movw	r24, r22
    5762:	9e 83       	std	Y+6, r25	; 0x06
    5764:	8d 83       	std	Y+5, r24	; 0x05
    5766:	8d 81       	ldd	r24, Y+5	; 0x05
    5768:	9e 81       	ldd	r25, Y+6	; 0x06
    576a:	9a 83       	std	Y+2, r25	; 0x02
    576c:	89 83       	std	Y+1, r24	; 0x01
    576e:	89 81       	ldd	r24, Y+1	; 0x01
    5770:	9a 81       	ldd	r25, Y+2	; 0x02
    5772:	01 97       	sbiw	r24, 0x01	; 1
    5774:	f1 f7       	brne	.-4      	; 0x5772 <LCD_clear+0x1e0>
    5776:	9a 83       	std	Y+2, r25	; 0x02
    5778:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_ms(2);
#endif
}
    577a:	6c 96       	adiw	r28, 0x1c	; 28
    577c:	0f b6       	in	r0, 0x3f	; 63
    577e:	f8 94       	cli
    5780:	de bf       	out	0x3e, r29	; 62
    5782:	0f be       	out	0x3f, r0	; 63
    5784:	cd bf       	out	0x3d, r28	; 61
    5786:	cf 91       	pop	r28
    5788:	df 91       	pop	r29
    578a:	08 95       	ret

0000578c <LCD_off>:

void LCD_off(void ){
    578c:	df 93       	push	r29
    578e:	cf 93       	push	r28
    5790:	cd b7       	in	r28, 0x3d	; 61
    5792:	de b7       	in	r29, 0x3e	; 62
    5794:	2e 97       	sbiw	r28, 0x0e	; 14
    5796:	0f b6       	in	r0, 0x3f	; 63
    5798:	f8 94       	cli
    579a:	de bf       	out	0x3e, r29	; 62
    579c:	0f be       	out	0x3f, r0	; 63
    579e:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_off);
	// Wait more than 39 us
	_delay_ms(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_off);
    57a0:	88 e0       	ldi	r24, 0x08	; 8
    57a2:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <LCD_write_cmd_4bit>
    57a6:	80 e0       	ldi	r24, 0x00	; 0
    57a8:	90 e0       	ldi	r25, 0x00	; 0
    57aa:	a8 e4       	ldi	r26, 0x48	; 72
    57ac:	b2 e4       	ldi	r27, 0x42	; 66
    57ae:	8b 87       	std	Y+11, r24	; 0x0b
    57b0:	9c 87       	std	Y+12, r25	; 0x0c
    57b2:	ad 87       	std	Y+13, r26	; 0x0d
    57b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    57b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    57ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    57bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    57be:	20 e0       	ldi	r18, 0x00	; 0
    57c0:	30 e0       	ldi	r19, 0x00	; 0
    57c2:	4a ef       	ldi	r20, 0xFA	; 250
    57c4:	54 e4       	ldi	r21, 0x44	; 68
    57c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57ca:	dc 01       	movw	r26, r24
    57cc:	cb 01       	movw	r24, r22
    57ce:	8f 83       	std	Y+7, r24	; 0x07
    57d0:	98 87       	std	Y+8, r25	; 0x08
    57d2:	a9 87       	std	Y+9, r26	; 0x09
    57d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57d6:	6f 81       	ldd	r22, Y+7	; 0x07
    57d8:	78 85       	ldd	r23, Y+8	; 0x08
    57da:	89 85       	ldd	r24, Y+9	; 0x09
    57dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    57de:	20 e0       	ldi	r18, 0x00	; 0
    57e0:	30 e0       	ldi	r19, 0x00	; 0
    57e2:	40 e8       	ldi	r20, 0x80	; 128
    57e4:	5f e3       	ldi	r21, 0x3F	; 63
    57e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57ea:	88 23       	and	r24, r24
    57ec:	2c f4       	brge	.+10     	; 0x57f8 <LCD_off+0x6c>
		__ticks = 1;
    57ee:	81 e0       	ldi	r24, 0x01	; 1
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	9e 83       	std	Y+6, r25	; 0x06
    57f4:	8d 83       	std	Y+5, r24	; 0x05
    57f6:	3f c0       	rjmp	.+126    	; 0x5876 <LCD_off+0xea>
	else if (__tmp > 65535)
    57f8:	6f 81       	ldd	r22, Y+7	; 0x07
    57fa:	78 85       	ldd	r23, Y+8	; 0x08
    57fc:	89 85       	ldd	r24, Y+9	; 0x09
    57fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5800:	20 e0       	ldi	r18, 0x00	; 0
    5802:	3f ef       	ldi	r19, 0xFF	; 255
    5804:	4f e7       	ldi	r20, 0x7F	; 127
    5806:	57 e4       	ldi	r21, 0x47	; 71
    5808:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    580c:	18 16       	cp	r1, r24
    580e:	4c f5       	brge	.+82     	; 0x5862 <LCD_off+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5810:	6b 85       	ldd	r22, Y+11	; 0x0b
    5812:	7c 85       	ldd	r23, Y+12	; 0x0c
    5814:	8d 85       	ldd	r24, Y+13	; 0x0d
    5816:	9e 85       	ldd	r25, Y+14	; 0x0e
    5818:	20 e0       	ldi	r18, 0x00	; 0
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	40 e2       	ldi	r20, 0x20	; 32
    581e:	51 e4       	ldi	r21, 0x41	; 65
    5820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5824:	dc 01       	movw	r26, r24
    5826:	cb 01       	movw	r24, r22
    5828:	bc 01       	movw	r22, r24
    582a:	cd 01       	movw	r24, r26
    582c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5830:	dc 01       	movw	r26, r24
    5832:	cb 01       	movw	r24, r22
    5834:	9e 83       	std	Y+6, r25	; 0x06
    5836:	8d 83       	std	Y+5, r24	; 0x05
    5838:	0f c0       	rjmp	.+30     	; 0x5858 <LCD_off+0xcc>
    583a:	88 ec       	ldi	r24, 0xC8	; 200
    583c:	90 e0       	ldi	r25, 0x00	; 0
    583e:	9c 83       	std	Y+4, r25	; 0x04
    5840:	8b 83       	std	Y+3, r24	; 0x03
    5842:	8b 81       	ldd	r24, Y+3	; 0x03
    5844:	9c 81       	ldd	r25, Y+4	; 0x04
    5846:	01 97       	sbiw	r24, 0x01	; 1
    5848:	f1 f7       	brne	.-4      	; 0x5846 <LCD_off+0xba>
    584a:	9c 83       	std	Y+4, r25	; 0x04
    584c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    584e:	8d 81       	ldd	r24, Y+5	; 0x05
    5850:	9e 81       	ldd	r25, Y+6	; 0x06
    5852:	01 97       	sbiw	r24, 0x01	; 1
    5854:	9e 83       	std	Y+6, r25	; 0x06
    5856:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5858:	8d 81       	ldd	r24, Y+5	; 0x05
    585a:	9e 81       	ldd	r25, Y+6	; 0x06
    585c:	00 97       	sbiw	r24, 0x00	; 0
    585e:	69 f7       	brne	.-38     	; 0x583a <LCD_off+0xae>
    5860:	14 c0       	rjmp	.+40     	; 0x588a <LCD_off+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5862:	6f 81       	ldd	r22, Y+7	; 0x07
    5864:	78 85       	ldd	r23, Y+8	; 0x08
    5866:	89 85       	ldd	r24, Y+9	; 0x09
    5868:	9a 85       	ldd	r25, Y+10	; 0x0a
    586a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    586e:	dc 01       	movw	r26, r24
    5870:	cb 01       	movw	r24, r22
    5872:	9e 83       	std	Y+6, r25	; 0x06
    5874:	8d 83       	std	Y+5, r24	; 0x05
    5876:	8d 81       	ldd	r24, Y+5	; 0x05
    5878:	9e 81       	ldd	r25, Y+6	; 0x06
    587a:	9a 83       	std	Y+2, r25	; 0x02
    587c:	89 83       	std	Y+1, r24	; 0x01
    587e:	89 81       	ldd	r24, Y+1	; 0x01
    5880:	9a 81       	ldd	r25, Y+2	; 0x02
    5882:	01 97       	sbiw	r24, 0x01	; 1
    5884:	f1 f7       	brne	.-4      	; 0x5882 <LCD_off+0xf6>
    5886:	9a 83       	std	Y+2, r25	; 0x02
    5888:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_ms(50);
#endif
}
    588a:	2e 96       	adiw	r28, 0x0e	; 14
    588c:	0f b6       	in	r0, 0x3f	; 63
    588e:	f8 94       	cli
    5890:	de bf       	out	0x3e, r29	; 62
    5892:	0f be       	out	0x3f, r0	; 63
    5894:	cd bf       	out	0x3d, r28	; 61
    5896:	cf 91       	pop	r28
    5898:	df 91       	pop	r29
    589a:	08 95       	ret

0000589c <LCD_on>:

void LCD_on(void ){
    589c:	df 93       	push	r29
    589e:	cf 93       	push	r28
    58a0:	cd b7       	in	r28, 0x3d	; 61
    58a2:	de b7       	in	r29, 0x3e	; 62
    58a4:	68 97       	sbiw	r28, 0x18	; 24
    58a6:	0f b6       	in	r0, 0x3f	; 63
    58a8:	f8 94       	cli
    58aa:	de bf       	out	0x3e, r29	; 62
    58ac:	0f be       	out	0x3f, r0	; 63
    58ae:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_on);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_on);
    58b0:	8c e0       	ldi	r24, 0x0C	; 12
    58b2:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <LCD_write_cmd_4bit>
    58b6:	80 e0       	ldi	r24, 0x00	; 0
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	a8 e4       	ldi	r26, 0x48	; 72
    58bc:	b2 e4       	ldi	r27, 0x42	; 66
    58be:	8d 8b       	std	Y+21, r24	; 0x15
    58c0:	9e 8b       	std	Y+22, r25	; 0x16
    58c2:	af 8b       	std	Y+23, r26	; 0x17
    58c4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    58c6:	6d 89       	ldd	r22, Y+21	; 0x15
    58c8:	7e 89       	ldd	r23, Y+22	; 0x16
    58ca:	8f 89       	ldd	r24, Y+23	; 0x17
    58cc:	98 8d       	ldd	r25, Y+24	; 0x18
    58ce:	2b ea       	ldi	r18, 0xAB	; 171
    58d0:	3a ea       	ldi	r19, 0xAA	; 170
    58d2:	4a e2       	ldi	r20, 0x2A	; 42
    58d4:	50 e4       	ldi	r21, 0x40	; 64
    58d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58da:	dc 01       	movw	r26, r24
    58dc:	cb 01       	movw	r24, r22
    58de:	89 8b       	std	Y+17, r24	; 0x11
    58e0:	9a 8b       	std	Y+18, r25	; 0x12
    58e2:	ab 8b       	std	Y+19, r26	; 0x13
    58e4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    58e6:	69 89       	ldd	r22, Y+17	; 0x11
    58e8:	7a 89       	ldd	r23, Y+18	; 0x12
    58ea:	8b 89       	ldd	r24, Y+19	; 0x13
    58ec:	9c 89       	ldd	r25, Y+20	; 0x14
    58ee:	20 e0       	ldi	r18, 0x00	; 0
    58f0:	30 e0       	ldi	r19, 0x00	; 0
    58f2:	40 e8       	ldi	r20, 0x80	; 128
    58f4:	5f e3       	ldi	r21, 0x3F	; 63
    58f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58fa:	88 23       	and	r24, r24
    58fc:	1c f4       	brge	.+6      	; 0x5904 <LCD_on+0x68>
		__ticks = 1;
    58fe:	81 e0       	ldi	r24, 0x01	; 1
    5900:	88 8b       	std	Y+16, r24	; 0x10
    5902:	91 c0       	rjmp	.+290    	; 0x5a26 <LCD_on+0x18a>
	else if (__tmp > 255)
    5904:	69 89       	ldd	r22, Y+17	; 0x11
    5906:	7a 89       	ldd	r23, Y+18	; 0x12
    5908:	8b 89       	ldd	r24, Y+19	; 0x13
    590a:	9c 89       	ldd	r25, Y+20	; 0x14
    590c:	20 e0       	ldi	r18, 0x00	; 0
    590e:	30 e0       	ldi	r19, 0x00	; 0
    5910:	4f e7       	ldi	r20, 0x7F	; 127
    5912:	53 e4       	ldi	r21, 0x43	; 67
    5914:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5918:	18 16       	cp	r1, r24
    591a:	0c f0       	brlt	.+2      	; 0x591e <LCD_on+0x82>
    591c:	7b c0       	rjmp	.+246    	; 0x5a14 <LCD_on+0x178>
	{
		_delay_ms(__us / 1000.0);
    591e:	6d 89       	ldd	r22, Y+21	; 0x15
    5920:	7e 89       	ldd	r23, Y+22	; 0x16
    5922:	8f 89       	ldd	r24, Y+23	; 0x17
    5924:	98 8d       	ldd	r25, Y+24	; 0x18
    5926:	20 e0       	ldi	r18, 0x00	; 0
    5928:	30 e0       	ldi	r19, 0x00	; 0
    592a:	4a e7       	ldi	r20, 0x7A	; 122
    592c:	54 e4       	ldi	r21, 0x44	; 68
    592e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5932:	dc 01       	movw	r26, r24
    5934:	cb 01       	movw	r24, r22
    5936:	8c 87       	std	Y+12, r24	; 0x0c
    5938:	9d 87       	std	Y+13, r25	; 0x0d
    593a:	ae 87       	std	Y+14, r26	; 0x0e
    593c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    593e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5940:	7d 85       	ldd	r23, Y+13	; 0x0d
    5942:	8e 85       	ldd	r24, Y+14	; 0x0e
    5944:	9f 85       	ldd	r25, Y+15	; 0x0f
    5946:	20 e0       	ldi	r18, 0x00	; 0
    5948:	30 e0       	ldi	r19, 0x00	; 0
    594a:	4a ef       	ldi	r20, 0xFA	; 250
    594c:	54 e4       	ldi	r21, 0x44	; 68
    594e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5952:	dc 01       	movw	r26, r24
    5954:	cb 01       	movw	r24, r22
    5956:	88 87       	std	Y+8, r24	; 0x08
    5958:	99 87       	std	Y+9, r25	; 0x09
    595a:	aa 87       	std	Y+10, r26	; 0x0a
    595c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    595e:	68 85       	ldd	r22, Y+8	; 0x08
    5960:	79 85       	ldd	r23, Y+9	; 0x09
    5962:	8a 85       	ldd	r24, Y+10	; 0x0a
    5964:	9b 85       	ldd	r25, Y+11	; 0x0b
    5966:	20 e0       	ldi	r18, 0x00	; 0
    5968:	30 e0       	ldi	r19, 0x00	; 0
    596a:	40 e8       	ldi	r20, 0x80	; 128
    596c:	5f e3       	ldi	r21, 0x3F	; 63
    596e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5972:	88 23       	and	r24, r24
    5974:	2c f4       	brge	.+10     	; 0x5980 <LCD_on+0xe4>
		__ticks = 1;
    5976:	81 e0       	ldi	r24, 0x01	; 1
    5978:	90 e0       	ldi	r25, 0x00	; 0
    597a:	9f 83       	std	Y+7, r25	; 0x07
    597c:	8e 83       	std	Y+6, r24	; 0x06
    597e:	3f c0       	rjmp	.+126    	; 0x59fe <LCD_on+0x162>
	else if (__tmp > 65535)
    5980:	68 85       	ldd	r22, Y+8	; 0x08
    5982:	79 85       	ldd	r23, Y+9	; 0x09
    5984:	8a 85       	ldd	r24, Y+10	; 0x0a
    5986:	9b 85       	ldd	r25, Y+11	; 0x0b
    5988:	20 e0       	ldi	r18, 0x00	; 0
    598a:	3f ef       	ldi	r19, 0xFF	; 255
    598c:	4f e7       	ldi	r20, 0x7F	; 127
    598e:	57 e4       	ldi	r21, 0x47	; 71
    5990:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5994:	18 16       	cp	r1, r24
    5996:	4c f5       	brge	.+82     	; 0x59ea <LCD_on+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5998:	6c 85       	ldd	r22, Y+12	; 0x0c
    599a:	7d 85       	ldd	r23, Y+13	; 0x0d
    599c:	8e 85       	ldd	r24, Y+14	; 0x0e
    599e:	9f 85       	ldd	r25, Y+15	; 0x0f
    59a0:	20 e0       	ldi	r18, 0x00	; 0
    59a2:	30 e0       	ldi	r19, 0x00	; 0
    59a4:	40 e2       	ldi	r20, 0x20	; 32
    59a6:	51 e4       	ldi	r21, 0x41	; 65
    59a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59ac:	dc 01       	movw	r26, r24
    59ae:	cb 01       	movw	r24, r22
    59b0:	bc 01       	movw	r22, r24
    59b2:	cd 01       	movw	r24, r26
    59b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59b8:	dc 01       	movw	r26, r24
    59ba:	cb 01       	movw	r24, r22
    59bc:	9f 83       	std	Y+7, r25	; 0x07
    59be:	8e 83       	std	Y+6, r24	; 0x06
    59c0:	0f c0       	rjmp	.+30     	; 0x59e0 <LCD_on+0x144>
    59c2:	88 ec       	ldi	r24, 0xC8	; 200
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	9d 83       	std	Y+5, r25	; 0x05
    59c8:	8c 83       	std	Y+4, r24	; 0x04
    59ca:	8c 81       	ldd	r24, Y+4	; 0x04
    59cc:	9d 81       	ldd	r25, Y+5	; 0x05
    59ce:	01 97       	sbiw	r24, 0x01	; 1
    59d0:	f1 f7       	brne	.-4      	; 0x59ce <LCD_on+0x132>
    59d2:	9d 83       	std	Y+5, r25	; 0x05
    59d4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59d6:	8e 81       	ldd	r24, Y+6	; 0x06
    59d8:	9f 81       	ldd	r25, Y+7	; 0x07
    59da:	01 97       	sbiw	r24, 0x01	; 1
    59dc:	9f 83       	std	Y+7, r25	; 0x07
    59de:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59e0:	8e 81       	ldd	r24, Y+6	; 0x06
    59e2:	9f 81       	ldd	r25, Y+7	; 0x07
    59e4:	00 97       	sbiw	r24, 0x00	; 0
    59e6:	69 f7       	brne	.-38     	; 0x59c2 <LCD_on+0x126>
    59e8:	24 c0       	rjmp	.+72     	; 0x5a32 <LCD_on+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59ea:	68 85       	ldd	r22, Y+8	; 0x08
    59ec:	79 85       	ldd	r23, Y+9	; 0x09
    59ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    59f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    59f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59f6:	dc 01       	movw	r26, r24
    59f8:	cb 01       	movw	r24, r22
    59fa:	9f 83       	std	Y+7, r25	; 0x07
    59fc:	8e 83       	std	Y+6, r24	; 0x06
    59fe:	8e 81       	ldd	r24, Y+6	; 0x06
    5a00:	9f 81       	ldd	r25, Y+7	; 0x07
    5a02:	9b 83       	std	Y+3, r25	; 0x03
    5a04:	8a 83       	std	Y+2, r24	; 0x02
    5a06:	8a 81       	ldd	r24, Y+2	; 0x02
    5a08:	9b 81       	ldd	r25, Y+3	; 0x03
    5a0a:	01 97       	sbiw	r24, 0x01	; 1
    5a0c:	f1 f7       	brne	.-4      	; 0x5a0a <LCD_on+0x16e>
    5a0e:	9b 83       	std	Y+3, r25	; 0x03
    5a10:	8a 83       	std	Y+2, r24	; 0x02
    5a12:	0f c0       	rjmp	.+30     	; 0x5a32 <LCD_on+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5a14:	69 89       	ldd	r22, Y+17	; 0x11
    5a16:	7a 89       	ldd	r23, Y+18	; 0x12
    5a18:	8b 89       	ldd	r24, Y+19	; 0x13
    5a1a:	9c 89       	ldd	r25, Y+20	; 0x14
    5a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a20:	dc 01       	movw	r26, r24
    5a22:	cb 01       	movw	r24, r22
    5a24:	88 8b       	std	Y+16, r24	; 0x10
    5a26:	88 89       	ldd	r24, Y+16	; 0x10
    5a28:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5a2a:	89 81       	ldd	r24, Y+1	; 0x01
    5a2c:	8a 95       	dec	r24
    5a2e:	f1 f7       	brne	.-4      	; 0x5a2c <LCD_on+0x190>
    5a30:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    5a32:	68 96       	adiw	r28, 0x18	; 24
    5a34:	0f b6       	in	r0, 0x3f	; 63
    5a36:	f8 94       	cli
    5a38:	de bf       	out	0x3e, r29	; 62
    5a3a:	0f be       	out	0x3f, r0	; 63
    5a3c:	cd bf       	out	0x3d, r28	; 61
    5a3e:	cf 91       	pop	r28
    5a40:	df 91       	pop	r29
    5a42:	08 95       	ret

00005a44 <LCD_create_char>:

void LCD_create_char(u8* copy_pu8_char_data, u8 copy_u8_loc){
    5a44:	df 93       	push	r29
    5a46:	cf 93       	push	r28
    5a48:	00 d0       	rcall	.+0      	; 0x5a4a <LCD_create_char+0x6>
    5a4a:	0f 92       	push	r0
    5a4c:	cd b7       	in	r28, 0x3d	; 61
    5a4e:	de b7       	in	r29, 0x3e	; 62
    5a50:	9a 83       	std	Y+2, r25	; 0x02
    5a52:	89 83       	std	Y+1, r24	; 0x01
    5a54:	6b 83       	std	Y+3, r22	; 0x03
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface

#endif
}
    5a56:	0f 90       	pop	r0
    5a58:	0f 90       	pop	r0
    5a5a:	0f 90       	pop	r0
    5a5c:	cf 91       	pop	r28
    5a5e:	df 91       	pop	r29
    5a60:	08 95       	ret

00005a62 <LCD_write_char>:

void LCD_write_char(u8 copy_u8_char){
    5a62:	df 93       	push	r29
    5a64:	cf 93       	push	r28
    5a66:	cd b7       	in	r28, 0x3d	; 61
    5a68:	de b7       	in	r29, 0x3e	; 62
    5a6a:	69 97       	sbiw	r28, 0x19	; 25
    5a6c:	0f b6       	in	r0, 0x3f	; 63
    5a6e:	f8 94       	cli
    5a70:	de bf       	out	0x3e, r29	; 62
    5a72:	0f be       	out	0x3f, r0	; 63
    5a74:	cd bf       	out	0x3d, r28	; 61
    5a76:	89 8f       	std	Y+25, r24	; 0x19
	LCD_write_data_8bit(copy_u8_char);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Wait more than 39 us
	LCD_write_data_4bit(copy_u8_char);
    5a78:	89 8d       	ldd	r24, Y+25	; 0x19
    5a7a:	0e 94 0a 13 	call	0x2614	; 0x2614 <LCD_write_data_4bit>
    5a7e:	80 e0       	ldi	r24, 0x00	; 0
    5a80:	90 e0       	ldi	r25, 0x00	; 0
    5a82:	a8 e4       	ldi	r26, 0x48	; 72
    5a84:	b2 e4       	ldi	r27, 0x42	; 66
    5a86:	8d 8b       	std	Y+21, r24	; 0x15
    5a88:	9e 8b       	std	Y+22, r25	; 0x16
    5a8a:	af 8b       	std	Y+23, r26	; 0x17
    5a8c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5a8e:	6d 89       	ldd	r22, Y+21	; 0x15
    5a90:	7e 89       	ldd	r23, Y+22	; 0x16
    5a92:	8f 89       	ldd	r24, Y+23	; 0x17
    5a94:	98 8d       	ldd	r25, Y+24	; 0x18
    5a96:	2b ea       	ldi	r18, 0xAB	; 171
    5a98:	3a ea       	ldi	r19, 0xAA	; 170
    5a9a:	4a e2       	ldi	r20, 0x2A	; 42
    5a9c:	50 e4       	ldi	r21, 0x40	; 64
    5a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5aa2:	dc 01       	movw	r26, r24
    5aa4:	cb 01       	movw	r24, r22
    5aa6:	89 8b       	std	Y+17, r24	; 0x11
    5aa8:	9a 8b       	std	Y+18, r25	; 0x12
    5aaa:	ab 8b       	std	Y+19, r26	; 0x13
    5aac:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5aae:	69 89       	ldd	r22, Y+17	; 0x11
    5ab0:	7a 89       	ldd	r23, Y+18	; 0x12
    5ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    5ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    5ab6:	20 e0       	ldi	r18, 0x00	; 0
    5ab8:	30 e0       	ldi	r19, 0x00	; 0
    5aba:	40 e8       	ldi	r20, 0x80	; 128
    5abc:	5f e3       	ldi	r21, 0x3F	; 63
    5abe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ac2:	88 23       	and	r24, r24
    5ac4:	1c f4       	brge	.+6      	; 0x5acc <LCD_write_char+0x6a>
		__ticks = 1;
    5ac6:	81 e0       	ldi	r24, 0x01	; 1
    5ac8:	88 8b       	std	Y+16, r24	; 0x10
    5aca:	91 c0       	rjmp	.+290    	; 0x5bee <LCD_write_char+0x18c>
	else if (__tmp > 255)
    5acc:	69 89       	ldd	r22, Y+17	; 0x11
    5ace:	7a 89       	ldd	r23, Y+18	; 0x12
    5ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    5ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    5ad4:	20 e0       	ldi	r18, 0x00	; 0
    5ad6:	30 e0       	ldi	r19, 0x00	; 0
    5ad8:	4f e7       	ldi	r20, 0x7F	; 127
    5ada:	53 e4       	ldi	r21, 0x43	; 67
    5adc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ae0:	18 16       	cp	r1, r24
    5ae2:	0c f0       	brlt	.+2      	; 0x5ae6 <LCD_write_char+0x84>
    5ae4:	7b c0       	rjmp	.+246    	; 0x5bdc <LCD_write_char+0x17a>
	{
		_delay_ms(__us / 1000.0);
    5ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    5ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    5aea:	8f 89       	ldd	r24, Y+23	; 0x17
    5aec:	98 8d       	ldd	r25, Y+24	; 0x18
    5aee:	20 e0       	ldi	r18, 0x00	; 0
    5af0:	30 e0       	ldi	r19, 0x00	; 0
    5af2:	4a e7       	ldi	r20, 0x7A	; 122
    5af4:	54 e4       	ldi	r21, 0x44	; 68
    5af6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5afa:	dc 01       	movw	r26, r24
    5afc:	cb 01       	movw	r24, r22
    5afe:	8c 87       	std	Y+12, r24	; 0x0c
    5b00:	9d 87       	std	Y+13, r25	; 0x0d
    5b02:	ae 87       	std	Y+14, r26	; 0x0e
    5b04:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b06:	6c 85       	ldd	r22, Y+12	; 0x0c
    5b08:	7d 85       	ldd	r23, Y+13	; 0x0d
    5b0a:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b0c:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b0e:	20 e0       	ldi	r18, 0x00	; 0
    5b10:	30 e0       	ldi	r19, 0x00	; 0
    5b12:	4a ef       	ldi	r20, 0xFA	; 250
    5b14:	54 e4       	ldi	r21, 0x44	; 68
    5b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b1a:	dc 01       	movw	r26, r24
    5b1c:	cb 01       	movw	r24, r22
    5b1e:	88 87       	std	Y+8, r24	; 0x08
    5b20:	99 87       	std	Y+9, r25	; 0x09
    5b22:	aa 87       	std	Y+10, r26	; 0x0a
    5b24:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5b26:	68 85       	ldd	r22, Y+8	; 0x08
    5b28:	79 85       	ldd	r23, Y+9	; 0x09
    5b2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b2e:	20 e0       	ldi	r18, 0x00	; 0
    5b30:	30 e0       	ldi	r19, 0x00	; 0
    5b32:	40 e8       	ldi	r20, 0x80	; 128
    5b34:	5f e3       	ldi	r21, 0x3F	; 63
    5b36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b3a:	88 23       	and	r24, r24
    5b3c:	2c f4       	brge	.+10     	; 0x5b48 <LCD_write_char+0xe6>
		__ticks = 1;
    5b3e:	81 e0       	ldi	r24, 0x01	; 1
    5b40:	90 e0       	ldi	r25, 0x00	; 0
    5b42:	9f 83       	std	Y+7, r25	; 0x07
    5b44:	8e 83       	std	Y+6, r24	; 0x06
    5b46:	3f c0       	rjmp	.+126    	; 0x5bc6 <LCD_write_char+0x164>
	else if (__tmp > 65535)
    5b48:	68 85       	ldd	r22, Y+8	; 0x08
    5b4a:	79 85       	ldd	r23, Y+9	; 0x09
    5b4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b50:	20 e0       	ldi	r18, 0x00	; 0
    5b52:	3f ef       	ldi	r19, 0xFF	; 255
    5b54:	4f e7       	ldi	r20, 0x7F	; 127
    5b56:	57 e4       	ldi	r21, 0x47	; 71
    5b58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b5c:	18 16       	cp	r1, r24
    5b5e:	4c f5       	brge	.+82     	; 0x5bb2 <LCD_write_char+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b60:	6c 85       	ldd	r22, Y+12	; 0x0c
    5b62:	7d 85       	ldd	r23, Y+13	; 0x0d
    5b64:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b66:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b68:	20 e0       	ldi	r18, 0x00	; 0
    5b6a:	30 e0       	ldi	r19, 0x00	; 0
    5b6c:	40 e2       	ldi	r20, 0x20	; 32
    5b6e:	51 e4       	ldi	r21, 0x41	; 65
    5b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b74:	dc 01       	movw	r26, r24
    5b76:	cb 01       	movw	r24, r22
    5b78:	bc 01       	movw	r22, r24
    5b7a:	cd 01       	movw	r24, r26
    5b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b80:	dc 01       	movw	r26, r24
    5b82:	cb 01       	movw	r24, r22
    5b84:	9f 83       	std	Y+7, r25	; 0x07
    5b86:	8e 83       	std	Y+6, r24	; 0x06
    5b88:	0f c0       	rjmp	.+30     	; 0x5ba8 <LCD_write_char+0x146>
    5b8a:	88 ec       	ldi	r24, 0xC8	; 200
    5b8c:	90 e0       	ldi	r25, 0x00	; 0
    5b8e:	9d 83       	std	Y+5, r25	; 0x05
    5b90:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5b92:	8c 81       	ldd	r24, Y+4	; 0x04
    5b94:	9d 81       	ldd	r25, Y+5	; 0x05
    5b96:	01 97       	sbiw	r24, 0x01	; 1
    5b98:	f1 f7       	brne	.-4      	; 0x5b96 <LCD_write_char+0x134>
    5b9a:	9d 83       	std	Y+5, r25	; 0x05
    5b9c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    5ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    5ba2:	01 97       	sbiw	r24, 0x01	; 1
    5ba4:	9f 83       	std	Y+7, r25	; 0x07
    5ba6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ba8:	8e 81       	ldd	r24, Y+6	; 0x06
    5baa:	9f 81       	ldd	r25, Y+7	; 0x07
    5bac:	00 97       	sbiw	r24, 0x00	; 0
    5bae:	69 f7       	brne	.-38     	; 0x5b8a <LCD_write_char+0x128>
    5bb0:	24 c0       	rjmp	.+72     	; 0x5bfa <LCD_write_char+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bb2:	68 85       	ldd	r22, Y+8	; 0x08
    5bb4:	79 85       	ldd	r23, Y+9	; 0x09
    5bb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5bb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    5bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bbe:	dc 01       	movw	r26, r24
    5bc0:	cb 01       	movw	r24, r22
    5bc2:	9f 83       	std	Y+7, r25	; 0x07
    5bc4:	8e 83       	std	Y+6, r24	; 0x06
    5bc6:	8e 81       	ldd	r24, Y+6	; 0x06
    5bc8:	9f 81       	ldd	r25, Y+7	; 0x07
    5bca:	9b 83       	std	Y+3, r25	; 0x03
    5bcc:	8a 83       	std	Y+2, r24	; 0x02
    5bce:	8a 81       	ldd	r24, Y+2	; 0x02
    5bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    5bd2:	01 97       	sbiw	r24, 0x01	; 1
    5bd4:	f1 f7       	brne	.-4      	; 0x5bd2 <LCD_write_char+0x170>
    5bd6:	9b 83       	std	Y+3, r25	; 0x03
    5bd8:	8a 83       	std	Y+2, r24	; 0x02
    5bda:	0f c0       	rjmp	.+30     	; 0x5bfa <LCD_write_char+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5bdc:	69 89       	ldd	r22, Y+17	; 0x11
    5bde:	7a 89       	ldd	r23, Y+18	; 0x12
    5be0:	8b 89       	ldd	r24, Y+19	; 0x13
    5be2:	9c 89       	ldd	r25, Y+20	; 0x14
    5be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5be8:	dc 01       	movw	r26, r24
    5bea:	cb 01       	movw	r24, r22
    5bec:	88 8b       	std	Y+16, r24	; 0x10
    5bee:	88 89       	ldd	r24, Y+16	; 0x10
    5bf0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5bf2:	89 81       	ldd	r24, Y+1	; 0x01
    5bf4:	8a 95       	dec	r24
    5bf6:	f1 f7       	brne	.-4      	; 0x5bf4 <LCD_write_char+0x192>
    5bf8:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    5bfa:	69 96       	adiw	r28, 0x19	; 25
    5bfc:	0f b6       	in	r0, 0x3f	; 63
    5bfe:	f8 94       	cli
    5c00:	de bf       	out	0x3e, r29	; 62
    5c02:	0f be       	out	0x3f, r0	; 63
    5c04:	cd bf       	out	0x3d, r28	; 61
    5c06:	cf 91       	pop	r28
    5c08:	df 91       	pop	r29
    5c0a:	08 95       	ret

00005c0c <LCD_write_str>:

void LCD_write_str(u8* copy_pu8_str_ref){
    5c0c:	df 93       	push	r29
    5c0e:	cf 93       	push	r28
    5c10:	00 d0       	rcall	.+0      	; 0x5c12 <LCD_write_str+0x6>
    5c12:	0f 92       	push	r0
    5c14:	cd b7       	in	r28, 0x3d	; 61
    5c16:	de b7       	in	r29, 0x3e	; 62
    5c18:	9b 83       	std	Y+3, r25	; 0x03
    5c1a:	8a 83       	std	Y+2, r24	; 0x02
	 *		copy_pu8_str_ref>> Pointer to the first element of the string.
	 *	
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
    5c1c:	19 82       	std	Y+1, r1	; 0x01
    5c1e:	0e c0       	rjmp	.+28     	; 0x5c3c <LCD_write_str+0x30>
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
    5c20:	89 81       	ldd	r24, Y+1	; 0x01
    5c22:	28 2f       	mov	r18, r24
    5c24:	30 e0       	ldi	r19, 0x00	; 0
    5c26:	8a 81       	ldd	r24, Y+2	; 0x02
    5c28:	9b 81       	ldd	r25, Y+3	; 0x03
    5c2a:	fc 01       	movw	r30, r24
    5c2c:	e2 0f       	add	r30, r18
    5c2e:	f3 1f       	adc	r31, r19
    5c30:	80 81       	ld	r24, Z
    5c32:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <LCD_write_char>
		// Increment the string index
		i++;
    5c36:	89 81       	ldd	r24, Y+1	; 0x01
    5c38:	8f 5f       	subi	r24, 0xFF	; 255
    5c3a:	89 83       	std	Y+1, r24	; 0x01
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
    5c3c:	89 81       	ldd	r24, Y+1	; 0x01
    5c3e:	28 2f       	mov	r18, r24
    5c40:	30 e0       	ldi	r19, 0x00	; 0
    5c42:	8a 81       	ldd	r24, Y+2	; 0x02
    5c44:	9b 81       	ldd	r25, Y+3	; 0x03
    5c46:	fc 01       	movw	r30, r24
    5c48:	e2 0f       	add	r30, r18
    5c4a:	f3 1f       	adc	r31, r19
    5c4c:	80 81       	ld	r24, Z
    5c4e:	88 23       	and	r24, r24
    5c50:	39 f7       	brne	.-50     	; 0x5c20 <LCD_write_str+0x14>
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
		// Increment the string index
		i++;
	}
}
    5c52:	0f 90       	pop	r0
    5c54:	0f 90       	pop	r0
    5c56:	0f 90       	pop	r0
    5c58:	cf 91       	pop	r28
    5c5a:	df 91       	pop	r29
    5c5c:	08 95       	ret

00005c5e <LCD_write_s32_number>:

void LCD_write_s32_number(s32 copy_s32_number){
    5c5e:	0f 93       	push	r16
    5c60:	1f 93       	push	r17
    5c62:	df 93       	push	r29
    5c64:	cf 93       	push	r28
    5c66:	cd b7       	in	r28, 0x3d	; 61
    5c68:	de b7       	in	r29, 0x3e	; 62
    5c6a:	60 97       	sbiw	r28, 0x10	; 16
    5c6c:	0f b6       	in	r0, 0x3f	; 63
    5c6e:	f8 94       	cli
    5c70:	de bf       	out	0x3e, r29	; 62
    5c72:	0f be       	out	0x3f, r0	; 63
    5c74:	cd bf       	out	0x3d, r28	; 61
    5c76:	6d 87       	std	Y+13, r22	; 0x0d
    5c78:	7e 87       	std	Y+14, r23	; 0x0e
    5c7a:	8f 87       	std	Y+15, r24	; 0x0f
    5c7c:	98 8b       	std	Y+16, r25	; 0x10
	 *		copy_s32_number>> The number to displayed.
	 *	
	 *	Function does not return any values.
	 */
	// Print zero if the original number is zero
	if(0 == copy_s32_number)
    5c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c82:	af 85       	ldd	r26, Y+15	; 0x0f
    5c84:	b8 89       	ldd	r27, Y+16	; 0x10
    5c86:	00 97       	sbiw	r24, 0x00	; 0
    5c88:	a1 05       	cpc	r26, r1
    5c8a:	b1 05       	cpc	r27, r1
    5c8c:	21 f4       	brne	.+8      	; 0x5c96 <LCD_write_s32_number+0x38>
		LCD_write_char('0');
    5c8e:	80 e3       	ldi	r24, 0x30	; 48
    5c90:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <LCD_write_char>
    5c94:	18 c0       	rjmp	.+48     	; 0x5cc6 <LCD_write_s32_number+0x68>
	// Check if the number is negative to print sign
	else if(0 > copy_s32_number){
    5c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c9a:	af 85       	ldd	r26, Y+15	; 0x0f
    5c9c:	b8 89       	ldd	r27, Y+16	; 0x10
    5c9e:	bb 23       	and	r27, r27
    5ca0:	94 f4       	brge	.+36     	; 0x5cc6 <LCD_write_s32_number+0x68>
		// Print the negative sign
		LCD_write_char('-');
    5ca2:	8d e2       	ldi	r24, 0x2D	; 45
    5ca4:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <LCD_write_char>
		// Conver the number to positive
		copy_s32_number *= -1;
    5ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cac:	af 85       	ldd	r26, Y+15	; 0x0f
    5cae:	b8 89       	ldd	r27, Y+16	; 0x10
    5cb0:	b0 95       	com	r27
    5cb2:	a0 95       	com	r26
    5cb4:	90 95       	com	r25
    5cb6:	81 95       	neg	r24
    5cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    5cba:	af 4f       	sbci	r26, 0xFF	; 255
    5cbc:	bf 4f       	sbci	r27, 0xFF	; 255
    5cbe:	8d 87       	std	Y+13, r24	; 0x0d
    5cc0:	9e 87       	std	Y+14, r25	; 0x0e
    5cc2:	af 87       	std	Y+15, r26	; 0x0f
    5cc4:	b8 8b       	std	Y+16, r27	; 0x10
	}
	// Start printing the given number
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
    5cc6:	1a 82       	std	Y+2, r1	; 0x02
    5cc8:	2d c0       	rjmp	.+90     	; 0x5d24 <LCD_write_s32_number+0xc6>
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
		// Store the units in the container in the current index
		val_container[counter]= copy_s32_number%10;
    5cca:	8a 81       	ldd	r24, Y+2	; 0x02
    5ccc:	08 2f       	mov	r16, r24
    5cce:	10 e0       	ldi	r17, 0x00	; 0
    5cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cd4:	af 85       	ldd	r26, Y+15	; 0x0f
    5cd6:	b8 89       	ldd	r27, Y+16	; 0x10
    5cd8:	2a e0       	ldi	r18, 0x0A	; 10
    5cda:	30 e0       	ldi	r19, 0x00	; 0
    5cdc:	40 e0       	ldi	r20, 0x00	; 0
    5cde:	50 e0       	ldi	r21, 0x00	; 0
    5ce0:	bc 01       	movw	r22, r24
    5ce2:	cd 01       	movw	r24, r26
    5ce4:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__divmodsi4>
    5ce8:	dc 01       	movw	r26, r24
    5cea:	cb 01       	movw	r24, r22
    5cec:	28 2f       	mov	r18, r24
    5cee:	ce 01       	movw	r24, r28
    5cf0:	03 96       	adiw	r24, 0x03	; 3
    5cf2:	fc 01       	movw	r30, r24
    5cf4:	e0 0f       	add	r30, r16
    5cf6:	f1 1f       	adc	r31, r17
    5cf8:	20 83       	st	Z, r18
		// Remove the stored unit from the original number
		copy_s32_number /= 10;
    5cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cfe:	af 85       	ldd	r26, Y+15	; 0x0f
    5d00:	b8 89       	ldd	r27, Y+16	; 0x10
    5d02:	2a e0       	ldi	r18, 0x0A	; 10
    5d04:	30 e0       	ldi	r19, 0x00	; 0
    5d06:	40 e0       	ldi	r20, 0x00	; 0
    5d08:	50 e0       	ldi	r21, 0x00	; 0
    5d0a:	bc 01       	movw	r22, r24
    5d0c:	cd 01       	movw	r24, r26
    5d0e:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__divmodsi4>
    5d12:	da 01       	movw	r26, r20
    5d14:	c9 01       	movw	r24, r18
    5d16:	8d 87       	std	Y+13, r24	; 0x0d
    5d18:	9e 87       	std	Y+14, r25	; 0x0e
    5d1a:	af 87       	std	Y+15, r26	; 0x0f
    5d1c:	b8 8b       	std	Y+16, r27	; 0x10
		// Increment the index
		counter++;
    5d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d20:	8f 5f       	subi	r24, 0xFF	; 255
    5d22:	8a 83       	std	Y+2, r24	; 0x02
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
    5d24:	8a 81       	ldd	r24, Y+2	; 0x02
    5d26:	8b 30       	cpi	r24, 0x0B	; 11
    5d28:	40 f4       	brcc	.+16     	; 0x5d3a <LCD_write_s32_number+0xdc>
    5d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d2e:	af 85       	ldd	r26, Y+15	; 0x0f
    5d30:	b8 89       	ldd	r27, Y+16	; 0x10
    5d32:	00 97       	sbiw	r24, 0x00	; 0
    5d34:	a1 05       	cpc	r26, r1
    5d36:	b1 05       	cpc	r27, r1
    5d38:	41 f6       	brne	.-112    	; 0x5cca <LCD_write_s32_number+0x6c>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    5d3a:	81 e0       	ldi	r24, 0x01	; 1
    5d3c:	89 83       	std	Y+1, r24	; 0x01
    5d3e:	14 c0       	rjmp	.+40     	; 0x5d68 <LCD_write_s32_number+0x10a>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
    5d40:	8a 81       	ldd	r24, Y+2	; 0x02
    5d42:	28 2f       	mov	r18, r24
    5d44:	30 e0       	ldi	r19, 0x00	; 0
    5d46:	89 81       	ldd	r24, Y+1	; 0x01
    5d48:	88 2f       	mov	r24, r24
    5d4a:	90 e0       	ldi	r25, 0x00	; 0
    5d4c:	28 1b       	sub	r18, r24
    5d4e:	39 0b       	sbc	r19, r25
    5d50:	ce 01       	movw	r24, r28
    5d52:	03 96       	adiw	r24, 0x03	; 3
    5d54:	fc 01       	movw	r30, r24
    5d56:	e2 0f       	add	r30, r18
    5d58:	f3 1f       	adc	r31, r19
    5d5a:	80 81       	ld	r24, Z
    5d5c:	80 5d       	subi	r24, 0xD0	; 208
    5d5e:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <LCD_write_char>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    5d62:	89 81       	ldd	r24, Y+1	; 0x01
    5d64:	8f 5f       	subi	r24, 0xFF	; 255
    5d66:	89 83       	std	Y+1, r24	; 0x01
    5d68:	89 81       	ldd	r24, Y+1	; 0x01
    5d6a:	28 2f       	mov	r18, r24
    5d6c:	30 e0       	ldi	r19, 0x00	; 0
    5d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d70:	88 2f       	mov	r24, r24
    5d72:	90 e0       	ldi	r25, 0x00	; 0
    5d74:	01 96       	adiw	r24, 0x01	; 1
    5d76:	28 17       	cp	r18, r24
    5d78:	39 07       	cpc	r19, r25
    5d7a:	14 f3       	brlt	.-60     	; 0x5d40 <LCD_write_s32_number+0xe2>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
	}
}
    5d7c:	60 96       	adiw	r28, 0x10	; 16
    5d7e:	0f b6       	in	r0, 0x3f	; 63
    5d80:	f8 94       	cli
    5d82:	de bf       	out	0x3e, r29	; 62
    5d84:	0f be       	out	0x3f, r0	; 63
    5d86:	cd bf       	out	0x3d, r28	; 61
    5d88:	cf 91       	pop	r28
    5d8a:	df 91       	pop	r29
    5d8c:	1f 91       	pop	r17
    5d8e:	0f 91       	pop	r16
    5d90:	08 95       	ret

00005d92 <LCD_write_float>:

void LCD_write_float(f32 copy_f32_number, u8 copy_u8_floating_point){
    5d92:	ef 92       	push	r14
    5d94:	ff 92       	push	r15
    5d96:	0f 93       	push	r16
    5d98:	1f 93       	push	r17
    5d9a:	df 93       	push	r29
    5d9c:	cf 93       	push	r28
    5d9e:	cd b7       	in	r28, 0x3d	; 61
    5da0:	de b7       	in	r29, 0x3e	; 62
    5da2:	2d 97       	sbiw	r28, 0x0d	; 13
    5da4:	0f b6       	in	r0, 0x3f	; 63
    5da6:	f8 94       	cli
    5da8:	de bf       	out	0x3e, r29	; 62
    5daa:	0f be       	out	0x3f, r0	; 63
    5dac:	cd bf       	out	0x3d, r28	; 61
    5dae:	69 87       	std	Y+9, r22	; 0x09
    5db0:	7a 87       	std	Y+10, r23	; 0x0a
    5db2:	8b 87       	std	Y+11, r24	; 0x0b
    5db4:	9c 87       	std	Y+12, r25	; 0x0c
    5db6:	4d 87       	std	Y+13, r20	; 0x0d
	 *		copy_u8_floating_point>> Required floating point to display.
	 *	
	 *	Function does not return any values.
	 */
	// Get the decimal value
	s32 int_val = (s32)copy_f32_number;
    5db8:	69 85       	ldd	r22, Y+9	; 0x09
    5dba:	7a 85       	ldd	r23, Y+10	; 0x0a
    5dbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    5dbe:	9c 85       	ldd	r25, Y+12	; 0x0c
    5dc0:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5dc4:	dc 01       	movw	r26, r24
    5dc6:	cb 01       	movw	r24, r22
    5dc8:	8d 83       	std	Y+5, r24	; 0x05
    5dca:	9e 83       	std	Y+6, r25	; 0x06
    5dcc:	af 83       	std	Y+7, r26	; 0x07
    5dce:	b8 87       	std	Y+8, r27	; 0x08
	// Get the floating value
	s32 float_val = (s32)((copy_f32_number - (f32)int_val) * LCD_pow(10, copy_u8_floating_point));
    5dd0:	6d 81       	ldd	r22, Y+5	; 0x05
    5dd2:	7e 81       	ldd	r23, Y+6	; 0x06
    5dd4:	8f 81       	ldd	r24, Y+7	; 0x07
    5dd6:	98 85       	ldd	r25, Y+8	; 0x08
    5dd8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5ddc:	9b 01       	movw	r18, r22
    5dde:	ac 01       	movw	r20, r24
    5de0:	69 85       	ldd	r22, Y+9	; 0x09
    5de2:	7a 85       	ldd	r23, Y+10	; 0x0a
    5de4:	8b 85       	ldd	r24, Y+11	; 0x0b
    5de6:	9c 85       	ldd	r25, Y+12	; 0x0c
    5de8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5dec:	dc 01       	movw	r26, r24
    5dee:	cb 01       	movw	r24, r22
    5df0:	7c 01       	movw	r14, r24
    5df2:	8d 01       	movw	r16, r26
    5df4:	8a e0       	ldi	r24, 0x0A	; 10
    5df6:	6d 85       	ldd	r22, Y+13	; 0x0d
    5df8:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_pow>
    5dfc:	dc 01       	movw	r26, r24
    5dfe:	cb 01       	movw	r24, r22
    5e00:	bc 01       	movw	r22, r24
    5e02:	cd 01       	movw	r24, r26
    5e04:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5e08:	9b 01       	movw	r18, r22
    5e0a:	ac 01       	movw	r20, r24
    5e0c:	c8 01       	movw	r24, r16
    5e0e:	b7 01       	movw	r22, r14
    5e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e14:	dc 01       	movw	r26, r24
    5e16:	cb 01       	movw	r24, r22
    5e18:	bc 01       	movw	r22, r24
    5e1a:	cd 01       	movw	r24, r26
    5e1c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5e20:	dc 01       	movw	r26, r24
    5e22:	cb 01       	movw	r24, r22
    5e24:	89 83       	std	Y+1, r24	; 0x01
    5e26:	9a 83       	std	Y+2, r25	; 0x02
    5e28:	ab 83       	std	Y+3, r26	; 0x03
    5e2a:	bc 83       	std	Y+4, r27	; 0x04
	// Print the decimal value
	LCD_write_s32_number(int_val);
    5e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    5e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    5e30:	af 81       	ldd	r26, Y+7	; 0x07
    5e32:	b8 85       	ldd	r27, Y+8	; 0x08
    5e34:	bc 01       	movw	r22, r24
    5e36:	cd 01       	movw	r24, r26
    5e38:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <LCD_write_s32_number>
	// Print the decimal point
	LCD_write_char('.');
    5e3c:	8e e2       	ldi	r24, 0x2E	; 46
    5e3e:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <LCD_write_char>
	// Print the floating value after making sure its postive
	LCD_write_s32_number((float_val&(~(1<<7))));
    5e42:	89 81       	ldd	r24, Y+1	; 0x01
    5e44:	9a 81       	ldd	r25, Y+2	; 0x02
    5e46:	ab 81       	ldd	r26, Y+3	; 0x03
    5e48:	bc 81       	ldd	r27, Y+4	; 0x04
    5e4a:	8f 77       	andi	r24, 0x7F	; 127
    5e4c:	bc 01       	movw	r22, r24
    5e4e:	cd 01       	movw	r24, r26
    5e50:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <LCD_write_s32_number>
	//LCD_wtire_s32_number((float_val > 0) ? float_val : (-1*float_val));
}
    5e54:	2d 96       	adiw	r28, 0x0d	; 13
    5e56:	0f b6       	in	r0, 0x3f	; 63
    5e58:	f8 94       	cli
    5e5a:	de bf       	out	0x3e, r29	; 62
    5e5c:	0f be       	out	0x3f, r0	; 63
    5e5e:	cd bf       	out	0x3d, r28	; 61
    5e60:	cf 91       	pop	r28
    5e62:	df 91       	pop	r29
    5e64:	1f 91       	pop	r17
    5e66:	0f 91       	pop	r16
    5e68:	ff 90       	pop	r15
    5e6a:	ef 90       	pop	r14
    5e6c:	08 95       	ret

00005e6e <TIMERx_vClear>:
static TIMER_t Timer_base[2];
// Counter pointers
static u32* Counter_ptr[2];

/* General functions Implementation */
void TIMERx_vClear(u8 copy_u8TimerID){
    5e6e:	df 93       	push	r29
    5e70:	cf 93       	push	r28
    5e72:	00 d0       	rcall	.+0      	; 0x5e74 <TIMERx_vClear+0x6>
    5e74:	0f 92       	push	r0
    5e76:	cd b7       	in	r28, 0x3d	; 61
    5e78:	de b7       	in	r29, 0x3e	; 62
    5e7a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	// Disable the timer interrupt
	switch(copy_u8TimerID){
    5e7c:	89 81       	ldd	r24, Y+1	; 0x01
    5e7e:	28 2f       	mov	r18, r24
    5e80:	30 e0       	ldi	r19, 0x00	; 0
    5e82:	3b 83       	std	Y+3, r19	; 0x03
    5e84:	2a 83       	std	Y+2, r18	; 0x02
    5e86:	8a 81       	ldd	r24, Y+2	; 0x02
    5e88:	9b 81       	ldd	r25, Y+3	; 0x03
    5e8a:	00 97       	sbiw	r24, 0x00	; 0
    5e8c:	31 f0       	breq	.+12     	; 0x5e9a <TIMERx_vClear+0x2c>
    5e8e:	2a 81       	ldd	r18, Y+2	; 0x02
    5e90:	3b 81       	ldd	r19, Y+3	; 0x03
    5e92:	21 30       	cpi	r18, 0x01	; 1
    5e94:	31 05       	cpc	r19, r1
    5e96:	61 f0       	breq	.+24     	; 0x5eb0 <TIMERx_vClear+0x42>
    5e98:	15 c0       	rjmp	.+42     	; 0x5ec4 <TIMERx_vClear+0x56>
		case TIMER0ID:
			// Reset timer configurations
			TIMER0_TCCR = TIMER_TCCR_Reset;
    5e9a:	e3 e5       	ldi	r30, 0x53	; 83
    5e9c:	f0 e0       	ldi	r31, 0x00	; 0
    5e9e:	10 82       	st	Z, r1
			// Disable intrrupt
			TIMER_TIMSK &= TIMER0_TIMSK_Reset;
    5ea0:	a9 e5       	ldi	r26, 0x59	; 89
    5ea2:	b0 e0       	ldi	r27, 0x00	; 0
    5ea4:	e9 e5       	ldi	r30, 0x59	; 89
    5ea6:	f0 e0       	ldi	r31, 0x00	; 0
    5ea8:	80 81       	ld	r24, Z
    5eaa:	8c 7f       	andi	r24, 0xFC	; 252
    5eac:	8c 93       	st	X, r24
    5eae:	0a c0       	rjmp	.+20     	; 0x5ec4 <TIMERx_vClear+0x56>
			break;
		case TIMER2ID:
			// Reset timer configurations
			TIMER2_TCCR = TIMER_TCCR_Reset;
    5eb0:	e5 e4       	ldi	r30, 0x45	; 69
    5eb2:	f0 e0       	ldi	r31, 0x00	; 0
    5eb4:	10 82       	st	Z, r1
			// Disable intrrupt
			TIMER_TIMSK &= TIMER2_TIMSK_Reset;
    5eb6:	a9 e5       	ldi	r26, 0x59	; 89
    5eb8:	b0 e0       	ldi	r27, 0x00	; 0
    5eba:	e9 e5       	ldi	r30, 0x59	; 89
    5ebc:	f0 e0       	ldi	r31, 0x00	; 0
    5ebe:	80 81       	ld	r24, Z
    5ec0:	8f 73       	andi	r24, 0x3F	; 63
    5ec2:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    5ec4:	0f 90       	pop	r0
    5ec6:	0f 90       	pop	r0
    5ec8:	0f 90       	pop	r0
    5eca:	cf 91       	pop	r28
    5ecc:	df 91       	pop	r29
    5ece:	08 95       	ret

00005ed0 <TIMER_u8Delay_mS>:


/* Delay functions Implementation */
u8 TIMER_u8Delay_mS(u8 copy_u8TimerID, u16 copy_DelayTime_mS, void (*ptr_callback)(void) ){
    5ed0:	ef 92       	push	r14
    5ed2:	ff 92       	push	r15
    5ed4:	0f 93       	push	r16
    5ed6:	1f 93       	push	r17
    5ed8:	df 93       	push	r29
    5eda:	cf 93       	push	r28
    5edc:	cd b7       	in	r28, 0x3d	; 61
    5ede:	de b7       	in	r29, 0x3e	; 62
    5ee0:	2e 97       	sbiw	r28, 0x0e	; 14
    5ee2:	0f b6       	in	r0, 0x3f	; 63
    5ee4:	f8 94       	cli
    5ee6:	de bf       	out	0x3e, r29	; 62
    5ee8:	0f be       	out	0x3f, r0	; 63
    5eea:	cd bf       	out	0x3d, r28	; 61
    5eec:	8d 83       	std	Y+5, r24	; 0x05
    5eee:	7f 83       	std	Y+7, r23	; 0x07
    5ef0:	6e 83       	std	Y+6, r22	; 0x06
    5ef2:	59 87       	std	Y+9, r21	; 0x09
    5ef4:	48 87       	std	Y+8, r20	; 0x08
	/*
	 *
	 */
	if((copy_u8TimerID <= TIMER1ID) && (copy_DelayTime_mS >= MIN_TIME) && (copy_DelayTime_mS <= MAX_TIME) && (Timerx_occupation_flag[copy_u8TimerID] == TIMER_Clear)){
    5ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ef8:	83 30       	cpi	r24, 0x03	; 3
    5efa:	08 f0       	brcs	.+2      	; 0x5efe <TIMER_u8Delay_mS+0x2e>
    5efc:	9b c1       	rjmp	.+822    	; 0x6234 <TIMER_u8Delay_mS+0x364>
    5efe:	8e 81       	ldd	r24, Y+6	; 0x06
    5f00:	9f 81       	ldd	r25, Y+7	; 0x07
    5f02:	00 97       	sbiw	r24, 0x00	; 0
    5f04:	09 f4       	brne	.+2      	; 0x5f08 <TIMER_u8Delay_mS+0x38>
    5f06:	96 c1       	rjmp	.+812    	; 0x6234 <TIMER_u8Delay_mS+0x364>
    5f08:	8d 81       	ldd	r24, Y+5	; 0x05
    5f0a:	88 2f       	mov	r24, r24
    5f0c:	90 e0       	ldi	r25, 0x00	; 0
    5f0e:	fc 01       	movw	r30, r24
    5f10:	e1 57       	subi	r30, 0x71	; 113
    5f12:	fe 4f       	sbci	r31, 0xFE	; 254
    5f14:	80 81       	ld	r24, Z
    5f16:	81 30       	cpi	r24, 0x01	; 1
    5f18:	09 f0       	breq	.+2      	; 0x5f1c <TIMER_u8Delay_mS+0x4c>
    5f1a:	8c c1       	rjmp	.+792    	; 0x6234 <TIMER_u8Delay_mS+0x364>
		if(copy_u8TimerID != TIMER1ID){
    5f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f1e:	82 30       	cpi	r24, 0x02	; 2
    5f20:	09 f4       	brne	.+2      	; 0x5f24 <TIMER_u8Delay_mS+0x54>
    5f22:	85 c1       	rjmp	.+778    	; 0x622e <TIMER_u8Delay_mS+0x35e>
			Timer_base[copy_u8TimerID].TIMER_OVF = 0;
    5f24:	8d 81       	ldd	r24, Y+5	; 0x05
    5f26:	88 2f       	mov	r24, r24
    5f28:	90 e0       	ldi	r25, 0x00	; 0
    5f2a:	88 0f       	add	r24, r24
    5f2c:	99 1f       	adc	r25, r25
    5f2e:	88 0f       	add	r24, r24
    5f30:	99 1f       	adc	r25, r25
    5f32:	88 0f       	add	r24, r24
    5f34:	99 1f       	adc	r25, r25
    5f36:	fc 01       	movw	r30, r24
    5f38:	e0 56       	subi	r30, 0x60	; 96
    5f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    5f3c:	11 82       	std	Z+1, r1	; 0x01
    5f3e:	10 82       	st	Z, r1
			Timer_base[copy_u8TimerID].TIMER_RestTime = 0;
    5f40:	8d 81       	ldd	r24, Y+5	; 0x05
    5f42:	88 2f       	mov	r24, r24
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	88 0f       	add	r24, r24
    5f48:	99 1f       	adc	r25, r25
    5f4a:	88 0f       	add	r24, r24
    5f4c:	99 1f       	adc	r25, r25
    5f4e:	01 96       	adiw	r24, 0x01	; 1
    5f50:	88 0f       	add	r24, r24
    5f52:	99 1f       	adc	r25, r25
    5f54:	fc 01       	movw	r30, r24
    5f56:	e0 56       	subi	r30, 0x60	; 96
    5f58:	fe 4f       	sbci	r31, 0xFE	; 254
    5f5a:	11 82       	std	Z+1, r1	; 0x01
    5f5c:	10 82       	st	Z, r1
			Timer_base[copy_u8TimerID].TIMER_Preload = 0;
    5f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    5f60:	88 2f       	mov	r24, r24
    5f62:	90 e0       	ldi	r25, 0x00	; 0
    5f64:	88 0f       	add	r24, r24
    5f66:	99 1f       	adc	r25, r25
    5f68:	01 96       	adiw	r24, 0x01	; 1
    5f6a:	88 0f       	add	r24, r24
    5f6c:	99 1f       	adc	r25, r25
    5f6e:	88 0f       	add	r24, r24
    5f70:	99 1f       	adc	r25, r25
    5f72:	fc 01       	movw	r30, r24
    5f74:	e0 56       	subi	r30, 0x60	; 96
    5f76:	fe 4f       	sbci	r31, 0xFE	; 254
    5f78:	11 82       	std	Z+1, r1	; 0x01
    5f7a:	10 82       	st	Z, r1
			Timer_base[copy_u8TimerID].ptr_callback_t = NULL;
    5f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f7e:	88 2f       	mov	r24, r24
    5f80:	90 e0       	ldi	r25, 0x00	; 0
    5f82:	88 0f       	add	r24, r24
    5f84:	99 1f       	adc	r25, r25
    5f86:	88 0f       	add	r24, r24
    5f88:	99 1f       	adc	r25, r25
    5f8a:	88 0f       	add	r24, r24
    5f8c:	99 1f       	adc	r25, r25
    5f8e:	fc 01       	movw	r30, r24
    5f90:	ea 55       	subi	r30, 0x5A	; 90
    5f92:	fe 4f       	sbci	r31, 0xFE	; 254
    5f94:	11 82       	std	Z+1, r1	; 0x01
    5f96:	10 82       	st	Z, r1
			// Raise the occupation flag
			Timerx_occupation_flag[copy_u8TimerID] = TIMER_Delay_mS;
    5f98:	8d 81       	ldd	r24, Y+5	; 0x05
    5f9a:	88 2f       	mov	r24, r24
    5f9c:	90 e0       	ldi	r25, 0x00	; 0
    5f9e:	fc 01       	movw	r30, r24
    5fa0:	e1 57       	subi	r30, 0x71	; 113
    5fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    5fa4:	82 e0       	ldi	r24, 0x02	; 2
    5fa6:	80 83       	st	Z, r24
			// Calculate number of ticks
			f64 clc_NO_Tics = ((f64)copy_DelayTime_mS * Mills_to_Micro) / Mills_TickTime;
    5fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    5faa:	9f 81       	ldd	r25, Y+7	; 0x07
    5fac:	cc 01       	movw	r24, r24
    5fae:	a0 e0       	ldi	r26, 0x00	; 0
    5fb0:	b0 e0       	ldi	r27, 0x00	; 0
    5fb2:	bc 01       	movw	r22, r24
    5fb4:	cd 01       	movw	r24, r26
    5fb6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    5fba:	dc 01       	movw	r26, r24
    5fbc:	cb 01       	movw	r24, r22
    5fbe:	bc 01       	movw	r22, r24
    5fc0:	cd 01       	movw	r24, r26
    5fc2:	20 e0       	ldi	r18, 0x00	; 0
    5fc4:	30 e0       	ldi	r19, 0x00	; 0
    5fc6:	4a e7       	ldi	r20, 0x7A	; 122
    5fc8:	54 e4       	ldi	r21, 0x44	; 68
    5fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fce:	dc 01       	movw	r26, r24
    5fd0:	cb 01       	movw	r24, r22
    5fd2:	bc 01       	movw	r22, r24
    5fd4:	cd 01       	movw	r24, r26
    5fd6:	20 e0       	ldi	r18, 0x00	; 0
    5fd8:	30 e0       	ldi	r19, 0x00	; 0
    5fda:	40 e0       	ldi	r20, 0x00	; 0
    5fdc:	53 e4       	ldi	r21, 0x43	; 67
    5fde:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5fe2:	dc 01       	movw	r26, r24
    5fe4:	cb 01       	movw	r24, r22
    5fe6:	89 83       	std	Y+1, r24	; 0x01
    5fe8:	9a 83       	std	Y+2, r25	; 0x02
    5fea:	ab 83       	std	Y+3, r26	; 0x03
    5fec:	bc 83       	std	Y+4, r27	; 0x04
			// Calulate the rest of the nano second
			Timer_base[copy_u8TimerID].TIMER_RestTime = ((copy_DelayTime_mS * Mills_to_Micro) - ((u32)clc_NO_Tics * Mills_TickTime));
    5fee:	8d 81       	ldd	r24, Y+5	; 0x05
    5ff0:	08 2f       	mov	r16, r24
    5ff2:	10 e0       	ldi	r17, 0x00	; 0
    5ff4:	2e 81       	ldd	r18, Y+6	; 0x06
    5ff6:	3f 81       	ldd	r19, Y+7	; 0x07
    5ff8:	88 ee       	ldi	r24, 0xE8	; 232
    5ffa:	93 e0       	ldi	r25, 0x03	; 3
    5ffc:	28 9f       	mul	r18, r24
    5ffe:	70 01       	movw	r14, r0
    6000:	29 9f       	mul	r18, r25
    6002:	f0 0c       	add	r15, r0
    6004:	38 9f       	mul	r19, r24
    6006:	f0 0c       	add	r15, r0
    6008:	11 24       	eor	r1, r1
    600a:	69 81       	ldd	r22, Y+1	; 0x01
    600c:	7a 81       	ldd	r23, Y+2	; 0x02
    600e:	8b 81       	ldd	r24, Y+3	; 0x03
    6010:	9c 81       	ldd	r25, Y+4	; 0x04
    6012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6016:	dc 01       	movw	r26, r24
    6018:	cb 01       	movw	r24, r22
    601a:	88 0f       	add	r24, r24
    601c:	99 1f       	adc	r25, r25
    601e:	aa 1f       	adc	r26, r26
    6020:	bb 1f       	adc	r27, r27
    6022:	88 0f       	add	r24, r24
    6024:	99 1f       	adc	r25, r25
    6026:	aa 1f       	adc	r26, r26
    6028:	bb 1f       	adc	r27, r27
    602a:	88 0f       	add	r24, r24
    602c:	99 1f       	adc	r25, r25
    602e:	aa 1f       	adc	r26, r26
    6030:	bb 1f       	adc	r27, r27
    6032:	88 0f       	add	r24, r24
    6034:	99 1f       	adc	r25, r25
    6036:	aa 1f       	adc	r26, r26
    6038:	bb 1f       	adc	r27, r27
    603a:	88 0f       	add	r24, r24
    603c:	99 1f       	adc	r25, r25
    603e:	aa 1f       	adc	r26, r26
    6040:	bb 1f       	adc	r27, r27
    6042:	88 0f       	add	r24, r24
    6044:	99 1f       	adc	r25, r25
    6046:	aa 1f       	adc	r26, r26
    6048:	bb 1f       	adc	r27, r27
    604a:	88 0f       	add	r24, r24
    604c:	99 1f       	adc	r25, r25
    604e:	aa 1f       	adc	r26, r26
    6050:	bb 1f       	adc	r27, r27
    6052:	97 01       	movw	r18, r14
    6054:	28 1b       	sub	r18, r24
    6056:	39 0b       	sbc	r19, r25
    6058:	c8 01       	movw	r24, r16
    605a:	88 0f       	add	r24, r24
    605c:	99 1f       	adc	r25, r25
    605e:	88 0f       	add	r24, r24
    6060:	99 1f       	adc	r25, r25
    6062:	01 96       	adiw	r24, 0x01	; 1
    6064:	88 0f       	add	r24, r24
    6066:	99 1f       	adc	r25, r25
    6068:	fc 01       	movw	r30, r24
    606a:	e0 56       	subi	r30, 0x60	; 96
    606c:	fe 4f       	sbci	r31, 0xFE	; 254
    606e:	31 83       	std	Z+1, r19	; 0x01
    6070:	20 83       	st	Z, r18
			// Caculate the preload value
			Timer_base[copy_u8TimerID].TIMER_Preload = (OVF_MAX - ((u32)clc_NO_Tics % OVF_MAX));
    6072:	8d 81       	ldd	r24, Y+5	; 0x05
    6074:	08 2f       	mov	r16, r24
    6076:	10 e0       	ldi	r17, 0x00	; 0
    6078:	69 81       	ldd	r22, Y+1	; 0x01
    607a:	7a 81       	ldd	r23, Y+2	; 0x02
    607c:	8b 81       	ldd	r24, Y+3	; 0x03
    607e:	9c 81       	ldd	r25, Y+4	; 0x04
    6080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6084:	dc 01       	movw	r26, r24
    6086:	cb 01       	movw	r24, r22
    6088:	9c 01       	movw	r18, r24
    608a:	30 70       	andi	r19, 0x00	; 0
    608c:	80 e0       	ldi	r24, 0x00	; 0
    608e:	91 e0       	ldi	r25, 0x01	; 1
    6090:	ac 01       	movw	r20, r24
    6092:	42 1b       	sub	r20, r18
    6094:	53 0b       	sbc	r21, r19
    6096:	9a 01       	movw	r18, r20
    6098:	c8 01       	movw	r24, r16
    609a:	88 0f       	add	r24, r24
    609c:	99 1f       	adc	r25, r25
    609e:	01 96       	adiw	r24, 0x01	; 1
    60a0:	88 0f       	add	r24, r24
    60a2:	99 1f       	adc	r25, r25
    60a4:	88 0f       	add	r24, r24
    60a6:	99 1f       	adc	r25, r25
    60a8:	fc 01       	movw	r30, r24
    60aa:	e0 56       	subi	r30, 0x60	; 96
    60ac:	fe 4f       	sbci	r31, 0xFE	; 254
    60ae:	31 83       	std	Z+1, r19	; 0x01
    60b0:	20 83       	st	Z, r18
			// Calulate the number of OVF
			Timer_base[copy_u8TimerID].TIMER_OVF = (Timer_base[copy_u8TimerID].TIMER_Preload != 0) ? (((u32)clc_NO_Tics / OVF_MAX) + 1) : ((u32)clc_NO_Tics / OVF_MAX);
    60b2:	8d 81       	ldd	r24, Y+5	; 0x05
    60b4:	28 2f       	mov	r18, r24
    60b6:	30 e0       	ldi	r19, 0x00	; 0
    60b8:	3e 87       	std	Y+14, r19	; 0x0e
    60ba:	2d 87       	std	Y+13, r18	; 0x0d
    60bc:	8d 81       	ldd	r24, Y+5	; 0x05
    60be:	88 2f       	mov	r24, r24
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	88 0f       	add	r24, r24
    60c4:	99 1f       	adc	r25, r25
    60c6:	01 96       	adiw	r24, 0x01	; 1
    60c8:	88 0f       	add	r24, r24
    60ca:	99 1f       	adc	r25, r25
    60cc:	88 0f       	add	r24, r24
    60ce:	99 1f       	adc	r25, r25
    60d0:	fc 01       	movw	r30, r24
    60d2:	e0 56       	subi	r30, 0x60	; 96
    60d4:	fe 4f       	sbci	r31, 0xFE	; 254
    60d6:	80 81       	ld	r24, Z
    60d8:	91 81       	ldd	r25, Z+1	; 0x01
    60da:	00 97       	sbiw	r24, 0x00	; 0
    60dc:	91 f0       	breq	.+36     	; 0x6102 <TIMER_u8Delay_mS+0x232>
    60de:	69 81       	ldd	r22, Y+1	; 0x01
    60e0:	7a 81       	ldd	r23, Y+2	; 0x02
    60e2:	8b 81       	ldd	r24, Y+3	; 0x03
    60e4:	9c 81       	ldd	r25, Y+4	; 0x04
    60e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ea:	dc 01       	movw	r26, r24
    60ec:	cb 01       	movw	r24, r22
    60ee:	89 2f       	mov	r24, r25
    60f0:	9a 2f       	mov	r25, r26
    60f2:	ab 2f       	mov	r26, r27
    60f4:	bb 27       	eor	r27, r27
    60f6:	ac 01       	movw	r20, r24
    60f8:	4f 5f       	subi	r20, 0xFF	; 255
    60fa:	5f 4f       	sbci	r21, 0xFF	; 255
    60fc:	5c 87       	std	Y+12, r21	; 0x0c
    60fe:	4b 87       	std	Y+11, r20	; 0x0b
    6100:	0e c0       	rjmp	.+28     	; 0x611e <TIMER_u8Delay_mS+0x24e>
    6102:	69 81       	ldd	r22, Y+1	; 0x01
    6104:	7a 81       	ldd	r23, Y+2	; 0x02
    6106:	8b 81       	ldd	r24, Y+3	; 0x03
    6108:	9c 81       	ldd	r25, Y+4	; 0x04
    610a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    610e:	dc 01       	movw	r26, r24
    6110:	cb 01       	movw	r24, r22
    6112:	89 2f       	mov	r24, r25
    6114:	9a 2f       	mov	r25, r26
    6116:	ab 2f       	mov	r26, r27
    6118:	bb 27       	eor	r27, r27
    611a:	9c 87       	std	Y+12, r25	; 0x0c
    611c:	8b 87       	std	Y+11, r24	; 0x0b
    611e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6120:	9e 85       	ldd	r25, Y+14	; 0x0e
    6122:	88 0f       	add	r24, r24
    6124:	99 1f       	adc	r25, r25
    6126:	88 0f       	add	r24, r24
    6128:	99 1f       	adc	r25, r25
    612a:	88 0f       	add	r24, r24
    612c:	99 1f       	adc	r25, r25
    612e:	fc 01       	movw	r30, r24
    6130:	e0 56       	subi	r30, 0x60	; 96
    6132:	fe 4f       	sbci	r31, 0xFE	; 254
    6134:	8b 85       	ldd	r24, Y+11	; 0x0b
    6136:	9c 85       	ldd	r25, Y+12	; 0x0c
    6138:	91 83       	std	Z+1, r25	; 0x01
    613a:	80 83       	st	Z, r24
			// Set parameters for callback
			Timer_base[copy_u8TimerID].ptr_callback_t = ptr_callback;
    613c:	8d 81       	ldd	r24, Y+5	; 0x05
    613e:	88 2f       	mov	r24, r24
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	88 0f       	add	r24, r24
    6144:	99 1f       	adc	r25, r25
    6146:	88 0f       	add	r24, r24
    6148:	99 1f       	adc	r25, r25
    614a:	88 0f       	add	r24, r24
    614c:	99 1f       	adc	r25, r25
    614e:	fc 01       	movw	r30, r24
    6150:	ea 55       	subi	r30, 0x5A	; 90
    6152:	fe 4f       	sbci	r31, 0xFE	; 254
    6154:	88 85       	ldd	r24, Y+8	; 0x08
    6156:	99 85       	ldd	r25, Y+9	; 0x09
    6158:	91 83       	std	Z+1, r25	; 0x01
    615a:	80 83       	st	Z, r24
			if(copy_u8TimerID == TIMER0ID){
    615c:	8d 81       	ldd	r24, Y+5	; 0x05
    615e:	88 23       	and	r24, r24
    6160:	91 f5       	brne	.+100    	; 0x61c6 <TIMER_u8Delay_mS+0x2f6>
				// Set preload value
				TIMER0_TCNT = Timer_base[copy_u8TimerID].TIMER_Preload;
    6162:	a2 e5       	ldi	r26, 0x52	; 82
    6164:	b0 e0       	ldi	r27, 0x00	; 0
    6166:	8d 81       	ldd	r24, Y+5	; 0x05
    6168:	88 2f       	mov	r24, r24
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	88 0f       	add	r24, r24
    616e:	99 1f       	adc	r25, r25
    6170:	01 96       	adiw	r24, 0x01	; 1
    6172:	88 0f       	add	r24, r24
    6174:	99 1f       	adc	r25, r25
    6176:	88 0f       	add	r24, r24
    6178:	99 1f       	adc	r25, r25
    617a:	fc 01       	movw	r30, r24
    617c:	e0 56       	subi	r30, 0x60	; 96
    617e:	fe 4f       	sbci	r31, 0xFE	; 254
    6180:	80 81       	ld	r24, Z
    6182:	91 81       	ldd	r25, Z+1	; 0x01
    6184:	8c 93       	st	X, r24
				// Enable intrrupt
				TIMER_TIMSK &= TIMER0_TIMSK_Reset;
    6186:	a9 e5       	ldi	r26, 0x59	; 89
    6188:	b0 e0       	ldi	r27, 0x00	; 0
    618a:	e9 e5       	ldi	r30, 0x59	; 89
    618c:	f0 e0       	ldi	r31, 0x00	; 0
    618e:	80 81       	ld	r24, Z
    6190:	8c 7f       	andi	r24, 0xFC	; 252
    6192:	8c 93       	st	X, r24
				TIMER_TIMSK |= TIMER_ENABLE;
    6194:	a9 e5       	ldi	r26, 0x59	; 89
    6196:	b0 e0       	ldi	r27, 0x00	; 0
    6198:	e9 e5       	ldi	r30, 0x59	; 89
    619a:	f0 e0       	ldi	r31, 0x00	; 0
    619c:	80 81       	ld	r24, Z
    619e:	81 60       	ori	r24, 0x01	; 1
    61a0:	8c 93       	st	X, r24
				// Enable Global Interrupt
				TIMER_SREG |= TIMER_ENABLE << TIMER_Glob_Init_bit;
    61a2:	af e5       	ldi	r26, 0x5F	; 95
    61a4:	b0 e0       	ldi	r27, 0x00	; 0
    61a6:	ef e5       	ldi	r30, 0x5F	; 95
    61a8:	f0 e0       	ldi	r31, 0x00	; 0
    61aa:	80 81       	ld	r24, Z
    61ac:	80 68       	ori	r24, 0x80	; 128
    61ae:	8c 93       	st	X, r24
				// Reset timer configurations
				TIMER0_TCCR = TIMER_TCCR_Reset;
    61b0:	e3 e5       	ldi	r30, 0x53	; 83
    61b2:	f0 e0       	ldi	r31, 0x00	; 0
    61b4:	10 82       	st	Z, r1
				// Set Prescaller to 1024
				TIMER0_TCCR |= TIMER_1024PRE;
    61b6:	a3 e5       	ldi	r26, 0x53	; 83
    61b8:	b0 e0       	ldi	r27, 0x00	; 0
    61ba:	e3 e5       	ldi	r30, 0x53	; 83
    61bc:	f0 e0       	ldi	r31, 0x00	; 0
    61be:	80 81       	ld	r24, Z
    61c0:	85 60       	ori	r24, 0x05	; 5
    61c2:	8c 93       	st	X, r24
    61c4:	31 c0       	rjmp	.+98     	; 0x6228 <TIMER_u8Delay_mS+0x358>
			}
			else{
				// Set preload value
				TIMER2_TCNT = Timer_base[copy_u8TimerID].TIMER_Preload;
    61c6:	a4 e4       	ldi	r26, 0x44	; 68
    61c8:	b0 e0       	ldi	r27, 0x00	; 0
    61ca:	8d 81       	ldd	r24, Y+5	; 0x05
    61cc:	88 2f       	mov	r24, r24
    61ce:	90 e0       	ldi	r25, 0x00	; 0
    61d0:	88 0f       	add	r24, r24
    61d2:	99 1f       	adc	r25, r25
    61d4:	01 96       	adiw	r24, 0x01	; 1
    61d6:	88 0f       	add	r24, r24
    61d8:	99 1f       	adc	r25, r25
    61da:	88 0f       	add	r24, r24
    61dc:	99 1f       	adc	r25, r25
    61de:	fc 01       	movw	r30, r24
    61e0:	e0 56       	subi	r30, 0x60	; 96
    61e2:	fe 4f       	sbci	r31, 0xFE	; 254
    61e4:	80 81       	ld	r24, Z
    61e6:	91 81       	ldd	r25, Z+1	; 0x01
    61e8:	8c 93       	st	X, r24
				// Enable intrrupt
				TIMER_TIMSK &= TIMER2_TIMSK_Reset;
    61ea:	a9 e5       	ldi	r26, 0x59	; 89
    61ec:	b0 e0       	ldi	r27, 0x00	; 0
    61ee:	e9 e5       	ldi	r30, 0x59	; 89
    61f0:	f0 e0       	ldi	r31, 0x00	; 0
    61f2:	80 81       	ld	r24, Z
    61f4:	8f 73       	andi	r24, 0x3F	; 63
    61f6:	8c 93       	st	X, r24
				TIMER_TIMSK |= TIMER_ENABLE << TIMER_TOIE2;
    61f8:	a9 e5       	ldi	r26, 0x59	; 89
    61fa:	b0 e0       	ldi	r27, 0x00	; 0
    61fc:	e9 e5       	ldi	r30, 0x59	; 89
    61fe:	f0 e0       	ldi	r31, 0x00	; 0
    6200:	80 81       	ld	r24, Z
    6202:	80 64       	ori	r24, 0x40	; 64
    6204:	8c 93       	st	X, r24
				// Enable Global Interrupt
				TIMER_SREG |= TIMER_ENABLE << TIMER_Glob_Init_bit;
    6206:	af e5       	ldi	r26, 0x5F	; 95
    6208:	b0 e0       	ldi	r27, 0x00	; 0
    620a:	ef e5       	ldi	r30, 0x5F	; 95
    620c:	f0 e0       	ldi	r31, 0x00	; 0
    620e:	80 81       	ld	r24, Z
    6210:	80 68       	ori	r24, 0x80	; 128
    6212:	8c 93       	st	X, r24
				// Reset timer configurations
				TIMER2_TCCR = TIMER_TCCR_Reset;
    6214:	e5 e4       	ldi	r30, 0x45	; 69
    6216:	f0 e0       	ldi	r31, 0x00	; 0
    6218:	10 82       	st	Z, r1
				// Set Prescaller to 1024
				TIMER2_TCCR |= TIMER2_1024PRE;
    621a:	a5 e4       	ldi	r26, 0x45	; 69
    621c:	b0 e0       	ldi	r27, 0x00	; 0
    621e:	e5 e4       	ldi	r30, 0x45	; 69
    6220:	f0 e0       	ldi	r31, 0x00	; 0
    6222:	80 81       	ld	r24, Z
    6224:	87 60       	ori	r24, 0x07	; 7
    6226:	8c 93       	st	X, r24
			}
			return 1;
    6228:	91 e0       	ldi	r25, 0x01	; 1
    622a:	9a 87       	std	Y+10, r25	; 0x0a
    622c:	04 c0       	rjmp	.+8      	; 0x6236 <TIMER_u8Delay_mS+0x366>
		}
		else{

			return 1;
    622e:	21 e0       	ldi	r18, 0x01	; 1
    6230:	2a 87       	std	Y+10, r18	; 0x0a
    6232:	01 c0       	rjmp	.+2      	; 0x6236 <TIMER_u8Delay_mS+0x366>
		}
	}
	else{
		return 0;
    6234:	1a 86       	std	Y+10, r1	; 0x0a
    6236:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
}
    6238:	2e 96       	adiw	r28, 0x0e	; 14
    623a:	0f b6       	in	r0, 0x3f	; 63
    623c:	f8 94       	cli
    623e:	de bf       	out	0x3e, r29	; 62
    6240:	0f be       	out	0x3f, r0	; 63
    6242:	cd bf       	out	0x3d, r28	; 61
    6244:	cf 91       	pop	r28
    6246:	df 91       	pop	r29
    6248:	1f 91       	pop	r17
    624a:	0f 91       	pop	r16
    624c:	ff 90       	pop	r15
    624e:	ef 90       	pop	r14
    6250:	08 95       	ret

00006252 <TIMER_u8Delay_uS>:

u8 TIMER_u8Delay_uS(u8 copy_u8TimerID, u16 copy_DelayTime_uS, void (*ptr_callback)(void) ){
    6252:	df 93       	push	r29
    6254:	cf 93       	push	r28
    6256:	cd b7       	in	r28, 0x3d	; 61
    6258:	de b7       	in	r29, 0x3e	; 62
    625a:	2a 97       	sbiw	r28, 0x0a	; 10
    625c:	0f b6       	in	r0, 0x3f	; 63
    625e:	f8 94       	cli
    6260:	de bf       	out	0x3e, r29	; 62
    6262:	0f be       	out	0x3f, r0	; 63
    6264:	cd bf       	out	0x3d, r28	; 61
    6266:	89 83       	std	Y+1, r24	; 0x01
    6268:	7b 83       	std	Y+3, r23	; 0x03
    626a:	6a 83       	std	Y+2, r22	; 0x02
    626c:	5d 83       	std	Y+5, r21	; 0x05
    626e:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 *
	 */
	if((copy_u8TimerID <= TIMER1ID) && (copy_DelayTime_uS >= MIN_TIME) && (copy_DelayTime_uS <= MAX_TIME) && (Timerx_occupation_flag[copy_u8TimerID] == TIMER_Clear)){
    6270:	89 81       	ldd	r24, Y+1	; 0x01
    6272:	83 30       	cpi	r24, 0x03	; 3
    6274:	08 f0       	brcs	.+2      	; 0x6278 <TIMER_u8Delay_uS+0x26>
    6276:	20 c1       	rjmp	.+576    	; 0x64b8 <TIMER_u8Delay_uS+0x266>
    6278:	8a 81       	ldd	r24, Y+2	; 0x02
    627a:	9b 81       	ldd	r25, Y+3	; 0x03
    627c:	00 97       	sbiw	r24, 0x00	; 0
    627e:	09 f4       	brne	.+2      	; 0x6282 <TIMER_u8Delay_uS+0x30>
    6280:	1b c1       	rjmp	.+566    	; 0x64b8 <TIMER_u8Delay_uS+0x266>
    6282:	89 81       	ldd	r24, Y+1	; 0x01
    6284:	88 2f       	mov	r24, r24
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	fc 01       	movw	r30, r24
    628a:	e1 57       	subi	r30, 0x71	; 113
    628c:	fe 4f       	sbci	r31, 0xFE	; 254
    628e:	80 81       	ld	r24, Z
    6290:	81 30       	cpi	r24, 0x01	; 1
    6292:	09 f0       	breq	.+2      	; 0x6296 <TIMER_u8Delay_uS+0x44>
    6294:	11 c1       	rjmp	.+546    	; 0x64b8 <TIMER_u8Delay_uS+0x266>
		if(copy_u8TimerID != TIMER1ID){
    6296:	89 81       	ldd	r24, Y+1	; 0x01
    6298:	82 30       	cpi	r24, 0x02	; 2
    629a:	09 f4       	brne	.+2      	; 0x629e <TIMER_u8Delay_uS+0x4c>
    629c:	0a c1       	rjmp	.+532    	; 0x64b2 <TIMER_u8Delay_uS+0x260>
			Timer_base[copy_u8TimerID].TIMER_OVF = 0;
    629e:	89 81       	ldd	r24, Y+1	; 0x01
    62a0:	88 2f       	mov	r24, r24
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    62a4:	88 0f       	add	r24, r24
    62a6:	99 1f       	adc	r25, r25
    62a8:	88 0f       	add	r24, r24
    62aa:	99 1f       	adc	r25, r25
    62ac:	88 0f       	add	r24, r24
    62ae:	99 1f       	adc	r25, r25
    62b0:	fc 01       	movw	r30, r24
    62b2:	e0 56       	subi	r30, 0x60	; 96
    62b4:	fe 4f       	sbci	r31, 0xFE	; 254
    62b6:	11 82       	std	Z+1, r1	; 0x01
    62b8:	10 82       	st	Z, r1
			Timer_base[copy_u8TimerID].TIMER_RestTime = 0;
    62ba:	89 81       	ldd	r24, Y+1	; 0x01
    62bc:	88 2f       	mov	r24, r24
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	88 0f       	add	r24, r24
    62c2:	99 1f       	adc	r25, r25
    62c4:	88 0f       	add	r24, r24
    62c6:	99 1f       	adc	r25, r25
    62c8:	01 96       	adiw	r24, 0x01	; 1
    62ca:	88 0f       	add	r24, r24
    62cc:	99 1f       	adc	r25, r25
    62ce:	fc 01       	movw	r30, r24
    62d0:	e0 56       	subi	r30, 0x60	; 96
    62d2:	fe 4f       	sbci	r31, 0xFE	; 254
    62d4:	11 82       	std	Z+1, r1	; 0x01
    62d6:	10 82       	st	Z, r1
			Timer_base[copy_u8TimerID].TIMER_Preload = 0;
    62d8:	89 81       	ldd	r24, Y+1	; 0x01
    62da:	88 2f       	mov	r24, r24
    62dc:	90 e0       	ldi	r25, 0x00	; 0
    62de:	88 0f       	add	r24, r24
    62e0:	99 1f       	adc	r25, r25
    62e2:	01 96       	adiw	r24, 0x01	; 1
    62e4:	88 0f       	add	r24, r24
    62e6:	99 1f       	adc	r25, r25
    62e8:	88 0f       	add	r24, r24
    62ea:	99 1f       	adc	r25, r25
    62ec:	fc 01       	movw	r30, r24
    62ee:	e0 56       	subi	r30, 0x60	; 96
    62f0:	fe 4f       	sbci	r31, 0xFE	; 254
    62f2:	11 82       	std	Z+1, r1	; 0x01
    62f4:	10 82       	st	Z, r1
			Timer_base[copy_u8TimerID].ptr_callback_t = NULL;
    62f6:	89 81       	ldd	r24, Y+1	; 0x01
    62f8:	88 2f       	mov	r24, r24
    62fa:	90 e0       	ldi	r25, 0x00	; 0
    62fc:	88 0f       	add	r24, r24
    62fe:	99 1f       	adc	r25, r25
    6300:	88 0f       	add	r24, r24
    6302:	99 1f       	adc	r25, r25
    6304:	88 0f       	add	r24, r24
    6306:	99 1f       	adc	r25, r25
    6308:	fc 01       	movw	r30, r24
    630a:	ea 55       	subi	r30, 0x5A	; 90
    630c:	fe 4f       	sbci	r31, 0xFE	; 254
    630e:	11 82       	std	Z+1, r1	; 0x01
    6310:	10 82       	st	Z, r1
			// Raise the occupation flag
			Timerx_occupation_flag[copy_u8TimerID] = TIMER_Delay_uS;
    6312:	89 81       	ldd	r24, Y+1	; 0x01
    6314:	88 2f       	mov	r24, r24
    6316:	90 e0       	ldi	r25, 0x00	; 0
    6318:	fc 01       	movw	r30, r24
    631a:	e1 57       	subi	r30, 0x71	; 113
    631c:	fe 4f       	sbci	r31, 0xFE	; 254
    631e:	83 e0       	ldi	r24, 0x03	; 3
    6320:	80 83       	st	Z, r24
			// Caculate the preload value
			Timer_base[copy_u8TimerID].TIMER_Preload = (OVF_MAX - (copy_DelayTime_uS % OVF_MAX));
    6322:	89 81       	ldd	r24, Y+1	; 0x01
    6324:	48 2f       	mov	r20, r24
    6326:	50 e0       	ldi	r21, 0x00	; 0
    6328:	8a 81       	ldd	r24, Y+2	; 0x02
    632a:	9b 81       	ldd	r25, Y+3	; 0x03
    632c:	9c 01       	movw	r18, r24
    632e:	30 70       	andi	r19, 0x00	; 0
    6330:	80 e0       	ldi	r24, 0x00	; 0
    6332:	91 e0       	ldi	r25, 0x01	; 1
    6334:	bc 01       	movw	r22, r24
    6336:	62 1b       	sub	r22, r18
    6338:	73 0b       	sbc	r23, r19
    633a:	9b 01       	movw	r18, r22
    633c:	ca 01       	movw	r24, r20
    633e:	88 0f       	add	r24, r24
    6340:	99 1f       	adc	r25, r25
    6342:	01 96       	adiw	r24, 0x01	; 1
    6344:	88 0f       	add	r24, r24
    6346:	99 1f       	adc	r25, r25
    6348:	88 0f       	add	r24, r24
    634a:	99 1f       	adc	r25, r25
    634c:	fc 01       	movw	r30, r24
    634e:	e0 56       	subi	r30, 0x60	; 96
    6350:	fe 4f       	sbci	r31, 0xFE	; 254
    6352:	31 83       	std	Z+1, r19	; 0x01
    6354:	20 83       	st	Z, r18
			// Calulate the number of OVF
			Timer_base[copy_u8TimerID].TIMER_OVF = (Timer_base[copy_u8TimerID].TIMER_Preload != 0) ? ((copy_DelayTime_uS / OVF_MAX) + 1) : (copy_DelayTime_uS / OVF_MAX);
    6356:	89 81       	ldd	r24, Y+1	; 0x01
    6358:	28 2f       	mov	r18, r24
    635a:	30 e0       	ldi	r19, 0x00	; 0
    635c:	3a 87       	std	Y+10, r19	; 0x0a
    635e:	29 87       	std	Y+9, r18	; 0x09
    6360:	89 81       	ldd	r24, Y+1	; 0x01
    6362:	88 2f       	mov	r24, r24
    6364:	90 e0       	ldi	r25, 0x00	; 0
    6366:	88 0f       	add	r24, r24
    6368:	99 1f       	adc	r25, r25
    636a:	01 96       	adiw	r24, 0x01	; 1
    636c:	88 0f       	add	r24, r24
    636e:	99 1f       	adc	r25, r25
    6370:	88 0f       	add	r24, r24
    6372:	99 1f       	adc	r25, r25
    6374:	fc 01       	movw	r30, r24
    6376:	e0 56       	subi	r30, 0x60	; 96
    6378:	fe 4f       	sbci	r31, 0xFE	; 254
    637a:	80 81       	ld	r24, Z
    637c:	91 81       	ldd	r25, Z+1	; 0x01
    637e:	00 97       	sbiw	r24, 0x00	; 0
    6380:	51 f0       	breq	.+20     	; 0x6396 <TIMER_u8Delay_uS+0x144>
    6382:	8a 81       	ldd	r24, Y+2	; 0x02
    6384:	9b 81       	ldd	r25, Y+3	; 0x03
    6386:	89 2f       	mov	r24, r25
    6388:	99 27       	eor	r25, r25
    638a:	bc 01       	movw	r22, r24
    638c:	6f 5f       	subi	r22, 0xFF	; 255
    638e:	7f 4f       	sbci	r23, 0xFF	; 255
    6390:	78 87       	std	Y+8, r23	; 0x08
    6392:	6f 83       	std	Y+7, r22	; 0x07
    6394:	06 c0       	rjmp	.+12     	; 0x63a2 <TIMER_u8Delay_uS+0x150>
    6396:	8a 81       	ldd	r24, Y+2	; 0x02
    6398:	9b 81       	ldd	r25, Y+3	; 0x03
    639a:	29 2f       	mov	r18, r25
    639c:	33 27       	eor	r19, r19
    639e:	38 87       	std	Y+8, r19	; 0x08
    63a0:	2f 83       	std	Y+7, r18	; 0x07
    63a2:	89 85       	ldd	r24, Y+9	; 0x09
    63a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    63a6:	88 0f       	add	r24, r24
    63a8:	99 1f       	adc	r25, r25
    63aa:	88 0f       	add	r24, r24
    63ac:	99 1f       	adc	r25, r25
    63ae:	88 0f       	add	r24, r24
    63b0:	99 1f       	adc	r25, r25
    63b2:	fc 01       	movw	r30, r24
    63b4:	e0 56       	subi	r30, 0x60	; 96
    63b6:	fe 4f       	sbci	r31, 0xFE	; 254
    63b8:	6f 81       	ldd	r22, Y+7	; 0x07
    63ba:	78 85       	ldd	r23, Y+8	; 0x08
    63bc:	71 83       	std	Z+1, r23	; 0x01
    63be:	60 83       	st	Z, r22
			// Set parameters for callback
			Timer_base[copy_u8TimerID].ptr_callback_t = ptr_callback;
    63c0:	89 81       	ldd	r24, Y+1	; 0x01
    63c2:	88 2f       	mov	r24, r24
    63c4:	90 e0       	ldi	r25, 0x00	; 0
    63c6:	88 0f       	add	r24, r24
    63c8:	99 1f       	adc	r25, r25
    63ca:	88 0f       	add	r24, r24
    63cc:	99 1f       	adc	r25, r25
    63ce:	88 0f       	add	r24, r24
    63d0:	99 1f       	adc	r25, r25
    63d2:	fc 01       	movw	r30, r24
    63d4:	ea 55       	subi	r30, 0x5A	; 90
    63d6:	fe 4f       	sbci	r31, 0xFE	; 254
    63d8:	8c 81       	ldd	r24, Y+4	; 0x04
    63da:	9d 81       	ldd	r25, Y+5	; 0x05
    63dc:	91 83       	std	Z+1, r25	; 0x01
    63de:	80 83       	st	Z, r24
			if(copy_u8TimerID == TIMER0ID){
    63e0:	89 81       	ldd	r24, Y+1	; 0x01
    63e2:	88 23       	and	r24, r24
    63e4:	91 f5       	brne	.+100    	; 0x644a <TIMER_u8Delay_uS+0x1f8>
				// Set preload value
				TIMER0_TCNT = Timer_base[copy_u8TimerID].TIMER_Preload;
    63e6:	a2 e5       	ldi	r26, 0x52	; 82
    63e8:	b0 e0       	ldi	r27, 0x00	; 0
    63ea:	89 81       	ldd	r24, Y+1	; 0x01
    63ec:	88 2f       	mov	r24, r24
    63ee:	90 e0       	ldi	r25, 0x00	; 0
    63f0:	88 0f       	add	r24, r24
    63f2:	99 1f       	adc	r25, r25
    63f4:	01 96       	adiw	r24, 0x01	; 1
    63f6:	88 0f       	add	r24, r24
    63f8:	99 1f       	adc	r25, r25
    63fa:	88 0f       	add	r24, r24
    63fc:	99 1f       	adc	r25, r25
    63fe:	fc 01       	movw	r30, r24
    6400:	e0 56       	subi	r30, 0x60	; 96
    6402:	fe 4f       	sbci	r31, 0xFE	; 254
    6404:	80 81       	ld	r24, Z
    6406:	91 81       	ldd	r25, Z+1	; 0x01
    6408:	8c 93       	st	X, r24
				// Enable intrrupt
				TIMER_TIMSK &= TIMER0_TIMSK_Reset;
    640a:	a9 e5       	ldi	r26, 0x59	; 89
    640c:	b0 e0       	ldi	r27, 0x00	; 0
    640e:	e9 e5       	ldi	r30, 0x59	; 89
    6410:	f0 e0       	ldi	r31, 0x00	; 0
    6412:	80 81       	ld	r24, Z
    6414:	8c 7f       	andi	r24, 0xFC	; 252
    6416:	8c 93       	st	X, r24
				TIMER_TIMSK |= TIMER_ENABLE;
    6418:	a9 e5       	ldi	r26, 0x59	; 89
    641a:	b0 e0       	ldi	r27, 0x00	; 0
    641c:	e9 e5       	ldi	r30, 0x59	; 89
    641e:	f0 e0       	ldi	r31, 0x00	; 0
    6420:	80 81       	ld	r24, Z
    6422:	81 60       	ori	r24, 0x01	; 1
    6424:	8c 93       	st	X, r24
				// Enable Global Interrupt
				TIMER_SREG |= TIMER_ENABLE << TIMER_Glob_Init_bit;
    6426:	af e5       	ldi	r26, 0x5F	; 95
    6428:	b0 e0       	ldi	r27, 0x00	; 0
    642a:	ef e5       	ldi	r30, 0x5F	; 95
    642c:	f0 e0       	ldi	r31, 0x00	; 0
    642e:	80 81       	ld	r24, Z
    6430:	80 68       	ori	r24, 0x80	; 128
    6432:	8c 93       	st	X, r24
				// Reset timer configurations
				TIMER0_TCCR = TIMER_TCCR_Reset;
    6434:	e3 e5       	ldi	r30, 0x53	; 83
    6436:	f0 e0       	ldi	r31, 0x00	; 0
    6438:	10 82       	st	Z, r1
				// Set Prescaller to 8, confguration to (WGM: Normal, COM: Normal)
				TIMER0_TCCR |= TIMER_8PRE;
    643a:	a3 e5       	ldi	r26, 0x53	; 83
    643c:	b0 e0       	ldi	r27, 0x00	; 0
    643e:	e3 e5       	ldi	r30, 0x53	; 83
    6440:	f0 e0       	ldi	r31, 0x00	; 0
    6442:	80 81       	ld	r24, Z
    6444:	82 60       	ori	r24, 0x02	; 2
    6446:	8c 93       	st	X, r24
    6448:	31 c0       	rjmp	.+98     	; 0x64ac <TIMER_u8Delay_uS+0x25a>
			}
			else{
				// Set preload value
				TIMER2_TCNT = Timer_base[copy_u8TimerID].TIMER_Preload;
    644a:	a4 e4       	ldi	r26, 0x44	; 68
    644c:	b0 e0       	ldi	r27, 0x00	; 0
    644e:	89 81       	ldd	r24, Y+1	; 0x01
    6450:	88 2f       	mov	r24, r24
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	88 0f       	add	r24, r24
    6456:	99 1f       	adc	r25, r25
    6458:	01 96       	adiw	r24, 0x01	; 1
    645a:	88 0f       	add	r24, r24
    645c:	99 1f       	adc	r25, r25
    645e:	88 0f       	add	r24, r24
    6460:	99 1f       	adc	r25, r25
    6462:	fc 01       	movw	r30, r24
    6464:	e0 56       	subi	r30, 0x60	; 96
    6466:	fe 4f       	sbci	r31, 0xFE	; 254
    6468:	80 81       	ld	r24, Z
    646a:	91 81       	ldd	r25, Z+1	; 0x01
    646c:	8c 93       	st	X, r24
				// Enable intrrupt
				TIMER_TIMSK &= TIMER2_TIMSK_Reset;
    646e:	a9 e5       	ldi	r26, 0x59	; 89
    6470:	b0 e0       	ldi	r27, 0x00	; 0
    6472:	e9 e5       	ldi	r30, 0x59	; 89
    6474:	f0 e0       	ldi	r31, 0x00	; 0
    6476:	80 81       	ld	r24, Z
    6478:	8f 73       	andi	r24, 0x3F	; 63
    647a:	8c 93       	st	X, r24
				TIMER_TIMSK |= TIMER_ENABLE << TIMER_TOIE2;
    647c:	a9 e5       	ldi	r26, 0x59	; 89
    647e:	b0 e0       	ldi	r27, 0x00	; 0
    6480:	e9 e5       	ldi	r30, 0x59	; 89
    6482:	f0 e0       	ldi	r31, 0x00	; 0
    6484:	80 81       	ld	r24, Z
    6486:	80 64       	ori	r24, 0x40	; 64
    6488:	8c 93       	st	X, r24
				// Enable Global Interrupt
				TIMER_SREG |= TIMER_ENABLE << TIMER_Glob_Init_bit;
    648a:	af e5       	ldi	r26, 0x5F	; 95
    648c:	b0 e0       	ldi	r27, 0x00	; 0
    648e:	ef e5       	ldi	r30, 0x5F	; 95
    6490:	f0 e0       	ldi	r31, 0x00	; 0
    6492:	80 81       	ld	r24, Z
    6494:	80 68       	ori	r24, 0x80	; 128
    6496:	8c 93       	st	X, r24
				// Reset timer configurations
				TIMER2_TCCR = TIMER_TCCR_Reset;
    6498:	e5 e4       	ldi	r30, 0x45	; 69
    649a:	f0 e0       	ldi	r31, 0x00	; 0
    649c:	10 82       	st	Z, r1
				// Set Prescaller to 8, confguration to (WGM: Normal, COM: Normal)
				TIMER2_TCCR |= TIMER2_8PRE;
    649e:	a5 e4       	ldi	r26, 0x45	; 69
    64a0:	b0 e0       	ldi	r27, 0x00	; 0
    64a2:	e5 e4       	ldi	r30, 0x45	; 69
    64a4:	f0 e0       	ldi	r31, 0x00	; 0
    64a6:	80 81       	ld	r24, Z
    64a8:	82 60       	ori	r24, 0x02	; 2
    64aa:	8c 93       	st	X, r24
			}
			return 1;
    64ac:	71 e0       	ldi	r23, 0x01	; 1
    64ae:	7e 83       	std	Y+6, r23	; 0x06
    64b0:	04 c0       	rjmp	.+8      	; 0x64ba <TIMER_u8Delay_uS+0x268>
		}
		else{

			return 1;
    64b2:	81 e0       	ldi	r24, 0x01	; 1
    64b4:	8e 83       	std	Y+6, r24	; 0x06
    64b6:	01 c0       	rjmp	.+2      	; 0x64ba <TIMER_u8Delay_uS+0x268>
		}
	}
	else{
		return 0;
    64b8:	1e 82       	std	Y+6, r1	; 0x06
    64ba:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
    64bc:	2a 96       	adiw	r28, 0x0a	; 10
    64be:	0f b6       	in	r0, 0x3f	; 63
    64c0:	f8 94       	cli
    64c2:	de bf       	out	0x3e, r29	; 62
    64c4:	0f be       	out	0x3f, r0	; 63
    64c6:	cd bf       	out	0x3d, r28	; 61
    64c8:	cf 91       	pop	r28
    64ca:	df 91       	pop	r29
    64cc:	08 95       	ret

000064ce <TIMER_vDelay_Callback>:

void TIMER_vDelay_Callback(u8 copy_u8TimerID ){
    64ce:	df 93       	push	r29
    64d0:	cf 93       	push	r28
    64d2:	0f 92       	push	r0
    64d4:	cd b7       	in	r28, 0x3d	; 61
    64d6:	de b7       	in	r29, 0x3e	; 62
    64d8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	// // Decrement the OVF counter then check the over flow counter if zero then delay in mS is finished
	if((--(Timer_base[copy_u8TimerID].TIMER_OVF)) == 0){
    64da:	89 81       	ldd	r24, Y+1	; 0x01
    64dc:	28 2f       	mov	r18, r24
    64de:	30 e0       	ldi	r19, 0x00	; 0
    64e0:	c9 01       	movw	r24, r18
    64e2:	88 0f       	add	r24, r24
    64e4:	99 1f       	adc	r25, r25
    64e6:	88 0f       	add	r24, r24
    64e8:	99 1f       	adc	r25, r25
    64ea:	88 0f       	add	r24, r24
    64ec:	99 1f       	adc	r25, r25
    64ee:	fc 01       	movw	r30, r24
    64f0:	e0 56       	subi	r30, 0x60	; 96
    64f2:	fe 4f       	sbci	r31, 0xFE	; 254
    64f4:	80 81       	ld	r24, Z
    64f6:	91 81       	ldd	r25, Z+1	; 0x01
    64f8:	ac 01       	movw	r20, r24
    64fa:	41 50       	subi	r20, 0x01	; 1
    64fc:	50 40       	sbci	r21, 0x00	; 0
    64fe:	c9 01       	movw	r24, r18
    6500:	88 0f       	add	r24, r24
    6502:	99 1f       	adc	r25, r25
    6504:	88 0f       	add	r24, r24
    6506:	99 1f       	adc	r25, r25
    6508:	88 0f       	add	r24, r24
    650a:	99 1f       	adc	r25, r25
    650c:	fc 01       	movw	r30, r24
    650e:	e0 56       	subi	r30, 0x60	; 96
    6510:	fe 4f       	sbci	r31, 0xFE	; 254
    6512:	51 83       	std	Z+1, r21	; 0x01
    6514:	40 83       	st	Z, r20
    6516:	c9 01       	movw	r24, r18
    6518:	88 0f       	add	r24, r24
    651a:	99 1f       	adc	r25, r25
    651c:	88 0f       	add	r24, r24
    651e:	99 1f       	adc	r25, r25
    6520:	88 0f       	add	r24, r24
    6522:	99 1f       	adc	r25, r25
    6524:	fc 01       	movw	r30, r24
    6526:	e0 56       	subi	r30, 0x60	; 96
    6528:	fe 4f       	sbci	r31, 0xFE	; 254
    652a:	80 81       	ld	r24, Z
    652c:	91 81       	ldd	r25, Z+1	; 0x01
    652e:	00 97       	sbiw	r24, 0x00	; 0
    6530:	09 f0       	breq	.+2      	; 0x6534 <TIMER_vDelay_Callback+0x66>
    6532:	57 c0       	rjmp	.+174    	; 0x65e2 <TIMER_vDelay_Callback+0x114>
		// Check the rest time in uS in case of mS delay if zero ther total delay is finished
		if((Timer_base[copy_u8TimerID].TIMER_RestTime) == 0){
    6534:	89 81       	ldd	r24, Y+1	; 0x01
    6536:	88 2f       	mov	r24, r24
    6538:	90 e0       	ldi	r25, 0x00	; 0
    653a:	88 0f       	add	r24, r24
    653c:	99 1f       	adc	r25, r25
    653e:	88 0f       	add	r24, r24
    6540:	99 1f       	adc	r25, r25
    6542:	01 96       	adiw	r24, 0x01	; 1
    6544:	88 0f       	add	r24, r24
    6546:	99 1f       	adc	r25, r25
    6548:	fc 01       	movw	r30, r24
    654a:	e0 56       	subi	r30, 0x60	; 96
    654c:	fe 4f       	sbci	r31, 0xFE	; 254
    654e:	80 81       	ld	r24, Z
    6550:	91 81       	ldd	r25, Z+1	; 0x01
    6552:	00 97       	sbiw	r24, 0x00	; 0
    6554:	e1 f4       	brne	.+56     	; 0x658e <TIMER_vDelay_Callback+0xc0>
			// Clear the ossupation flag
			Timerx_occupation_flag[copy_u8TimerID] = TIMER_Clear;
    6556:	89 81       	ldd	r24, Y+1	; 0x01
    6558:	88 2f       	mov	r24, r24
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	fc 01       	movw	r30, r24
    655e:	e1 57       	subi	r30, 0x71	; 113
    6560:	fe 4f       	sbci	r31, 0xFE	; 254
    6562:	81 e0       	ldi	r24, 0x01	; 1
    6564:	80 83       	st	Z, r24
			// Call the function
			(Timer_base[copy_u8TimerID].ptr_callback_t)();
    6566:	89 81       	ldd	r24, Y+1	; 0x01
    6568:	88 2f       	mov	r24, r24
    656a:	90 e0       	ldi	r25, 0x00	; 0
    656c:	88 0f       	add	r24, r24
    656e:	99 1f       	adc	r25, r25
    6570:	88 0f       	add	r24, r24
    6572:	99 1f       	adc	r25, r25
    6574:	88 0f       	add	r24, r24
    6576:	99 1f       	adc	r25, r25
    6578:	fc 01       	movw	r30, r24
    657a:	ea 55       	subi	r30, 0x5A	; 90
    657c:	fe 4f       	sbci	r31, 0xFE	; 254
    657e:	01 90       	ld	r0, Z+
    6580:	f0 81       	ld	r31, Z
    6582:	e0 2d       	mov	r30, r0
    6584:	09 95       	icall
			// Clear timer data
			TIMERx_vClear(copy_u8TimerID);
    6586:	89 81       	ldd	r24, Y+1	; 0x01
    6588:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <TIMERx_vClear>
    658c:	2a c0       	rjmp	.+84     	; 0x65e2 <TIMER_vDelay_Callback+0x114>
		}
		// In case of false continue the delay in uS
		else{
			// Clear the ossupation flag
			Timerx_occupation_flag[copy_u8TimerID] = TIMER_Clear;
    658e:	89 81       	ldd	r24, Y+1	; 0x01
    6590:	88 2f       	mov	r24, r24
    6592:	90 e0       	ldi	r25, 0x00	; 0
    6594:	fc 01       	movw	r30, r24
    6596:	e1 57       	subi	r30, 0x71	; 113
    6598:	fe 4f       	sbci	r31, 0xFE	; 254
    659a:	81 e0       	ldi	r24, 0x01	; 1
    659c:	80 83       	st	Z, r24
			// Call the uS delay function
			TIMER_u8Delay_uS(copy_u8TimerID, (Timer_base[copy_u8TimerID].TIMER_RestTime), (Timer_base[copy_u8TimerID].ptr_callback_t));
    659e:	89 81       	ldd	r24, Y+1	; 0x01
    65a0:	88 2f       	mov	r24, r24
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	88 0f       	add	r24, r24
    65a6:	99 1f       	adc	r25, r25
    65a8:	88 0f       	add	r24, r24
    65aa:	99 1f       	adc	r25, r25
    65ac:	01 96       	adiw	r24, 0x01	; 1
    65ae:	88 0f       	add	r24, r24
    65b0:	99 1f       	adc	r25, r25
    65b2:	fc 01       	movw	r30, r24
    65b4:	e0 56       	subi	r30, 0x60	; 96
    65b6:	fe 4f       	sbci	r31, 0xFE	; 254
    65b8:	40 81       	ld	r20, Z
    65ba:	51 81       	ldd	r21, Z+1	; 0x01
    65bc:	89 81       	ldd	r24, Y+1	; 0x01
    65be:	88 2f       	mov	r24, r24
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	88 0f       	add	r24, r24
    65c4:	99 1f       	adc	r25, r25
    65c6:	88 0f       	add	r24, r24
    65c8:	99 1f       	adc	r25, r25
    65ca:	88 0f       	add	r24, r24
    65cc:	99 1f       	adc	r25, r25
    65ce:	fc 01       	movw	r30, r24
    65d0:	ea 55       	subi	r30, 0x5A	; 90
    65d2:	fe 4f       	sbci	r31, 0xFE	; 254
    65d4:	20 81       	ld	r18, Z
    65d6:	31 81       	ldd	r19, Z+1	; 0x01
    65d8:	89 81       	ldd	r24, Y+1	; 0x01
    65da:	ba 01       	movw	r22, r20
    65dc:	a9 01       	movw	r20, r18
    65de:	0e 94 29 31 	call	0x6252	; 0x6252 <TIMER_u8Delay_uS>
	}
	// In case of false then decrement the OVF counter and continue
	else{

	}
}
    65e2:	0f 90       	pop	r0
    65e4:	cf 91       	pop	r28
    65e6:	df 91       	pop	r29
    65e8:	08 95       	ret

000065ea <TIMER_u8CreatePeriodicTask>:


/* Periodic functions decleration */
u8 TIMER_u8CreatePeriodicTask(u8 copy_u8TimerID, u16 copy_TimePeriod_mS, void (*ptr_callback)(void) ){
    65ea:	ef 92       	push	r14
    65ec:	ff 92       	push	r15
    65ee:	0f 93       	push	r16
    65f0:	1f 93       	push	r17
    65f2:	df 93       	push	r29
    65f4:	cf 93       	push	r28
    65f6:	cd b7       	in	r28, 0x3d	; 61
    65f8:	de b7       	in	r29, 0x3e	; 62
    65fa:	2d 97       	sbiw	r28, 0x0d	; 13
    65fc:	0f b6       	in	r0, 0x3f	; 63
    65fe:	f8 94       	cli
    6600:	de bf       	out	0x3e, r29	; 62
    6602:	0f be       	out	0x3f, r0	; 63
    6604:	cd bf       	out	0x3d, r28	; 61
    6606:	8d 83       	std	Y+5, r24	; 0x05
    6608:	7f 83       	std	Y+7, r23	; 0x07
    660a:	6e 83       	std	Y+6, r22	; 0x06
    660c:	59 87       	std	Y+9, r21	; 0x09
    660e:	48 87       	std	Y+8, r20	; 0x08
	/*
	 *
	 */
	if((copy_u8TimerID <= TIMER1ID) && (copy_TimePeriod_mS >= MIN_TIME) && (copy_TimePeriod_mS <= MAX_TIME) && (Timerx_occupation_flag[copy_u8TimerID] == TIMER_Clear)){
    6610:	8d 81       	ldd	r24, Y+5	; 0x05
    6612:	83 30       	cpi	r24, 0x03	; 3
    6614:	08 f0       	brcs	.+2      	; 0x6618 <TIMER_u8CreatePeriodicTask+0x2e>
    6616:	95 c1       	rjmp	.+810    	; 0x6942 <TIMER_u8CreatePeriodicTask+0x358>
    6618:	8e 81       	ldd	r24, Y+6	; 0x06
    661a:	9f 81       	ldd	r25, Y+7	; 0x07
    661c:	00 97       	sbiw	r24, 0x00	; 0
    661e:	09 f4       	brne	.+2      	; 0x6622 <TIMER_u8CreatePeriodicTask+0x38>
    6620:	90 c1       	rjmp	.+800    	; 0x6942 <TIMER_u8CreatePeriodicTask+0x358>
    6622:	8d 81       	ldd	r24, Y+5	; 0x05
    6624:	88 2f       	mov	r24, r24
    6626:	90 e0       	ldi	r25, 0x00	; 0
    6628:	fc 01       	movw	r30, r24
    662a:	e1 57       	subi	r30, 0x71	; 113
    662c:	fe 4f       	sbci	r31, 0xFE	; 254
    662e:	80 81       	ld	r24, Z
    6630:	81 30       	cpi	r24, 0x01	; 1
    6632:	09 f0       	breq	.+2      	; 0x6636 <TIMER_u8CreatePeriodicTask+0x4c>
    6634:	86 c1       	rjmp	.+780    	; 0x6942 <TIMER_u8CreatePeriodicTask+0x358>
		if(copy_u8TimerID != TIMER1ID){
    6636:	8d 81       	ldd	r24, Y+5	; 0x05
    6638:	82 30       	cpi	r24, 0x02	; 2
    663a:	09 f4       	brne	.+2      	; 0x663e <TIMER_u8CreatePeriodicTask+0x54>
    663c:	82 c1       	rjmp	.+772    	; 0x6942 <TIMER_u8CreatePeriodicTask+0x358>
			Timer_base[copy_u8TimerID].TIMER_OVF = TIMER_BOTTOM;
    663e:	8d 81       	ldd	r24, Y+5	; 0x05
    6640:	88 2f       	mov	r24, r24
    6642:	90 e0       	ldi	r25, 0x00	; 0
    6644:	88 0f       	add	r24, r24
    6646:	99 1f       	adc	r25, r25
    6648:	88 0f       	add	r24, r24
    664a:	99 1f       	adc	r25, r25
    664c:	88 0f       	add	r24, r24
    664e:	99 1f       	adc	r25, r25
    6650:	fc 01       	movw	r30, r24
    6652:	e0 56       	subi	r30, 0x60	; 96
    6654:	fe 4f       	sbci	r31, 0xFE	; 254
    6656:	11 82       	std	Z+1, r1	; 0x01
    6658:	10 82       	st	Z, r1
			Timer_base[copy_u8TimerID].TIMER_RestTime = TIMER_BOTTOM;
    665a:	8d 81       	ldd	r24, Y+5	; 0x05
    665c:	88 2f       	mov	r24, r24
    665e:	90 e0       	ldi	r25, 0x00	; 0
    6660:	88 0f       	add	r24, r24
    6662:	99 1f       	adc	r25, r25
    6664:	88 0f       	add	r24, r24
    6666:	99 1f       	adc	r25, r25
    6668:	01 96       	adiw	r24, 0x01	; 1
    666a:	88 0f       	add	r24, r24
    666c:	99 1f       	adc	r25, r25
    666e:	fc 01       	movw	r30, r24
    6670:	e0 56       	subi	r30, 0x60	; 96
    6672:	fe 4f       	sbci	r31, 0xFE	; 254
    6674:	11 82       	std	Z+1, r1	; 0x01
    6676:	10 82       	st	Z, r1
			Timer_base[copy_u8TimerID].TIMER_Preload = TIMER_BOTTOM;
    6678:	8d 81       	ldd	r24, Y+5	; 0x05
    667a:	88 2f       	mov	r24, r24
    667c:	90 e0       	ldi	r25, 0x00	; 0
    667e:	88 0f       	add	r24, r24
    6680:	99 1f       	adc	r25, r25
    6682:	01 96       	adiw	r24, 0x01	; 1
    6684:	88 0f       	add	r24, r24
    6686:	99 1f       	adc	r25, r25
    6688:	88 0f       	add	r24, r24
    668a:	99 1f       	adc	r25, r25
    668c:	fc 01       	movw	r30, r24
    668e:	e0 56       	subi	r30, 0x60	; 96
    6690:	fe 4f       	sbci	r31, 0xFE	; 254
    6692:	11 82       	std	Z+1, r1	; 0x01
    6694:	10 82       	st	Z, r1
			Timer_base[copy_u8TimerID].ptr_callback_t = NULL;
    6696:	8d 81       	ldd	r24, Y+5	; 0x05
    6698:	88 2f       	mov	r24, r24
    669a:	90 e0       	ldi	r25, 0x00	; 0
    669c:	88 0f       	add	r24, r24
    669e:	99 1f       	adc	r25, r25
    66a0:	88 0f       	add	r24, r24
    66a2:	99 1f       	adc	r25, r25
    66a4:	88 0f       	add	r24, r24
    66a6:	99 1f       	adc	r25, r25
    66a8:	fc 01       	movw	r30, r24
    66aa:	ea 55       	subi	r30, 0x5A	; 90
    66ac:	fe 4f       	sbci	r31, 0xFE	; 254
    66ae:	11 82       	std	Z+1, r1	; 0x01
    66b0:	10 82       	st	Z, r1
			// set timer flag to the assign task
			Timerx_occupation_flag[copy_u8TimerID] = TIMER_Ptask;
    66b2:	8d 81       	ldd	r24, Y+5	; 0x05
    66b4:	88 2f       	mov	r24, r24
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	fc 01       	movw	r30, r24
    66ba:	e1 57       	subi	r30, 0x71	; 113
    66bc:	fe 4f       	sbci	r31, 0xFE	; 254
    66be:	86 e0       	ldi	r24, 0x06	; 6
    66c0:	80 83       	st	Z, r24
			// Calculate number of ticks
			f64 clc_NO_Tics = ((f64)copy_TimePeriod_mS * Mills_to_Micro) / Mills_TickTime;
    66c2:	8e 81       	ldd	r24, Y+6	; 0x06
    66c4:	9f 81       	ldd	r25, Y+7	; 0x07
    66c6:	cc 01       	movw	r24, r24
    66c8:	a0 e0       	ldi	r26, 0x00	; 0
    66ca:	b0 e0       	ldi	r27, 0x00	; 0
    66cc:	bc 01       	movw	r22, r24
    66ce:	cd 01       	movw	r24, r26
    66d0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    66d4:	dc 01       	movw	r26, r24
    66d6:	cb 01       	movw	r24, r22
    66d8:	bc 01       	movw	r22, r24
    66da:	cd 01       	movw	r24, r26
    66dc:	20 e0       	ldi	r18, 0x00	; 0
    66de:	30 e0       	ldi	r19, 0x00	; 0
    66e0:	4a e7       	ldi	r20, 0x7A	; 122
    66e2:	54 e4       	ldi	r21, 0x44	; 68
    66e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66e8:	dc 01       	movw	r26, r24
    66ea:	cb 01       	movw	r24, r22
    66ec:	bc 01       	movw	r22, r24
    66ee:	cd 01       	movw	r24, r26
    66f0:	20 e0       	ldi	r18, 0x00	; 0
    66f2:	30 e0       	ldi	r19, 0x00	; 0
    66f4:	40 e0       	ldi	r20, 0x00	; 0
    66f6:	53 e4       	ldi	r21, 0x43	; 67
    66f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    66fc:	dc 01       	movw	r26, r24
    66fe:	cb 01       	movw	r24, r22
    6700:	89 83       	std	Y+1, r24	; 0x01
    6702:	9a 83       	std	Y+2, r25	; 0x02
    6704:	ab 83       	std	Y+3, r26	; 0x03
    6706:	bc 83       	std	Y+4, r27	; 0x04
			// Calulate the rest of the micro second
			Timer_base[copy_u8TimerID].TIMER_RestTime = ((copy_TimePeriod_mS * Mills_to_Micro) - ((u32)clc_NO_Tics * Mills_TickTime));
    6708:	8d 81       	ldd	r24, Y+5	; 0x05
    670a:	08 2f       	mov	r16, r24
    670c:	10 e0       	ldi	r17, 0x00	; 0
    670e:	2e 81       	ldd	r18, Y+6	; 0x06
    6710:	3f 81       	ldd	r19, Y+7	; 0x07
    6712:	88 ee       	ldi	r24, 0xE8	; 232
    6714:	93 e0       	ldi	r25, 0x03	; 3
    6716:	28 9f       	mul	r18, r24
    6718:	70 01       	movw	r14, r0
    671a:	29 9f       	mul	r18, r25
    671c:	f0 0c       	add	r15, r0
    671e:	38 9f       	mul	r19, r24
    6720:	f0 0c       	add	r15, r0
    6722:	11 24       	eor	r1, r1
    6724:	69 81       	ldd	r22, Y+1	; 0x01
    6726:	7a 81       	ldd	r23, Y+2	; 0x02
    6728:	8b 81       	ldd	r24, Y+3	; 0x03
    672a:	9c 81       	ldd	r25, Y+4	; 0x04
    672c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6730:	dc 01       	movw	r26, r24
    6732:	cb 01       	movw	r24, r22
    6734:	88 0f       	add	r24, r24
    6736:	99 1f       	adc	r25, r25
    6738:	aa 1f       	adc	r26, r26
    673a:	bb 1f       	adc	r27, r27
    673c:	88 0f       	add	r24, r24
    673e:	99 1f       	adc	r25, r25
    6740:	aa 1f       	adc	r26, r26
    6742:	bb 1f       	adc	r27, r27
    6744:	88 0f       	add	r24, r24
    6746:	99 1f       	adc	r25, r25
    6748:	aa 1f       	adc	r26, r26
    674a:	bb 1f       	adc	r27, r27
    674c:	88 0f       	add	r24, r24
    674e:	99 1f       	adc	r25, r25
    6750:	aa 1f       	adc	r26, r26
    6752:	bb 1f       	adc	r27, r27
    6754:	88 0f       	add	r24, r24
    6756:	99 1f       	adc	r25, r25
    6758:	aa 1f       	adc	r26, r26
    675a:	bb 1f       	adc	r27, r27
    675c:	88 0f       	add	r24, r24
    675e:	99 1f       	adc	r25, r25
    6760:	aa 1f       	adc	r26, r26
    6762:	bb 1f       	adc	r27, r27
    6764:	88 0f       	add	r24, r24
    6766:	99 1f       	adc	r25, r25
    6768:	aa 1f       	adc	r26, r26
    676a:	bb 1f       	adc	r27, r27
    676c:	97 01       	movw	r18, r14
    676e:	28 1b       	sub	r18, r24
    6770:	39 0b       	sbc	r19, r25
    6772:	c8 01       	movw	r24, r16
    6774:	88 0f       	add	r24, r24
    6776:	99 1f       	adc	r25, r25
    6778:	88 0f       	add	r24, r24
    677a:	99 1f       	adc	r25, r25
    677c:	01 96       	adiw	r24, 0x01	; 1
    677e:	88 0f       	add	r24, r24
    6780:	99 1f       	adc	r25, r25
    6782:	fc 01       	movw	r30, r24
    6784:	e0 56       	subi	r30, 0x60	; 96
    6786:	fe 4f       	sbci	r31, 0xFE	; 254
    6788:	31 83       	std	Z+1, r19	; 0x01
    678a:	20 83       	st	Z, r18
			// Caculate the preload value
			Timer_base[copy_u8TimerID].TIMER_Preload = (OVF_MAX - ((u32)clc_NO_Tics % OVF_MAX));
    678c:	8d 81       	ldd	r24, Y+5	; 0x05
    678e:	08 2f       	mov	r16, r24
    6790:	10 e0       	ldi	r17, 0x00	; 0
    6792:	69 81       	ldd	r22, Y+1	; 0x01
    6794:	7a 81       	ldd	r23, Y+2	; 0x02
    6796:	8b 81       	ldd	r24, Y+3	; 0x03
    6798:	9c 81       	ldd	r25, Y+4	; 0x04
    679a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    679e:	dc 01       	movw	r26, r24
    67a0:	cb 01       	movw	r24, r22
    67a2:	9c 01       	movw	r18, r24
    67a4:	30 70       	andi	r19, 0x00	; 0
    67a6:	80 e0       	ldi	r24, 0x00	; 0
    67a8:	91 e0       	ldi	r25, 0x01	; 1
    67aa:	ac 01       	movw	r20, r24
    67ac:	42 1b       	sub	r20, r18
    67ae:	53 0b       	sbc	r21, r19
    67b0:	9a 01       	movw	r18, r20
    67b2:	c8 01       	movw	r24, r16
    67b4:	88 0f       	add	r24, r24
    67b6:	99 1f       	adc	r25, r25
    67b8:	01 96       	adiw	r24, 0x01	; 1
    67ba:	88 0f       	add	r24, r24
    67bc:	99 1f       	adc	r25, r25
    67be:	88 0f       	add	r24, r24
    67c0:	99 1f       	adc	r25, r25
    67c2:	fc 01       	movw	r30, r24
    67c4:	e0 56       	subi	r30, 0x60	; 96
    67c6:	fe 4f       	sbci	r31, 0xFE	; 254
    67c8:	31 83       	std	Z+1, r19	; 0x01
    67ca:	20 83       	st	Z, r18
			// Calulate the number of OVF
			Timer_base[copy_u8TimerID].TIMER_OVF = (Timer_base[copy_u8TimerID].TIMER_Preload != 0) ? (((u32)clc_NO_Tics / OVF_MAX) + 1) : ((u32)clc_NO_Tics / OVF_MAX);
    67cc:	8d 81       	ldd	r24, Y+5	; 0x05
    67ce:	28 2f       	mov	r18, r24
    67d0:	30 e0       	ldi	r19, 0x00	; 0
    67d2:	3d 87       	std	Y+13, r19	; 0x0d
    67d4:	2c 87       	std	Y+12, r18	; 0x0c
    67d6:	8d 81       	ldd	r24, Y+5	; 0x05
    67d8:	88 2f       	mov	r24, r24
    67da:	90 e0       	ldi	r25, 0x00	; 0
    67dc:	88 0f       	add	r24, r24
    67de:	99 1f       	adc	r25, r25
    67e0:	01 96       	adiw	r24, 0x01	; 1
    67e2:	88 0f       	add	r24, r24
    67e4:	99 1f       	adc	r25, r25
    67e6:	88 0f       	add	r24, r24
    67e8:	99 1f       	adc	r25, r25
    67ea:	fc 01       	movw	r30, r24
    67ec:	e0 56       	subi	r30, 0x60	; 96
    67ee:	fe 4f       	sbci	r31, 0xFE	; 254
    67f0:	80 81       	ld	r24, Z
    67f2:	91 81       	ldd	r25, Z+1	; 0x01
    67f4:	00 97       	sbiw	r24, 0x00	; 0
    67f6:	91 f0       	breq	.+36     	; 0x681c <TIMER_u8CreatePeriodicTask+0x232>
    67f8:	69 81       	ldd	r22, Y+1	; 0x01
    67fa:	7a 81       	ldd	r23, Y+2	; 0x02
    67fc:	8b 81       	ldd	r24, Y+3	; 0x03
    67fe:	9c 81       	ldd	r25, Y+4	; 0x04
    6800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6804:	dc 01       	movw	r26, r24
    6806:	cb 01       	movw	r24, r22
    6808:	89 2f       	mov	r24, r25
    680a:	9a 2f       	mov	r25, r26
    680c:	ab 2f       	mov	r26, r27
    680e:	bb 27       	eor	r27, r27
    6810:	ac 01       	movw	r20, r24
    6812:	4f 5f       	subi	r20, 0xFF	; 255
    6814:	5f 4f       	sbci	r21, 0xFF	; 255
    6816:	5b 87       	std	Y+11, r21	; 0x0b
    6818:	4a 87       	std	Y+10, r20	; 0x0a
    681a:	0e c0       	rjmp	.+28     	; 0x6838 <TIMER_u8CreatePeriodicTask+0x24e>
    681c:	69 81       	ldd	r22, Y+1	; 0x01
    681e:	7a 81       	ldd	r23, Y+2	; 0x02
    6820:	8b 81       	ldd	r24, Y+3	; 0x03
    6822:	9c 81       	ldd	r25, Y+4	; 0x04
    6824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6828:	dc 01       	movw	r26, r24
    682a:	cb 01       	movw	r24, r22
    682c:	89 2f       	mov	r24, r25
    682e:	9a 2f       	mov	r25, r26
    6830:	ab 2f       	mov	r26, r27
    6832:	bb 27       	eor	r27, r27
    6834:	9b 87       	std	Y+11, r25	; 0x0b
    6836:	8a 87       	std	Y+10, r24	; 0x0a
    6838:	8c 85       	ldd	r24, Y+12	; 0x0c
    683a:	9d 85       	ldd	r25, Y+13	; 0x0d
    683c:	88 0f       	add	r24, r24
    683e:	99 1f       	adc	r25, r25
    6840:	88 0f       	add	r24, r24
    6842:	99 1f       	adc	r25, r25
    6844:	88 0f       	add	r24, r24
    6846:	99 1f       	adc	r25, r25
    6848:	fc 01       	movw	r30, r24
    684a:	e0 56       	subi	r30, 0x60	; 96
    684c:	fe 4f       	sbci	r31, 0xFE	; 254
    684e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6850:	9b 85       	ldd	r25, Y+11	; 0x0b
    6852:	91 83       	std	Z+1, r25	; 0x01
    6854:	80 83       	st	Z, r24
			// Set parameters for callback
			Timer_base[copy_u8TimerID].ptr_callback_t = ptr_callback;
    6856:	8d 81       	ldd	r24, Y+5	; 0x05
    6858:	88 2f       	mov	r24, r24
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	88 0f       	add	r24, r24
    685e:	99 1f       	adc	r25, r25
    6860:	88 0f       	add	r24, r24
    6862:	99 1f       	adc	r25, r25
    6864:	88 0f       	add	r24, r24
    6866:	99 1f       	adc	r25, r25
    6868:	fc 01       	movw	r30, r24
    686a:	ea 55       	subi	r30, 0x5A	; 90
    686c:	fe 4f       	sbci	r31, 0xFE	; 254
    686e:	88 85       	ldd	r24, Y+8	; 0x08
    6870:	99 85       	ldd	r25, Y+9	; 0x09
    6872:	91 83       	std	Z+1, r25	; 0x01
    6874:	80 83       	st	Z, r24
			if(copy_u8TimerID == TIMER0ID){
    6876:	8d 81       	ldd	r24, Y+5	; 0x05
    6878:	88 23       	and	r24, r24
    687a:	91 f5       	brne	.+100    	; 0x68e0 <TIMER_u8CreatePeriodicTask+0x2f6>
				// Set preload value
				TIMER0_TCNT = Timer_base[copy_u8TimerID].TIMER_Preload;
    687c:	a2 e5       	ldi	r26, 0x52	; 82
    687e:	b0 e0       	ldi	r27, 0x00	; 0
    6880:	8d 81       	ldd	r24, Y+5	; 0x05
    6882:	88 2f       	mov	r24, r24
    6884:	90 e0       	ldi	r25, 0x00	; 0
    6886:	88 0f       	add	r24, r24
    6888:	99 1f       	adc	r25, r25
    688a:	01 96       	adiw	r24, 0x01	; 1
    688c:	88 0f       	add	r24, r24
    688e:	99 1f       	adc	r25, r25
    6890:	88 0f       	add	r24, r24
    6892:	99 1f       	adc	r25, r25
    6894:	fc 01       	movw	r30, r24
    6896:	e0 56       	subi	r30, 0x60	; 96
    6898:	fe 4f       	sbci	r31, 0xFE	; 254
    689a:	80 81       	ld	r24, Z
    689c:	91 81       	ldd	r25, Z+1	; 0x01
    689e:	8c 93       	st	X, r24
				TIMER_TIMSK &= TIMER0_TIMSK_Reset;
    68a0:	a9 e5       	ldi	r26, 0x59	; 89
    68a2:	b0 e0       	ldi	r27, 0x00	; 0
    68a4:	e9 e5       	ldi	r30, 0x59	; 89
    68a6:	f0 e0       	ldi	r31, 0x00	; 0
    68a8:	80 81       	ld	r24, Z
    68aa:	8c 7f       	andi	r24, 0xFC	; 252
    68ac:	8c 93       	st	X, r24
				TIMER_TIMSK |= TIMER_ENABLE;
    68ae:	a9 e5       	ldi	r26, 0x59	; 89
    68b0:	b0 e0       	ldi	r27, 0x00	; 0
    68b2:	e9 e5       	ldi	r30, 0x59	; 89
    68b4:	f0 e0       	ldi	r31, 0x00	; 0
    68b6:	80 81       	ld	r24, Z
    68b8:	81 60       	ori	r24, 0x01	; 1
    68ba:	8c 93       	st	X, r24
				// Enable Global Interrupt
				TIMER_SREG |= TIMER_ENABLE << TIMER_Glob_Init_bit;
    68bc:	af e5       	ldi	r26, 0x5F	; 95
    68be:	b0 e0       	ldi	r27, 0x00	; 0
    68c0:	ef e5       	ldi	r30, 0x5F	; 95
    68c2:	f0 e0       	ldi	r31, 0x00	; 0
    68c4:	80 81       	ld	r24, Z
    68c6:	80 68       	ori	r24, 0x80	; 128
    68c8:	8c 93       	st	X, r24
				// Reset timer configurations
				TIMER0_TCCR = TIMER_TCCR_Reset;
    68ca:	e3 e5       	ldi	r30, 0x53	; 83
    68cc:	f0 e0       	ldi	r31, 0x00	; 0
    68ce:	10 82       	st	Z, r1
				// Set Prescaller to 1024, confguration to (WGM: Normal, COM: Normal)
				TIMER0_TCCR |= TIMER_1024PRE;
    68d0:	a3 e5       	ldi	r26, 0x53	; 83
    68d2:	b0 e0       	ldi	r27, 0x00	; 0
    68d4:	e3 e5       	ldi	r30, 0x53	; 83
    68d6:	f0 e0       	ldi	r31, 0x00	; 0
    68d8:	80 81       	ld	r24, Z
    68da:	85 60       	ori	r24, 0x05	; 5
    68dc:	8c 93       	st	X, r24
    68de:	31 c0       	rjmp	.+98     	; 0x6942 <TIMER_u8CreatePeriodicTask+0x358>
			}
			else{
				// Set preload value
				TIMER2_TCNT = Timer_base[copy_u8TimerID].TIMER_Preload;
    68e0:	a4 e4       	ldi	r26, 0x44	; 68
    68e2:	b0 e0       	ldi	r27, 0x00	; 0
    68e4:	8d 81       	ldd	r24, Y+5	; 0x05
    68e6:	88 2f       	mov	r24, r24
    68e8:	90 e0       	ldi	r25, 0x00	; 0
    68ea:	88 0f       	add	r24, r24
    68ec:	99 1f       	adc	r25, r25
    68ee:	01 96       	adiw	r24, 0x01	; 1
    68f0:	88 0f       	add	r24, r24
    68f2:	99 1f       	adc	r25, r25
    68f4:	88 0f       	add	r24, r24
    68f6:	99 1f       	adc	r25, r25
    68f8:	fc 01       	movw	r30, r24
    68fa:	e0 56       	subi	r30, 0x60	; 96
    68fc:	fe 4f       	sbci	r31, 0xFE	; 254
    68fe:	80 81       	ld	r24, Z
    6900:	91 81       	ldd	r25, Z+1	; 0x01
    6902:	8c 93       	st	X, r24
				TIMER_TIMSK &= TIMER2_TIMSK_Reset;
    6904:	a9 e5       	ldi	r26, 0x59	; 89
    6906:	b0 e0       	ldi	r27, 0x00	; 0
    6908:	e9 e5       	ldi	r30, 0x59	; 89
    690a:	f0 e0       	ldi	r31, 0x00	; 0
    690c:	80 81       	ld	r24, Z
    690e:	8f 73       	andi	r24, 0x3F	; 63
    6910:	8c 93       	st	X, r24
				TIMER_TIMSK |= TIMER_ENABLE << TIMER_TOIE2;
    6912:	a9 e5       	ldi	r26, 0x59	; 89
    6914:	b0 e0       	ldi	r27, 0x00	; 0
    6916:	e9 e5       	ldi	r30, 0x59	; 89
    6918:	f0 e0       	ldi	r31, 0x00	; 0
    691a:	80 81       	ld	r24, Z
    691c:	80 64       	ori	r24, 0x40	; 64
    691e:	8c 93       	st	X, r24
				// Enable Global Interrupt
				TIMER_SREG |= TIMER_ENABLE << TIMER_Glob_Init_bit;
    6920:	af e5       	ldi	r26, 0x5F	; 95
    6922:	b0 e0       	ldi	r27, 0x00	; 0
    6924:	ef e5       	ldi	r30, 0x5F	; 95
    6926:	f0 e0       	ldi	r31, 0x00	; 0
    6928:	80 81       	ld	r24, Z
    692a:	80 68       	ori	r24, 0x80	; 128
    692c:	8c 93       	st	X, r24
				// Reset timer configurations
				TIMER2_TCCR = TIMER_TCCR_Reset;
    692e:	e5 e4       	ldi	r30, 0x45	; 69
    6930:	f0 e0       	ldi	r31, 0x00	; 0
    6932:	10 82       	st	Z, r1
				// Set Prescaller to 1024, confguration to (WGM: Normal, COM: Normal)
				TIMER2_TCCR |= TIMER2_1024PRE;
    6934:	a5 e4       	ldi	r26, 0x45	; 69
    6936:	b0 e0       	ldi	r27, 0x00	; 0
    6938:	e5 e4       	ldi	r30, 0x45	; 69
    693a:	f0 e0       	ldi	r31, 0x00	; 0
    693c:	80 81       	ld	r24, Z
    693e:	87 60       	ori	r24, 0x07	; 7
    6940:	8c 93       	st	X, r24
			}

		}
	}
	return 0;
    6942:	80 e0       	ldi	r24, 0x00	; 0
}
    6944:	2d 96       	adiw	r28, 0x0d	; 13
    6946:	0f b6       	in	r0, 0x3f	; 63
    6948:	f8 94       	cli
    694a:	de bf       	out	0x3e, r29	; 62
    694c:	0f be       	out	0x3f, r0	; 63
    694e:	cd bf       	out	0x3d, r28	; 61
    6950:	cf 91       	pop	r28
    6952:	df 91       	pop	r29
    6954:	1f 91       	pop	r17
    6956:	0f 91       	pop	r16
    6958:	ff 90       	pop	r15
    695a:	ef 90       	pop	r14
    695c:	08 95       	ret

0000695e <TIMER_u8deletePeriodicTask>:

u8 TIMER_u8deletePeriodicTask(u8 copy_u8TimerID){
    695e:	df 93       	push	r29
    6960:	cf 93       	push	r28
    6962:	00 d0       	rcall	.+0      	; 0x6964 <TIMER_u8deletePeriodicTask+0x6>
    6964:	cd b7       	in	r28, 0x3d	; 61
    6966:	de b7       	in	r29, 0x3e	; 62
    6968:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	// Chack data validity if not valid return fail code
	if((copy_u8TimerID <= TIMER1ID) && (Timerx_occupation_flag[copy_u8TimerID] == TIMER_Ptask)){
    696a:	89 81       	ldd	r24, Y+1	; 0x01
    696c:	83 30       	cpi	r24, 0x03	; 3
    696e:	08 f0       	brcs	.+2      	; 0x6972 <TIMER_u8deletePeriodicTask+0x14>
    6970:	67 c0       	rjmp	.+206    	; 0x6a40 <TIMER_u8deletePeriodicTask+0xe2>
    6972:	89 81       	ldd	r24, Y+1	; 0x01
    6974:	88 2f       	mov	r24, r24
    6976:	90 e0       	ldi	r25, 0x00	; 0
    6978:	fc 01       	movw	r30, r24
    697a:	e1 57       	subi	r30, 0x71	; 113
    697c:	fe 4f       	sbci	r31, 0xFE	; 254
    697e:	80 81       	ld	r24, Z
    6980:	86 30       	cpi	r24, 0x06	; 6
    6982:	09 f0       	breq	.+2      	; 0x6986 <TIMER_u8deletePeriodicTask+0x28>
    6984:	5d c0       	rjmp	.+186    	; 0x6a40 <TIMER_u8deletePeriodicTask+0xe2>
		// Clear timer data
		Timer_base[copy_u8TimerID].TIMER_OVF = TIMER_BOTTOM;
    6986:	89 81       	ldd	r24, Y+1	; 0x01
    6988:	88 2f       	mov	r24, r24
    698a:	90 e0       	ldi	r25, 0x00	; 0
    698c:	88 0f       	add	r24, r24
    698e:	99 1f       	adc	r25, r25
    6990:	88 0f       	add	r24, r24
    6992:	99 1f       	adc	r25, r25
    6994:	88 0f       	add	r24, r24
    6996:	99 1f       	adc	r25, r25
    6998:	fc 01       	movw	r30, r24
    699a:	e0 56       	subi	r30, 0x60	; 96
    699c:	fe 4f       	sbci	r31, 0xFE	; 254
    699e:	11 82       	std	Z+1, r1	; 0x01
    69a0:	10 82       	st	Z, r1
		Timer_base[copy_u8TimerID].TIMER_RestTime = TIMER_BOTTOM;
    69a2:	89 81       	ldd	r24, Y+1	; 0x01
    69a4:	88 2f       	mov	r24, r24
    69a6:	90 e0       	ldi	r25, 0x00	; 0
    69a8:	88 0f       	add	r24, r24
    69aa:	99 1f       	adc	r25, r25
    69ac:	88 0f       	add	r24, r24
    69ae:	99 1f       	adc	r25, r25
    69b0:	01 96       	adiw	r24, 0x01	; 1
    69b2:	88 0f       	add	r24, r24
    69b4:	99 1f       	adc	r25, r25
    69b6:	fc 01       	movw	r30, r24
    69b8:	e0 56       	subi	r30, 0x60	; 96
    69ba:	fe 4f       	sbci	r31, 0xFE	; 254
    69bc:	11 82       	std	Z+1, r1	; 0x01
    69be:	10 82       	st	Z, r1
		Timer_base[copy_u8TimerID].TIMER_Preload = TIMER_BOTTOM;
    69c0:	89 81       	ldd	r24, Y+1	; 0x01
    69c2:	88 2f       	mov	r24, r24
    69c4:	90 e0       	ldi	r25, 0x00	; 0
    69c6:	88 0f       	add	r24, r24
    69c8:	99 1f       	adc	r25, r25
    69ca:	01 96       	adiw	r24, 0x01	; 1
    69cc:	88 0f       	add	r24, r24
    69ce:	99 1f       	adc	r25, r25
    69d0:	88 0f       	add	r24, r24
    69d2:	99 1f       	adc	r25, r25
    69d4:	fc 01       	movw	r30, r24
    69d6:	e0 56       	subi	r30, 0x60	; 96
    69d8:	fe 4f       	sbci	r31, 0xFE	; 254
    69da:	11 82       	std	Z+1, r1	; 0x01
    69dc:	10 82       	st	Z, r1
		Timer_base[copy_u8TimerID].ptr_callback_t = NULL;
    69de:	89 81       	ldd	r24, Y+1	; 0x01
    69e0:	88 2f       	mov	r24, r24
    69e2:	90 e0       	ldi	r25, 0x00	; 0
    69e4:	88 0f       	add	r24, r24
    69e6:	99 1f       	adc	r25, r25
    69e8:	88 0f       	add	r24, r24
    69ea:	99 1f       	adc	r25, r25
    69ec:	88 0f       	add	r24, r24
    69ee:	99 1f       	adc	r25, r25
    69f0:	fc 01       	movw	r30, r24
    69f2:	ea 55       	subi	r30, 0x5A	; 90
    69f4:	fe 4f       	sbci	r31, 0xFE	; 254
    69f6:	11 82       	std	Z+1, r1	; 0x01
    69f8:	10 82       	st	Z, r1
		if(copy_u8TimerID == TIMER0ID){
    69fa:	89 81       	ldd	r24, Y+1	; 0x01
    69fc:	88 23       	and	r24, r24
    69fe:	61 f4       	brne	.+24     	; 0x6a18 <TIMER_u8deletePeriodicTask+0xba>
			// Reset timer configurations
			TIMER0_TCCR = TIMER_TCCR_Reset;
    6a00:	e3 e5       	ldi	r30, 0x53	; 83
    6a02:	f0 e0       	ldi	r31, 0x00	; 0
    6a04:	10 82       	st	Z, r1
			// set timer flag to the assign task
			Timerx_occupation_flag[copy_u8TimerID] = TIMER_Clear;
    6a06:	89 81       	ldd	r24, Y+1	; 0x01
    6a08:	88 2f       	mov	r24, r24
    6a0a:	90 e0       	ldi	r25, 0x00	; 0
    6a0c:	fc 01       	movw	r30, r24
    6a0e:	e1 57       	subi	r30, 0x71	; 113
    6a10:	fe 4f       	sbci	r31, 0xFE	; 254
    6a12:	81 e0       	ldi	r24, 0x01	; 1
    6a14:	80 83       	st	Z, r24
    6a16:	0e c0       	rjmp	.+28     	; 0x6a34 <TIMER_u8deletePeriodicTask+0xd6>
		}
		else if(copy_u8TimerID == TIMER1ID){
    6a18:	89 81       	ldd	r24, Y+1	; 0x01
    6a1a:	82 30       	cpi	r24, 0x02	; 2
    6a1c:	59 f0       	breq	.+22     	; 0x6a34 <TIMER_u8deletePeriodicTask+0xd6>

		}
		else{
			// Reset timer configurations
			TIMER2_TCCR = TIMER_TCCR_Reset;
    6a1e:	e5 e4       	ldi	r30, 0x45	; 69
    6a20:	f0 e0       	ldi	r31, 0x00	; 0
    6a22:	10 82       	st	Z, r1
			// set timer flag to the assign task
			Timerx_occupation_flag[copy_u8TimerID] = TIMER_Clear;
    6a24:	89 81       	ldd	r24, Y+1	; 0x01
    6a26:	88 2f       	mov	r24, r24
    6a28:	90 e0       	ldi	r25, 0x00	; 0
    6a2a:	fc 01       	movw	r30, r24
    6a2c:	e1 57       	subi	r30, 0x71	; 113
    6a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    6a30:	81 e0       	ldi	r24, 0x01	; 1
    6a32:	80 83       	st	Z, r24
		}
		// Disable timer interrupt
		TIMERx_vClear(copy_u8TimerID);
    6a34:	89 81       	ldd	r24, Y+1	; 0x01
    6a36:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <TIMERx_vClear>
		// return success code
		return 1;
    6a3a:	81 e0       	ldi	r24, 0x01	; 1
    6a3c:	8a 83       	std	Y+2, r24	; 0x02
    6a3e:	01 c0       	rjmp	.+2      	; 0x6a42 <TIMER_u8deletePeriodicTask+0xe4>
	}
	else{
		// return fail code
		return 0;
    6a40:	1a 82       	std	Y+2, r1	; 0x02
    6a42:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    6a44:	0f 90       	pop	r0
    6a46:	0f 90       	pop	r0
    6a48:	cf 91       	pop	r28
    6a4a:	df 91       	pop	r29
    6a4c:	08 95       	ret

00006a4e <TIMER_vPtask_Callback>:


void TIMER_vPtask_Callback(u8 copy_u8TimerID){
    6a4e:	df 93       	push	r29
    6a50:	cf 93       	push	r28
    6a52:	0f 92       	push	r0
    6a54:	cd b7       	in	r28, 0x3d	; 61
    6a56:	de b7       	in	r29, 0x3e	; 62
    6a58:	89 83       	std	Y+1, r24	; 0x01
	 *
	 */
	// Create a alocal variable to count number of overflows
	static u16 OVF_counter = TIMER_BOTTOM;
	// Check if the target number of overflows is reached
	if(++OVF_counter == Timer_base[copy_u8TimerID].TIMER_OVF){
    6a5a:	80 91 9e 01 	lds	r24, 0x019E
    6a5e:	90 91 9f 01 	lds	r25, 0x019F
    6a62:	01 96       	adiw	r24, 0x01	; 1
    6a64:	90 93 9f 01 	sts	0x019F, r25
    6a68:	80 93 9e 01 	sts	0x019E, r24
    6a6c:	20 91 9e 01 	lds	r18, 0x019E
    6a70:	30 91 9f 01 	lds	r19, 0x019F
    6a74:	89 81       	ldd	r24, Y+1	; 0x01
    6a76:	88 2f       	mov	r24, r24
    6a78:	90 e0       	ldi	r25, 0x00	; 0
    6a7a:	88 0f       	add	r24, r24
    6a7c:	99 1f       	adc	r25, r25
    6a7e:	88 0f       	add	r24, r24
    6a80:	99 1f       	adc	r25, r25
    6a82:	88 0f       	add	r24, r24
    6a84:	99 1f       	adc	r25, r25
    6a86:	fc 01       	movw	r30, r24
    6a88:	e0 56       	subi	r30, 0x60	; 96
    6a8a:	fe 4f       	sbci	r31, 0xFE	; 254
    6a8c:	80 81       	ld	r24, Z
    6a8e:	91 81       	ldd	r25, Z+1	; 0x01
    6a90:	28 17       	cp	r18, r24
    6a92:	39 07       	cpc	r19, r25
    6a94:	09 f0       	breq	.+2      	; 0x6a98 <TIMER_vPtask_Callback+0x4a>
    6a96:	43 c0       	rjmp	.+134    	; 0x6b1e <TIMER_vPtask_Callback+0xd0>
		if(copy_u8TimerID == TIMER0ID){
    6a98:	89 81       	ldd	r24, Y+1	; 0x01
    6a9a:	88 23       	and	r24, r24
    6a9c:	f1 f4       	brne	.+60     	; 0x6ada <TIMER_vPtask_Callback+0x8c>
			// stop the timer
			TIMER0_TCCR = TIMER_TCCR_Reset;
    6a9e:	e3 e5       	ldi	r30, 0x53	; 83
    6aa0:	f0 e0       	ldi	r31, 0x00	; 0
    6aa2:	10 82       	st	Z, r1
			// feed the rest time to the counter
			TIMER0_TCNT = (OVF_MAX - Timer_base[copy_u8TimerID].TIMER_RestTime);
    6aa4:	a2 e5       	ldi	r26, 0x52	; 82
    6aa6:	b0 e0       	ldi	r27, 0x00	; 0
    6aa8:	89 81       	ldd	r24, Y+1	; 0x01
    6aaa:	88 2f       	mov	r24, r24
    6aac:	90 e0       	ldi	r25, 0x00	; 0
    6aae:	88 0f       	add	r24, r24
    6ab0:	99 1f       	adc	r25, r25
    6ab2:	88 0f       	add	r24, r24
    6ab4:	99 1f       	adc	r25, r25
    6ab6:	01 96       	adiw	r24, 0x01	; 1
    6ab8:	88 0f       	add	r24, r24
    6aba:	99 1f       	adc	r25, r25
    6abc:	fc 01       	movw	r30, r24
    6abe:	e0 56       	subi	r30, 0x60	; 96
    6ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    6ac2:	80 81       	ld	r24, Z
    6ac4:	91 81       	ldd	r25, Z+1	; 0x01
    6ac6:	81 95       	neg	r24
    6ac8:	8c 93       	st	X, r24
			// Set Prescaller to 8, confguration to (WGM: Normal, COM: Normal)
			TIMER0_TCCR |= TIMER_8PRE;
    6aca:	a3 e5       	ldi	r26, 0x53	; 83
    6acc:	b0 e0       	ldi	r27, 0x00	; 0
    6ace:	e3 e5       	ldi	r30, 0x53	; 83
    6ad0:	f0 e0       	ldi	r31, 0x00	; 0
    6ad2:	80 81       	ld	r24, Z
    6ad4:	82 60       	ori	r24, 0x02	; 2
    6ad6:	8c 93       	st	X, r24
    6ad8:	9f c0       	rjmp	.+318    	; 0x6c18 <TIMER_vPtask_Callback+0x1ca>
		}
		else if(copy_u8TimerID == TIMER1ID){
    6ada:	89 81       	ldd	r24, Y+1	; 0x01
    6adc:	82 30       	cpi	r24, 0x02	; 2
    6ade:	09 f4       	brne	.+2      	; 0x6ae2 <TIMER_vPtask_Callback+0x94>
    6ae0:	9b c0       	rjmp	.+310    	; 0x6c18 <TIMER_vPtask_Callback+0x1ca>
			// change the prescaled value to uS

		}
		else{
			// stop the timer
			TIMER2_TCCR = TIMER_TCCR_Reset;
    6ae2:	e5 e4       	ldi	r30, 0x45	; 69
    6ae4:	f0 e0       	ldi	r31, 0x00	; 0
    6ae6:	10 82       	st	Z, r1
			// feed the rest time to the counter
			TIMER2_TCNT = (OVF_MAX - Timer_base[copy_u8TimerID].TIMER_RestTime);
    6ae8:	a4 e4       	ldi	r26, 0x44	; 68
    6aea:	b0 e0       	ldi	r27, 0x00	; 0
    6aec:	89 81       	ldd	r24, Y+1	; 0x01
    6aee:	88 2f       	mov	r24, r24
    6af0:	90 e0       	ldi	r25, 0x00	; 0
    6af2:	88 0f       	add	r24, r24
    6af4:	99 1f       	adc	r25, r25
    6af6:	88 0f       	add	r24, r24
    6af8:	99 1f       	adc	r25, r25
    6afa:	01 96       	adiw	r24, 0x01	; 1
    6afc:	88 0f       	add	r24, r24
    6afe:	99 1f       	adc	r25, r25
    6b00:	fc 01       	movw	r30, r24
    6b02:	e0 56       	subi	r30, 0x60	; 96
    6b04:	fe 4f       	sbci	r31, 0xFE	; 254
    6b06:	80 81       	ld	r24, Z
    6b08:	91 81       	ldd	r25, Z+1	; 0x01
    6b0a:	81 95       	neg	r24
    6b0c:	8c 93       	st	X, r24
			// Set Prescaller to 8, confguration to (WGM: Normal, COM: Normal)
			TIMER2_TCCR |= TIMER2_8PRE;
    6b0e:	a5 e4       	ldi	r26, 0x45	; 69
    6b10:	b0 e0       	ldi	r27, 0x00	; 0
    6b12:	e5 e4       	ldi	r30, 0x45	; 69
    6b14:	f0 e0       	ldi	r31, 0x00	; 0
    6b16:	80 81       	ld	r24, Z
    6b18:	82 60       	ori	r24, 0x02	; 2
    6b1a:	8c 93       	st	X, r24
    6b1c:	7d c0       	rjmp	.+250    	; 0x6c18 <TIMER_vPtask_Callback+0x1ca>
		}
	}
	else if(OVF_counter > Timer_base[copy_u8TimerID].TIMER_OVF){
    6b1e:	89 81       	ldd	r24, Y+1	; 0x01
    6b20:	88 2f       	mov	r24, r24
    6b22:	90 e0       	ldi	r25, 0x00	; 0
    6b24:	88 0f       	add	r24, r24
    6b26:	99 1f       	adc	r25, r25
    6b28:	88 0f       	add	r24, r24
    6b2a:	99 1f       	adc	r25, r25
    6b2c:	88 0f       	add	r24, r24
    6b2e:	99 1f       	adc	r25, r25
    6b30:	fc 01       	movw	r30, r24
    6b32:	e0 56       	subi	r30, 0x60	; 96
    6b34:	fe 4f       	sbci	r31, 0xFE	; 254
    6b36:	20 81       	ld	r18, Z
    6b38:	31 81       	ldd	r19, Z+1	; 0x01
    6b3a:	80 91 9e 01 	lds	r24, 0x019E
    6b3e:	90 91 9f 01 	lds	r25, 0x019F
    6b42:	28 17       	cp	r18, r24
    6b44:	39 07       	cpc	r19, r25
    6b46:	08 f0       	brcs	.+2      	; 0x6b4a <TIMER_vPtask_Callback+0xfc>
    6b48:	67 c0       	rjmp	.+206    	; 0x6c18 <TIMER_vPtask_Callback+0x1ca>
		if(copy_u8TimerID == TIMER0ID){
    6b4a:	89 81       	ldd	r24, Y+1	; 0x01
    6b4c:	88 23       	and	r24, r24
    6b4e:	89 f5       	brne	.+98     	; 0x6bb2 <TIMER_vPtask_Callback+0x164>
			// stop the timer
			TIMER0_TCCR = TIMER_TCCR_Reset;
    6b50:	e3 e5       	ldi	r30, 0x53	; 83
    6b52:	f0 e0       	ldi	r31, 0x00	; 0
    6b54:	10 82       	st	Z, r1
			// call the periodic function
			Timer_base[copy_u8TimerID].ptr_callback_t();
    6b56:	89 81       	ldd	r24, Y+1	; 0x01
    6b58:	88 2f       	mov	r24, r24
    6b5a:	90 e0       	ldi	r25, 0x00	; 0
    6b5c:	88 0f       	add	r24, r24
    6b5e:	99 1f       	adc	r25, r25
    6b60:	88 0f       	add	r24, r24
    6b62:	99 1f       	adc	r25, r25
    6b64:	88 0f       	add	r24, r24
    6b66:	99 1f       	adc	r25, r25
    6b68:	fc 01       	movw	r30, r24
    6b6a:	ea 55       	subi	r30, 0x5A	; 90
    6b6c:	fe 4f       	sbci	r31, 0xFE	; 254
    6b6e:	01 90       	ld	r0, Z+
    6b70:	f0 81       	ld	r31, Z
    6b72:	e0 2d       	mov	r30, r0
    6b74:	09 95       	icall
			// feed the preload value
			TIMER0_TCNT = Timer_base[copy_u8TimerID].TIMER_Preload;
    6b76:	a2 e5       	ldi	r26, 0x52	; 82
    6b78:	b0 e0       	ldi	r27, 0x00	; 0
    6b7a:	89 81       	ldd	r24, Y+1	; 0x01
    6b7c:	88 2f       	mov	r24, r24
    6b7e:	90 e0       	ldi	r25, 0x00	; 0
    6b80:	88 0f       	add	r24, r24
    6b82:	99 1f       	adc	r25, r25
    6b84:	01 96       	adiw	r24, 0x01	; 1
    6b86:	88 0f       	add	r24, r24
    6b88:	99 1f       	adc	r25, r25
    6b8a:	88 0f       	add	r24, r24
    6b8c:	99 1f       	adc	r25, r25
    6b8e:	fc 01       	movw	r30, r24
    6b90:	e0 56       	subi	r30, 0x60	; 96
    6b92:	fe 4f       	sbci	r31, 0xFE	; 254
    6b94:	80 81       	ld	r24, Z
    6b96:	91 81       	ldd	r25, Z+1	; 0x01
    6b98:	8c 93       	st	X, r24
			// Set Prescaller to 1024, confguration to (WGM: Normal, COM: Normal)
			TIMER0_TCCR |= TIMER_1024PRE;
    6b9a:	a3 e5       	ldi	r26, 0x53	; 83
    6b9c:	b0 e0       	ldi	r27, 0x00	; 0
    6b9e:	e3 e5       	ldi	r30, 0x53	; 83
    6ba0:	f0 e0       	ldi	r31, 0x00	; 0
    6ba2:	80 81       	ld	r24, Z
    6ba4:	85 60       	ori	r24, 0x05	; 5
    6ba6:	8c 93       	st	X, r24
			// clear the OVF counter
			OVF_counter = TIMER_BOTTOM;
    6ba8:	10 92 9f 01 	sts	0x019F, r1
    6bac:	10 92 9e 01 	sts	0x019E, r1
    6bb0:	33 c0       	rjmp	.+102    	; 0x6c18 <TIMER_vPtask_Callback+0x1ca>
		}
		else if(copy_u8TimerID == TIMER1ID){
    6bb2:	89 81       	ldd	r24, Y+1	; 0x01
    6bb4:	82 30       	cpi	r24, 0x02	; 2
    6bb6:	81 f1       	breq	.+96     	; 0x6c18 <TIMER_vPtask_Callback+0x1ca>

			// clear the OVF counter
		}
		else{
			// stop the timer
			TIMER2_TCCR = TIMER_TCCR_Reset;
    6bb8:	e5 e4       	ldi	r30, 0x45	; 69
    6bba:	f0 e0       	ldi	r31, 0x00	; 0
    6bbc:	10 82       	st	Z, r1
			// call the periodic function
			Timer_base[copy_u8TimerID].ptr_callback_t();
    6bbe:	89 81       	ldd	r24, Y+1	; 0x01
    6bc0:	88 2f       	mov	r24, r24
    6bc2:	90 e0       	ldi	r25, 0x00	; 0
    6bc4:	88 0f       	add	r24, r24
    6bc6:	99 1f       	adc	r25, r25
    6bc8:	88 0f       	add	r24, r24
    6bca:	99 1f       	adc	r25, r25
    6bcc:	88 0f       	add	r24, r24
    6bce:	99 1f       	adc	r25, r25
    6bd0:	fc 01       	movw	r30, r24
    6bd2:	ea 55       	subi	r30, 0x5A	; 90
    6bd4:	fe 4f       	sbci	r31, 0xFE	; 254
    6bd6:	01 90       	ld	r0, Z+
    6bd8:	f0 81       	ld	r31, Z
    6bda:	e0 2d       	mov	r30, r0
    6bdc:	09 95       	icall
			// feed the preload value
			TIMER2_TCNT = Timer_base[copy_u8TimerID].TIMER_Preload;
    6bde:	a4 e4       	ldi	r26, 0x44	; 68
    6be0:	b0 e0       	ldi	r27, 0x00	; 0
    6be2:	89 81       	ldd	r24, Y+1	; 0x01
    6be4:	88 2f       	mov	r24, r24
    6be6:	90 e0       	ldi	r25, 0x00	; 0
    6be8:	88 0f       	add	r24, r24
    6bea:	99 1f       	adc	r25, r25
    6bec:	01 96       	adiw	r24, 0x01	; 1
    6bee:	88 0f       	add	r24, r24
    6bf0:	99 1f       	adc	r25, r25
    6bf2:	88 0f       	add	r24, r24
    6bf4:	99 1f       	adc	r25, r25
    6bf6:	fc 01       	movw	r30, r24
    6bf8:	e0 56       	subi	r30, 0x60	; 96
    6bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    6bfc:	80 81       	ld	r24, Z
    6bfe:	91 81       	ldd	r25, Z+1	; 0x01
    6c00:	8c 93       	st	X, r24
			// Set Prescaller to 1024, confguration to (WGM: Normal, COM: Normal)
			TIMER2_TCCR |= TIMER2_1024PRE;
    6c02:	a5 e4       	ldi	r26, 0x45	; 69
    6c04:	b0 e0       	ldi	r27, 0x00	; 0
    6c06:	e5 e4       	ldi	r30, 0x45	; 69
    6c08:	f0 e0       	ldi	r31, 0x00	; 0
    6c0a:	80 81       	ld	r24, Z
    6c0c:	87 60       	ori	r24, 0x07	; 7
    6c0e:	8c 93       	st	X, r24
			// clear the OVF counter
			OVF_counter = TIMER_BOTTOM;
    6c10:	10 92 9f 01 	sts	0x019F, r1
    6c14:	10 92 9e 01 	sts	0x019E, r1
		}
	}
	// Incase of not equal then increment and continue
	else{
	}
}
    6c18:	0f 90       	pop	r0
    6c1a:	cf 91       	pop	r28
    6c1c:	df 91       	pop	r29
    6c1e:	08 95       	ret

00006c20 <TIMER_u8CounterStart>:

/* Counter functions Implementation */
u8   TIMER_u8CounterStart (u8 copy_u8TimerID, u8 copy_u8TimerPrescaler, u32* ptr_return_variable){
    6c20:	df 93       	push	r29
    6c22:	cf 93       	push	r28
    6c24:	cd b7       	in	r28, 0x3d	; 61
    6c26:	de b7       	in	r29, 0x3e	; 62
    6c28:	29 97       	sbiw	r28, 0x09	; 9
    6c2a:	0f b6       	in	r0, 0x3f	; 63
    6c2c:	f8 94       	cli
    6c2e:	de bf       	out	0x3e, r29	; 62
    6c30:	0f be       	out	0x3f, r0	; 63
    6c32:	cd bf       	out	0x3d, r28	; 61
    6c34:	89 83       	std	Y+1, r24	; 0x01
    6c36:	6a 83       	std	Y+2, r22	; 0x02
    6c38:	5c 83       	std	Y+4, r21	; 0x04
    6c3a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 *
	 */
	if((copy_u8TimerID <= TIMER1ID) && (copy_u8TimerPrescaler <= TIMER2_1024PRE) && (Timerx_occupation_flag[copy_u8TimerID] == TIMER_Clear)){
    6c3c:	89 81       	ldd	r24, Y+1	; 0x01
    6c3e:	83 30       	cpi	r24, 0x03	; 3
    6c40:	08 f0       	brcs	.+2      	; 0x6c44 <TIMER_u8CounterStart+0x24>
    6c42:	3b c1       	rjmp	.+630    	; 0x6eba <TIMER_u8CounterStart+0x29a>
    6c44:	8a 81       	ldd	r24, Y+2	; 0x02
    6c46:	88 30       	cpi	r24, 0x08	; 8
    6c48:	08 f0       	brcs	.+2      	; 0x6c4c <TIMER_u8CounterStart+0x2c>
    6c4a:	37 c1       	rjmp	.+622    	; 0x6eba <TIMER_u8CounterStart+0x29a>
    6c4c:	89 81       	ldd	r24, Y+1	; 0x01
    6c4e:	88 2f       	mov	r24, r24
    6c50:	90 e0       	ldi	r25, 0x00	; 0
    6c52:	fc 01       	movw	r30, r24
    6c54:	e1 57       	subi	r30, 0x71	; 113
    6c56:	fe 4f       	sbci	r31, 0xFE	; 254
    6c58:	80 81       	ld	r24, Z
    6c5a:	81 30       	cpi	r24, 0x01	; 1
    6c5c:	09 f0       	breq	.+2      	; 0x6c60 <TIMER_u8CounterStart+0x40>
    6c5e:	2d c1       	rjmp	.+602    	; 0x6eba <TIMER_u8CounterStart+0x29a>
		// Clear timer data
		Timer_base[copy_u8TimerID].TIMER_OVF = TIMER_BOTTOM;
    6c60:	89 81       	ldd	r24, Y+1	; 0x01
    6c62:	88 2f       	mov	r24, r24
    6c64:	90 e0       	ldi	r25, 0x00	; 0
    6c66:	88 0f       	add	r24, r24
    6c68:	99 1f       	adc	r25, r25
    6c6a:	88 0f       	add	r24, r24
    6c6c:	99 1f       	adc	r25, r25
    6c6e:	88 0f       	add	r24, r24
    6c70:	99 1f       	adc	r25, r25
    6c72:	fc 01       	movw	r30, r24
    6c74:	e0 56       	subi	r30, 0x60	; 96
    6c76:	fe 4f       	sbci	r31, 0xFE	; 254
    6c78:	11 82       	std	Z+1, r1	; 0x01
    6c7a:	10 82       	st	Z, r1
		Timer_base[copy_u8TimerID].TIMER_RestTime = TIMER_BOTTOM;
    6c7c:	89 81       	ldd	r24, Y+1	; 0x01
    6c7e:	88 2f       	mov	r24, r24
    6c80:	90 e0       	ldi	r25, 0x00	; 0
    6c82:	88 0f       	add	r24, r24
    6c84:	99 1f       	adc	r25, r25
    6c86:	88 0f       	add	r24, r24
    6c88:	99 1f       	adc	r25, r25
    6c8a:	01 96       	adiw	r24, 0x01	; 1
    6c8c:	88 0f       	add	r24, r24
    6c8e:	99 1f       	adc	r25, r25
    6c90:	fc 01       	movw	r30, r24
    6c92:	e0 56       	subi	r30, 0x60	; 96
    6c94:	fe 4f       	sbci	r31, 0xFE	; 254
    6c96:	11 82       	std	Z+1, r1	; 0x01
    6c98:	10 82       	st	Z, r1
		Timer_base[copy_u8TimerID].TIMER_Preload = TIMER_BOTTOM;
    6c9a:	89 81       	ldd	r24, Y+1	; 0x01
    6c9c:	88 2f       	mov	r24, r24
    6c9e:	90 e0       	ldi	r25, 0x00	; 0
    6ca0:	88 0f       	add	r24, r24
    6ca2:	99 1f       	adc	r25, r25
    6ca4:	01 96       	adiw	r24, 0x01	; 1
    6ca6:	88 0f       	add	r24, r24
    6ca8:	99 1f       	adc	r25, r25
    6caa:	88 0f       	add	r24, r24
    6cac:	99 1f       	adc	r25, r25
    6cae:	fc 01       	movw	r30, r24
    6cb0:	e0 56       	subi	r30, 0x60	; 96
    6cb2:	fe 4f       	sbci	r31, 0xFE	; 254
    6cb4:	11 82       	std	Z+1, r1	; 0x01
    6cb6:	10 82       	st	Z, r1
		Timer_base[copy_u8TimerID].ptr_callback_t = NULL;
    6cb8:	89 81       	ldd	r24, Y+1	; 0x01
    6cba:	88 2f       	mov	r24, r24
    6cbc:	90 e0       	ldi	r25, 0x00	; 0
    6cbe:	88 0f       	add	r24, r24
    6cc0:	99 1f       	adc	r25, r25
    6cc2:	88 0f       	add	r24, r24
    6cc4:	99 1f       	adc	r25, r25
    6cc6:	88 0f       	add	r24, r24
    6cc8:	99 1f       	adc	r25, r25
    6cca:	fc 01       	movw	r30, r24
    6ccc:	ea 55       	subi	r30, 0x5A	; 90
    6cce:	fe 4f       	sbci	r31, 0xFE	; 254
    6cd0:	11 82       	std	Z+1, r1	; 0x01
    6cd2:	10 82       	st	Z, r1
		// Set Occupation flag
		Timerx_occupation_flag[copy_u8TimerID] = TIMER_Counter;
    6cd4:	89 81       	ldd	r24, Y+1	; 0x01
    6cd6:	88 2f       	mov	r24, r24
    6cd8:	90 e0       	ldi	r25, 0x00	; 0
    6cda:	fc 01       	movw	r30, r24
    6cdc:	e1 57       	subi	r30, 0x71	; 113
    6cde:	fe 4f       	sbci	r31, 0xFE	; 254
    6ce0:	84 e0       	ldi	r24, 0x04	; 4
    6ce2:	80 83       	st	Z, r24
		if(copy_u8TimerID == TIMER0ID){
    6ce4:	89 81       	ldd	r24, Y+1	; 0x01
    6ce6:	88 23       	and	r24, r24
    6ce8:	09 f0       	breq	.+2      	; 0x6cec <TIMER_u8CounterStart+0xcc>
    6cea:	74 c0       	rjmp	.+232    	; 0x6dd4 <TIMER_u8CounterStart+0x1b4>
			// Clear timer config
			TIMER0_TCCR = TIMER_TCCR_Reset;
    6cec:	e3 e5       	ldi	r30, 0x53	; 83
    6cee:	f0 e0       	ldi	r31, 0x00	; 0
    6cf0:	10 82       	st	Z, r1
			// Clear counter
			TIMER0_TCNT = TIMER_BOTTOM;
    6cf2:	e2 e5       	ldi	r30, 0x52	; 82
    6cf4:	f0 e0       	ldi	r31, 0x00	; 0
    6cf6:	10 82       	st	Z, r1
			// Enable interrupts
			TIMER_TIMSK &= TIMER0_TIMSK_Reset;
    6cf8:	a9 e5       	ldi	r26, 0x59	; 89
    6cfa:	b0 e0       	ldi	r27, 0x00	; 0
    6cfc:	e9 e5       	ldi	r30, 0x59	; 89
    6cfe:	f0 e0       	ldi	r31, 0x00	; 0
    6d00:	80 81       	ld	r24, Z
    6d02:	8c 7f       	andi	r24, 0xFC	; 252
    6d04:	8c 93       	st	X, r24
			TIMER_TIMSK |= TIMER_ENABLE;
    6d06:	a9 e5       	ldi	r26, 0x59	; 89
    6d08:	b0 e0       	ldi	r27, 0x00	; 0
    6d0a:	e9 e5       	ldi	r30, 0x59	; 89
    6d0c:	f0 e0       	ldi	r31, 0x00	; 0
    6d0e:	80 81       	ld	r24, Z
    6d10:	81 60       	ori	r24, 0x01	; 1
    6d12:	8c 93       	st	X, r24
			// Enable Global Interrupt
			TIMER_SREG |= TIMER_ENABLE << TIMER_Glob_Init_bit;
    6d14:	af e5       	ldi	r26, 0x5F	; 95
    6d16:	b0 e0       	ldi	r27, 0x00	; 0
    6d18:	ef e5       	ldi	r30, 0x5F	; 95
    6d1a:	f0 e0       	ldi	r31, 0x00	; 0
    6d1c:	80 81       	ld	r24, Z
    6d1e:	80 68       	ori	r24, 0x80	; 128
    6d20:	8c 93       	st	X, r24
			// Set prescaler value
			switch(copy_u8TimerPrescaler){
    6d22:	8a 81       	ldd	r24, Y+2	; 0x02
    6d24:	28 2f       	mov	r18, r24
    6d26:	30 e0       	ldi	r19, 0x00	; 0
    6d28:	39 87       	std	Y+9, r19	; 0x09
    6d2a:	28 87       	std	Y+8, r18	; 0x08
    6d2c:	88 85       	ldd	r24, Y+8	; 0x08
    6d2e:	99 85       	ldd	r25, Y+9	; 0x09
    6d30:	83 30       	cpi	r24, 0x03	; 3
    6d32:	91 05       	cpc	r25, r1
    6d34:	29 f1       	breq	.+74     	; 0x6d80 <TIMER_u8CounterStart+0x160>
    6d36:	28 85       	ldd	r18, Y+8	; 0x08
    6d38:	39 85       	ldd	r19, Y+9	; 0x09
    6d3a:	24 30       	cpi	r18, 0x04	; 4
    6d3c:	31 05       	cpc	r19, r1
    6d3e:	5c f4       	brge	.+22     	; 0x6d56 <TIMER_u8CounterStart+0x136>
    6d40:	88 85       	ldd	r24, Y+8	; 0x08
    6d42:	99 85       	ldd	r25, Y+9	; 0x09
    6d44:	81 30       	cpi	r24, 0x01	; 1
    6d46:	91 05       	cpc	r25, r1
    6d48:	89 f0       	breq	.+34     	; 0x6d6c <TIMER_u8CounterStart+0x14c>
    6d4a:	28 85       	ldd	r18, Y+8	; 0x08
    6d4c:	39 85       	ldd	r19, Y+9	; 0x09
    6d4e:	22 30       	cpi	r18, 0x02	; 2
    6d50:	31 05       	cpc	r19, r1
    6d52:	89 f0       	breq	.+34     	; 0x6d76 <TIMER_u8CounterStart+0x156>
    6d54:	23 c0       	rjmp	.+70     	; 0x6d9c <TIMER_u8CounterStart+0x17c>
    6d56:	88 85       	ldd	r24, Y+8	; 0x08
    6d58:	99 85       	ldd	r25, Y+9	; 0x09
    6d5a:	84 30       	cpi	r24, 0x04	; 4
    6d5c:	91 05       	cpc	r25, r1
    6d5e:	a9 f0       	breq	.+42     	; 0x6d8a <TIMER_u8CounterStart+0x16a>
    6d60:	28 85       	ldd	r18, Y+8	; 0x08
    6d62:	39 85       	ldd	r19, Y+9	; 0x09
    6d64:	25 30       	cpi	r18, 0x05	; 5
    6d66:	31 05       	cpc	r19, r1
    6d68:	a9 f0       	breq	.+42     	; 0x6d94 <TIMER_u8CounterStart+0x174>
    6d6a:	18 c0       	rjmp	.+48     	; 0x6d9c <TIMER_u8CounterStart+0x17c>
			case TIMER_1PRE:
				TIMER0_TCCR = TIMER_1PRE;
    6d6c:	e3 e5       	ldi	r30, 0x53	; 83
    6d6e:	f0 e0       	ldi	r31, 0x00	; 0
    6d70:	81 e0       	ldi	r24, 0x01	; 1
    6d72:	80 83       	st	Z, r24
    6d74:	13 c0       	rjmp	.+38     	; 0x6d9c <TIMER_u8CounterStart+0x17c>
				break;
			case TIMER_8PRE:
				TIMER0_TCCR = TIMER_8PRE;
    6d76:	e3 e5       	ldi	r30, 0x53	; 83
    6d78:	f0 e0       	ldi	r31, 0x00	; 0
    6d7a:	82 e0       	ldi	r24, 0x02	; 2
    6d7c:	80 83       	st	Z, r24
    6d7e:	0e c0       	rjmp	.+28     	; 0x6d9c <TIMER_u8CounterStart+0x17c>
				break;
			case TIMER_64PRE:
				TIMER0_TCCR = TIMER_64PRE;
    6d80:	e3 e5       	ldi	r30, 0x53	; 83
    6d82:	f0 e0       	ldi	r31, 0x00	; 0
    6d84:	83 e0       	ldi	r24, 0x03	; 3
    6d86:	80 83       	st	Z, r24
    6d88:	09 c0       	rjmp	.+18     	; 0x6d9c <TIMER_u8CounterStart+0x17c>
				break;
			case TIMER_256PRE:
				TIMER0_TCCR = TIMER_256PRE;
    6d8a:	e3 e5       	ldi	r30, 0x53	; 83
    6d8c:	f0 e0       	ldi	r31, 0x00	; 0
    6d8e:	84 e0       	ldi	r24, 0x04	; 4
    6d90:	80 83       	st	Z, r24
    6d92:	04 c0       	rjmp	.+8      	; 0x6d9c <TIMER_u8CounterStart+0x17c>
				break;
			case TIMER_1024PRE:
				TIMER0_TCCR = TIMER_1024PRE;
    6d94:	e3 e5       	ldi	r30, 0x53	; 83
    6d96:	f0 e0       	ldi	r31, 0x00	; 0
    6d98:	85 e0       	ldi	r24, 0x05	; 5
    6d9a:	80 83       	st	Z, r24
				break;
			default:
				break;
			}
			// saving the counter pointer
			Counter_ptr[copy_u8TimerID] = ptr_return_variable;
    6d9c:	89 81       	ldd	r24, Y+1	; 0x01
    6d9e:	88 2f       	mov	r24, r24
    6da0:	90 e0       	ldi	r25, 0x00	; 0
    6da2:	88 0f       	add	r24, r24
    6da4:	99 1f       	adc	r25, r25
    6da6:	fc 01       	movw	r30, r24
    6da8:	e0 55       	subi	r30, 0x50	; 80
    6daa:	fe 4f       	sbci	r31, 0xFE	; 254
    6dac:	8b 81       	ldd	r24, Y+3	; 0x03
    6dae:	9c 81       	ldd	r25, Y+4	; 0x04
    6db0:	91 83       	std	Z+1, r25	; 0x01
    6db2:	80 83       	st	Z, r24
			// Clear the counter variable
			*(Counter_ptr[copy_u8TimerID]) = TIMER_BOTTOM;
    6db4:	89 81       	ldd	r24, Y+1	; 0x01
    6db6:	88 2f       	mov	r24, r24
    6db8:	90 e0       	ldi	r25, 0x00	; 0
    6dba:	88 0f       	add	r24, r24
    6dbc:	99 1f       	adc	r25, r25
    6dbe:	fc 01       	movw	r30, r24
    6dc0:	e0 55       	subi	r30, 0x50	; 80
    6dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    6dc4:	01 90       	ld	r0, Z+
    6dc6:	f0 81       	ld	r31, Z
    6dc8:	e0 2d       	mov	r30, r0
    6dca:	10 82       	st	Z, r1
    6dcc:	11 82       	std	Z+1, r1	; 0x01
    6dce:	12 82       	std	Z+2, r1	; 0x02
    6dd0:	13 82       	std	Z+3, r1	; 0x03
    6dd2:	70 c0       	rjmp	.+224    	; 0x6eb4 <TIMER_u8CounterStart+0x294>
		}
		else if(copy_u8TimerID == TIMER1ID){
    6dd4:	89 81       	ldd	r24, Y+1	; 0x01
    6dd6:	82 30       	cpi	r24, 0x02	; 2
    6dd8:	09 f4       	brne	.+2      	; 0x6ddc <TIMER_u8CounterStart+0x1bc>
    6dda:	6c c0       	rjmp	.+216    	; 0x6eb4 <TIMER_u8CounterStart+0x294>

		}
		else{
			switch(copy_u8TimerPrescaler){
    6ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    6dde:	28 2f       	mov	r18, r24
    6de0:	30 e0       	ldi	r19, 0x00	; 0
    6de2:	3f 83       	std	Y+7, r19	; 0x07
    6de4:	2e 83       	std	Y+6, r18	; 0x06
    6de6:	8e 81       	ldd	r24, Y+6	; 0x06
    6de8:	9f 81       	ldd	r25, Y+7	; 0x07
    6dea:	84 30       	cpi	r24, 0x04	; 4
    6dec:	91 05       	cpc	r25, r1
    6dee:	a1 f1       	breq	.+104    	; 0x6e58 <TIMER_u8CounterStart+0x238>
    6df0:	2e 81       	ldd	r18, Y+6	; 0x06
    6df2:	3f 81       	ldd	r19, Y+7	; 0x07
    6df4:	25 30       	cpi	r18, 0x05	; 5
    6df6:	31 05       	cpc	r19, r1
    6df8:	84 f4       	brge	.+32     	; 0x6e1a <TIMER_u8CounterStart+0x1fa>
    6dfa:	8e 81       	ldd	r24, Y+6	; 0x06
    6dfc:	9f 81       	ldd	r25, Y+7	; 0x07
    6dfe:	82 30       	cpi	r24, 0x02	; 2
    6e00:	91 05       	cpc	r25, r1
    6e02:	01 f1       	breq	.+64     	; 0x6e44 <TIMER_u8CounterStart+0x224>
    6e04:	2e 81       	ldd	r18, Y+6	; 0x06
    6e06:	3f 81       	ldd	r19, Y+7	; 0x07
    6e08:	23 30       	cpi	r18, 0x03	; 3
    6e0a:	31 05       	cpc	r19, r1
    6e0c:	04 f5       	brge	.+64     	; 0x6e4e <TIMER_u8CounterStart+0x22e>
    6e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    6e10:	9f 81       	ldd	r25, Y+7	; 0x07
    6e12:	81 30       	cpi	r24, 0x01	; 1
    6e14:	91 05       	cpc	r25, r1
    6e16:	89 f0       	breq	.+34     	; 0x6e3a <TIMER_u8CounterStart+0x21a>
    6e18:	32 c0       	rjmp	.+100    	; 0x6e7e <TIMER_u8CounterStart+0x25e>
    6e1a:	2e 81       	ldd	r18, Y+6	; 0x06
    6e1c:	3f 81       	ldd	r19, Y+7	; 0x07
    6e1e:	26 30       	cpi	r18, 0x06	; 6
    6e20:	31 05       	cpc	r19, r1
    6e22:	21 f1       	breq	.+72     	; 0x6e6c <TIMER_u8CounterStart+0x24c>
    6e24:	8e 81       	ldd	r24, Y+6	; 0x06
    6e26:	9f 81       	ldd	r25, Y+7	; 0x07
    6e28:	86 30       	cpi	r24, 0x06	; 6
    6e2a:	91 05       	cpc	r25, r1
    6e2c:	d4 f0       	brlt	.+52     	; 0x6e62 <TIMER_u8CounterStart+0x242>
    6e2e:	2e 81       	ldd	r18, Y+6	; 0x06
    6e30:	3f 81       	ldd	r19, Y+7	; 0x07
    6e32:	27 30       	cpi	r18, 0x07	; 7
    6e34:	31 05       	cpc	r19, r1
    6e36:	f9 f0       	breq	.+62     	; 0x6e76 <TIMER_u8CounterStart+0x256>
    6e38:	22 c0       	rjmp	.+68     	; 0x6e7e <TIMER_u8CounterStart+0x25e>
			TIMER_TIMSK |= TIMER_ENABLE << TIMER_TOIE2;
			// Enable Global Interrupt
			TIMER_SREG |= TIMER_ENABLE << TIMER_Glob_Init_bit;
			// Set prescaler value
			case TIMER2_1PRE:
				TIMER2_TCCR = TIMER2_1PRE;
    6e3a:	e5 e4       	ldi	r30, 0x45	; 69
    6e3c:	f0 e0       	ldi	r31, 0x00	; 0
    6e3e:	81 e0       	ldi	r24, 0x01	; 1
    6e40:	80 83       	st	Z, r24
    6e42:	1d c0       	rjmp	.+58     	; 0x6e7e <TIMER_u8CounterStart+0x25e>
				break;
			case TIMER2_8PRE:
				TIMER2_TCCR = TIMER2_8PRE;
    6e44:	e5 e4       	ldi	r30, 0x45	; 69
    6e46:	f0 e0       	ldi	r31, 0x00	; 0
    6e48:	82 e0       	ldi	r24, 0x02	; 2
    6e4a:	80 83       	st	Z, r24
    6e4c:	18 c0       	rjmp	.+48     	; 0x6e7e <TIMER_u8CounterStart+0x25e>
				break;
			case TIMER2_32PRE:
				TIMER2_TCCR = TIMER2_32PRE;
    6e4e:	e5 e4       	ldi	r30, 0x45	; 69
    6e50:	f0 e0       	ldi	r31, 0x00	; 0
    6e52:	83 e0       	ldi	r24, 0x03	; 3
    6e54:	80 83       	st	Z, r24
    6e56:	13 c0       	rjmp	.+38     	; 0x6e7e <TIMER_u8CounterStart+0x25e>
				break;
			case TIMER2_64PRE:
				TIMER2_TCCR = TIMER2_64PRE;
    6e58:	e5 e4       	ldi	r30, 0x45	; 69
    6e5a:	f0 e0       	ldi	r31, 0x00	; 0
    6e5c:	84 e0       	ldi	r24, 0x04	; 4
    6e5e:	80 83       	st	Z, r24
    6e60:	0e c0       	rjmp	.+28     	; 0x6e7e <TIMER_u8CounterStart+0x25e>
				break;
			case TIMER2_128PRE:
				TIMER2_TCCR = TIMER2_128PRE;
    6e62:	e5 e4       	ldi	r30, 0x45	; 69
    6e64:	f0 e0       	ldi	r31, 0x00	; 0
    6e66:	85 e0       	ldi	r24, 0x05	; 5
    6e68:	80 83       	st	Z, r24
    6e6a:	09 c0       	rjmp	.+18     	; 0x6e7e <TIMER_u8CounterStart+0x25e>
				break;
			case TIMER2_256PRE:
				TIMER2_TCCR = TIMER2_256PRE;
    6e6c:	e5 e4       	ldi	r30, 0x45	; 69
    6e6e:	f0 e0       	ldi	r31, 0x00	; 0
    6e70:	86 e0       	ldi	r24, 0x06	; 6
    6e72:	80 83       	st	Z, r24
    6e74:	04 c0       	rjmp	.+8      	; 0x6e7e <TIMER_u8CounterStart+0x25e>
				break;
			case TIMER2_1024PRE:
				TIMER2_TCCR = TIMER2_1024PRE;
    6e76:	e5 e4       	ldi	r30, 0x45	; 69
    6e78:	f0 e0       	ldi	r31, 0x00	; 0
    6e7a:	87 e0       	ldi	r24, 0x07	; 7
    6e7c:	80 83       	st	Z, r24
				break;
			default:
				break;
			}
			// saving the counter pointer
			Counter_ptr[copy_u8TimerID] = ptr_return_variable;
    6e7e:	89 81       	ldd	r24, Y+1	; 0x01
    6e80:	88 2f       	mov	r24, r24
    6e82:	90 e0       	ldi	r25, 0x00	; 0
    6e84:	88 0f       	add	r24, r24
    6e86:	99 1f       	adc	r25, r25
    6e88:	fc 01       	movw	r30, r24
    6e8a:	e0 55       	subi	r30, 0x50	; 80
    6e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    6e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    6e90:	9c 81       	ldd	r25, Y+4	; 0x04
    6e92:	91 83       	std	Z+1, r25	; 0x01
    6e94:	80 83       	st	Z, r24
			// Clear the counter variable
			*(Counter_ptr[copy_u8TimerID]) = TIMER_BOTTOM;
    6e96:	89 81       	ldd	r24, Y+1	; 0x01
    6e98:	88 2f       	mov	r24, r24
    6e9a:	90 e0       	ldi	r25, 0x00	; 0
    6e9c:	88 0f       	add	r24, r24
    6e9e:	99 1f       	adc	r25, r25
    6ea0:	fc 01       	movw	r30, r24
    6ea2:	e0 55       	subi	r30, 0x50	; 80
    6ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    6ea6:	01 90       	ld	r0, Z+
    6ea8:	f0 81       	ld	r31, Z
    6eaa:	e0 2d       	mov	r30, r0
    6eac:	10 82       	st	Z, r1
    6eae:	11 82       	std	Z+1, r1	; 0x01
    6eb0:	12 82       	std	Z+2, r1	; 0x02
    6eb2:	13 82       	std	Z+3, r1	; 0x03
		}
		return 1;
    6eb4:	31 e0       	ldi	r19, 0x01	; 1
    6eb6:	3d 83       	std	Y+5, r19	; 0x05
    6eb8:	01 c0       	rjmp	.+2      	; 0x6ebc <TIMER_u8CounterStart+0x29c>
	}
	else{
		return 0;
    6eba:	1d 82       	std	Y+5, r1	; 0x05
    6ebc:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    6ebe:	29 96       	adiw	r28, 0x09	; 9
    6ec0:	0f b6       	in	r0, 0x3f	; 63
    6ec2:	f8 94       	cli
    6ec4:	de bf       	out	0x3e, r29	; 62
    6ec6:	0f be       	out	0x3f, r0	; 63
    6ec8:	cd bf       	out	0x3d, r28	; 61
    6eca:	cf 91       	pop	r28
    6ecc:	df 91       	pop	r29
    6ece:	08 95       	ret

00006ed0 <TIMER_u8CounterStop>:

u8  TIMER_u8CounterStop  (u8 copy_u8TimerID){
    6ed0:	df 93       	push	r29
    6ed2:	cf 93       	push	r28
    6ed4:	00 d0       	rcall	.+0      	; 0x6ed6 <TIMER_u8CounterStop+0x6>
    6ed6:	cd b7       	in	r28, 0x3d	; 61
    6ed8:	de b7       	in	r29, 0x3e	; 62
    6eda:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	if((copy_u8TimerID <= TIMER1ID) && (Timerx_occupation_flag[copy_u8TimerID] == TIMER_Counter)){
    6edc:	89 81       	ldd	r24, Y+1	; 0x01
    6ede:	83 30       	cpi	r24, 0x03	; 3
    6ee0:	08 f0       	brcs	.+2      	; 0x6ee4 <TIMER_u8CounterStop+0x14>
    6ee2:	bf c0       	rjmp	.+382    	; 0x7062 <TIMER_u8CounterStop+0x192>
    6ee4:	89 81       	ldd	r24, Y+1	; 0x01
    6ee6:	88 2f       	mov	r24, r24
    6ee8:	90 e0       	ldi	r25, 0x00	; 0
    6eea:	fc 01       	movw	r30, r24
    6eec:	e1 57       	subi	r30, 0x71	; 113
    6eee:	fe 4f       	sbci	r31, 0xFE	; 254
    6ef0:	80 81       	ld	r24, Z
    6ef2:	84 30       	cpi	r24, 0x04	; 4
    6ef4:	09 f0       	breq	.+2      	; 0x6ef8 <TIMER_u8CounterStop+0x28>
    6ef6:	b5 c0       	rjmp	.+362    	; 0x7062 <TIMER_u8CounterStop+0x192>
		// Clear timer data
		Timer_base[copy_u8TimerID].TIMER_OVF = TIMER_BOTTOM;
    6ef8:	89 81       	ldd	r24, Y+1	; 0x01
    6efa:	88 2f       	mov	r24, r24
    6efc:	90 e0       	ldi	r25, 0x00	; 0
    6efe:	88 0f       	add	r24, r24
    6f00:	99 1f       	adc	r25, r25
    6f02:	88 0f       	add	r24, r24
    6f04:	99 1f       	adc	r25, r25
    6f06:	88 0f       	add	r24, r24
    6f08:	99 1f       	adc	r25, r25
    6f0a:	fc 01       	movw	r30, r24
    6f0c:	e0 56       	subi	r30, 0x60	; 96
    6f0e:	fe 4f       	sbci	r31, 0xFE	; 254
    6f10:	11 82       	std	Z+1, r1	; 0x01
    6f12:	10 82       	st	Z, r1
		Timer_base[copy_u8TimerID].TIMER_RestTime = TIMER_BOTTOM;
    6f14:	89 81       	ldd	r24, Y+1	; 0x01
    6f16:	88 2f       	mov	r24, r24
    6f18:	90 e0       	ldi	r25, 0x00	; 0
    6f1a:	88 0f       	add	r24, r24
    6f1c:	99 1f       	adc	r25, r25
    6f1e:	88 0f       	add	r24, r24
    6f20:	99 1f       	adc	r25, r25
    6f22:	01 96       	adiw	r24, 0x01	; 1
    6f24:	88 0f       	add	r24, r24
    6f26:	99 1f       	adc	r25, r25
    6f28:	fc 01       	movw	r30, r24
    6f2a:	e0 56       	subi	r30, 0x60	; 96
    6f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    6f2e:	11 82       	std	Z+1, r1	; 0x01
    6f30:	10 82       	st	Z, r1
		Timer_base[copy_u8TimerID].TIMER_Preload = TIMER_BOTTOM;
    6f32:	89 81       	ldd	r24, Y+1	; 0x01
    6f34:	88 2f       	mov	r24, r24
    6f36:	90 e0       	ldi	r25, 0x00	; 0
    6f38:	88 0f       	add	r24, r24
    6f3a:	99 1f       	adc	r25, r25
    6f3c:	01 96       	adiw	r24, 0x01	; 1
    6f3e:	88 0f       	add	r24, r24
    6f40:	99 1f       	adc	r25, r25
    6f42:	88 0f       	add	r24, r24
    6f44:	99 1f       	adc	r25, r25
    6f46:	fc 01       	movw	r30, r24
    6f48:	e0 56       	subi	r30, 0x60	; 96
    6f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    6f4c:	11 82       	std	Z+1, r1	; 0x01
    6f4e:	10 82       	st	Z, r1
		Timer_base[copy_u8TimerID].ptr_callback_t = NULL;
    6f50:	89 81       	ldd	r24, Y+1	; 0x01
    6f52:	88 2f       	mov	r24, r24
    6f54:	90 e0       	ldi	r25, 0x00	; 0
    6f56:	88 0f       	add	r24, r24
    6f58:	99 1f       	adc	r25, r25
    6f5a:	88 0f       	add	r24, r24
    6f5c:	99 1f       	adc	r25, r25
    6f5e:	88 0f       	add	r24, r24
    6f60:	99 1f       	adc	r25, r25
    6f62:	fc 01       	movw	r30, r24
    6f64:	ea 55       	subi	r30, 0x5A	; 90
    6f66:	fe 4f       	sbci	r31, 0xFE	; 254
    6f68:	11 82       	std	Z+1, r1	; 0x01
    6f6a:	10 82       	st	Z, r1
		if(copy_u8TimerID == TIMER0ID){
    6f6c:	89 81       	ldd	r24, Y+1	; 0x01
    6f6e:	88 23       	and	r24, r24
    6f70:	c1 f5       	brne	.+112    	; 0x6fe2 <TIMER_u8CounterStop+0x112>
			// Reset timer configurations
			TIMER0_TCCR = TIMER_TCCR_Reset;
    6f72:	e3 e5       	ldi	r30, 0x53	; 83
    6f74:	f0 e0       	ldi	r31, 0x00	; 0
    6f76:	10 82       	st	Z, r1
			// Clear the occupation flag
			Timerx_occupation_flag[copy_u8TimerID] = TIMER_Counter;
    6f78:	89 81       	ldd	r24, Y+1	; 0x01
    6f7a:	88 2f       	mov	r24, r24
    6f7c:	90 e0       	ldi	r25, 0x00	; 0
    6f7e:	fc 01       	movw	r30, r24
    6f80:	e1 57       	subi	r30, 0x71	; 113
    6f82:	fe 4f       	sbci	r31, 0xFE	; 254
    6f84:	84 e0       	ldi	r24, 0x04	; 4
    6f86:	80 83       	st	Z, r24
			// Add the rest value to the counter variable
			*(Counter_ptr[copy_u8TimerID]) += TIMER0_TCNT;
    6f88:	89 81       	ldd	r24, Y+1	; 0x01
    6f8a:	88 2f       	mov	r24, r24
    6f8c:	90 e0       	ldi	r25, 0x00	; 0
    6f8e:	88 0f       	add	r24, r24
    6f90:	99 1f       	adc	r25, r25
    6f92:	fc 01       	movw	r30, r24
    6f94:	e0 55       	subi	r30, 0x50	; 80
    6f96:	fe 4f       	sbci	r31, 0xFE	; 254
    6f98:	60 81       	ld	r22, Z
    6f9a:	71 81       	ldd	r23, Z+1	; 0x01
    6f9c:	89 81       	ldd	r24, Y+1	; 0x01
    6f9e:	88 2f       	mov	r24, r24
    6fa0:	90 e0       	ldi	r25, 0x00	; 0
    6fa2:	88 0f       	add	r24, r24
    6fa4:	99 1f       	adc	r25, r25
    6fa6:	fc 01       	movw	r30, r24
    6fa8:	e0 55       	subi	r30, 0x50	; 80
    6faa:	fe 4f       	sbci	r31, 0xFE	; 254
    6fac:	01 90       	ld	r0, Z+
    6fae:	f0 81       	ld	r31, Z
    6fb0:	e0 2d       	mov	r30, r0
    6fb2:	20 81       	ld	r18, Z
    6fb4:	31 81       	ldd	r19, Z+1	; 0x01
    6fb6:	42 81       	ldd	r20, Z+2	; 0x02
    6fb8:	53 81       	ldd	r21, Z+3	; 0x03
    6fba:	e2 e5       	ldi	r30, 0x52	; 82
    6fbc:	f0 e0       	ldi	r31, 0x00	; 0
    6fbe:	80 81       	ld	r24, Z
    6fc0:	88 2f       	mov	r24, r24
    6fc2:	90 e0       	ldi	r25, 0x00	; 0
    6fc4:	a0 e0       	ldi	r26, 0x00	; 0
    6fc6:	b0 e0       	ldi	r27, 0x00	; 0
    6fc8:	82 0f       	add	r24, r18
    6fca:	93 1f       	adc	r25, r19
    6fcc:	a4 1f       	adc	r26, r20
    6fce:	b5 1f       	adc	r27, r21
    6fd0:	fb 01       	movw	r30, r22
    6fd2:	80 83       	st	Z, r24
    6fd4:	91 83       	std	Z+1, r25	; 0x01
    6fd6:	a2 83       	std	Z+2, r26	; 0x02
    6fd8:	b3 83       	std	Z+3, r27	; 0x03
			// Clear the timer
			TIMER0_TCNT = TIMER_BOTTOM;
    6fda:	e2 e5       	ldi	r30, 0x52	; 82
    6fdc:	f0 e0       	ldi	r31, 0x00	; 0
    6fde:	10 82       	st	Z, r1
    6fe0:	3a c0       	rjmp	.+116    	; 0x7056 <TIMER_u8CounterStop+0x186>
		}
		else if(copy_u8TimerID == TIMER1ID){
    6fe2:	89 81       	ldd	r24, Y+1	; 0x01
    6fe4:	82 30       	cpi	r24, 0x02	; 2
    6fe6:	b9 f1       	breq	.+110    	; 0x7056 <TIMER_u8CounterStop+0x186>

		}
		else{
			// Reset timer configurations
			TIMER2_TCCR = TIMER_TCCR_Reset;
    6fe8:	e5 e4       	ldi	r30, 0x45	; 69
    6fea:	f0 e0       	ldi	r31, 0x00	; 0
    6fec:	10 82       	st	Z, r1
			// Clear the occupation flag
			Timerx_occupation_flag[copy_u8TimerID] = TIMER_Counter;
    6fee:	89 81       	ldd	r24, Y+1	; 0x01
    6ff0:	88 2f       	mov	r24, r24
    6ff2:	90 e0       	ldi	r25, 0x00	; 0
    6ff4:	fc 01       	movw	r30, r24
    6ff6:	e1 57       	subi	r30, 0x71	; 113
    6ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    6ffa:	84 e0       	ldi	r24, 0x04	; 4
    6ffc:	80 83       	st	Z, r24
			// Add the rest value to the counter variable
			*(Counter_ptr[copy_u8TimerID]) += TIMER2_TCNT;
    6ffe:	89 81       	ldd	r24, Y+1	; 0x01
    7000:	88 2f       	mov	r24, r24
    7002:	90 e0       	ldi	r25, 0x00	; 0
    7004:	88 0f       	add	r24, r24
    7006:	99 1f       	adc	r25, r25
    7008:	fc 01       	movw	r30, r24
    700a:	e0 55       	subi	r30, 0x50	; 80
    700c:	fe 4f       	sbci	r31, 0xFE	; 254
    700e:	60 81       	ld	r22, Z
    7010:	71 81       	ldd	r23, Z+1	; 0x01
    7012:	89 81       	ldd	r24, Y+1	; 0x01
    7014:	88 2f       	mov	r24, r24
    7016:	90 e0       	ldi	r25, 0x00	; 0
    7018:	88 0f       	add	r24, r24
    701a:	99 1f       	adc	r25, r25
    701c:	fc 01       	movw	r30, r24
    701e:	e0 55       	subi	r30, 0x50	; 80
    7020:	fe 4f       	sbci	r31, 0xFE	; 254
    7022:	01 90       	ld	r0, Z+
    7024:	f0 81       	ld	r31, Z
    7026:	e0 2d       	mov	r30, r0
    7028:	20 81       	ld	r18, Z
    702a:	31 81       	ldd	r19, Z+1	; 0x01
    702c:	42 81       	ldd	r20, Z+2	; 0x02
    702e:	53 81       	ldd	r21, Z+3	; 0x03
    7030:	e4 e4       	ldi	r30, 0x44	; 68
    7032:	f0 e0       	ldi	r31, 0x00	; 0
    7034:	80 81       	ld	r24, Z
    7036:	88 2f       	mov	r24, r24
    7038:	90 e0       	ldi	r25, 0x00	; 0
    703a:	a0 e0       	ldi	r26, 0x00	; 0
    703c:	b0 e0       	ldi	r27, 0x00	; 0
    703e:	82 0f       	add	r24, r18
    7040:	93 1f       	adc	r25, r19
    7042:	a4 1f       	adc	r26, r20
    7044:	b5 1f       	adc	r27, r21
    7046:	fb 01       	movw	r30, r22
    7048:	80 83       	st	Z, r24
    704a:	91 83       	std	Z+1, r25	; 0x01
    704c:	a2 83       	std	Z+2, r26	; 0x02
    704e:	b3 83       	std	Z+3, r27	; 0x03
			// Clear the timer
			TIMER2_TCNT = TIMER_BOTTOM;
    7050:	e4 e4       	ldi	r30, 0x44	; 68
    7052:	f0 e0       	ldi	r31, 0x00	; 0
    7054:	10 82       	st	Z, r1
		}
		TIMERx_vClear(copy_u8TimerID);
    7056:	89 81       	ldd	r24, Y+1	; 0x01
    7058:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <TIMERx_vClear>
		return 1;
    705c:	f1 e0       	ldi	r31, 0x01	; 1
    705e:	fa 83       	std	Y+2, r31	; 0x02
    7060:	01 c0       	rjmp	.+2      	; 0x7064 <TIMER_u8CounterStop+0x194>
	}
	else{
		return 0;
    7062:	1a 82       	std	Y+2, r1	; 0x02
    7064:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    7066:	0f 90       	pop	r0
    7068:	0f 90       	pop	r0
    706a:	cf 91       	pop	r28
    706c:	df 91       	pop	r29
    706e:	08 95       	ret

00007070 <TIMER_vCounter_callback>:

void TIMER_vCounter_callback(u8 copy_u8TimerID){
    7070:	df 93       	push	r29
    7072:	cf 93       	push	r28
    7074:	0f 92       	push	r0
    7076:	cd b7       	in	r28, 0x3d	; 61
    7078:	de b7       	in	r29, 0x3e	; 62
    707a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	if(copy_u8TimerID <= TIMER1ID){
    707c:	89 81       	ldd	r24, Y+1	; 0x01
    707e:	83 30       	cpi	r24, 0x03	; 3
    7080:	28 f5       	brcc	.+74     	; 0x70cc <TIMER_vCounter_callback+0x5c>
		// Check which timer called the function
		if(copy_u8TimerID == TIMER1ID){
    7082:	89 81       	ldd	r24, Y+1	; 0x01
    7084:	82 30       	cpi	r24, 0x02	; 2
    7086:	11 f1       	breq	.+68     	; 0x70cc <TIMER_vCounter_callback+0x5c>
			// Add the OVF value to the counter variable

		}
		else{
			// Add the OVF value to the counter variable
			*(Counter_ptr[copy_u8TimerID]) += TIMER_MAX;
    7088:	89 81       	ldd	r24, Y+1	; 0x01
    708a:	88 2f       	mov	r24, r24
    708c:	90 e0       	ldi	r25, 0x00	; 0
    708e:	88 0f       	add	r24, r24
    7090:	99 1f       	adc	r25, r25
    7092:	fc 01       	movw	r30, r24
    7094:	e0 55       	subi	r30, 0x50	; 80
    7096:	fe 4f       	sbci	r31, 0xFE	; 254
    7098:	20 81       	ld	r18, Z
    709a:	31 81       	ldd	r19, Z+1	; 0x01
    709c:	89 81       	ldd	r24, Y+1	; 0x01
    709e:	88 2f       	mov	r24, r24
    70a0:	90 e0       	ldi	r25, 0x00	; 0
    70a2:	88 0f       	add	r24, r24
    70a4:	99 1f       	adc	r25, r25
    70a6:	fc 01       	movw	r30, r24
    70a8:	e0 55       	subi	r30, 0x50	; 80
    70aa:	fe 4f       	sbci	r31, 0xFE	; 254
    70ac:	01 90       	ld	r0, Z+
    70ae:	f0 81       	ld	r31, Z
    70b0:	e0 2d       	mov	r30, r0
    70b2:	80 81       	ld	r24, Z
    70b4:	91 81       	ldd	r25, Z+1	; 0x01
    70b6:	a2 81       	ldd	r26, Z+2	; 0x02
    70b8:	b3 81       	ldd	r27, Z+3	; 0x03
    70ba:	81 50       	subi	r24, 0x01	; 1
    70bc:	9f 4f       	sbci	r25, 0xFF	; 255
    70be:	af 4f       	sbci	r26, 0xFF	; 255
    70c0:	bf 4f       	sbci	r27, 0xFF	; 255
    70c2:	f9 01       	movw	r30, r18
    70c4:	80 83       	st	Z, r24
    70c6:	91 83       	std	Z+1, r25	; 0x01
    70c8:	a2 83       	std	Z+2, r26	; 0x02
    70ca:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
}
    70cc:	0f 90       	pop	r0
    70ce:	cf 91       	pop	r28
    70d0:	df 91       	pop	r29
    70d2:	08 95       	ret

000070d4 <TIMER_u8FastPWM>:

/* PWM functions Implementation */
u8 TIMER_u8FastPWM(u8 copy_u8TimerID, u8 copy_u8Prescaler, u8 copy_u8DutyCycle){
    70d4:	df 93       	push	r29
    70d6:	cf 93       	push	r28
    70d8:	00 d0       	rcall	.+0      	; 0x70da <TIMER_u8FastPWM+0x6>
    70da:	00 d0       	rcall	.+0      	; 0x70dc <TIMER_u8FastPWM+0x8>
    70dc:	cd b7       	in	r28, 0x3d	; 61
    70de:	de b7       	in	r29, 0x3e	; 62
    70e0:	89 83       	std	Y+1, r24	; 0x01
    70e2:	6a 83       	std	Y+2, r22	; 0x02
    70e4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 *
	 */
	if((copy_u8TimerID <= TIMER1ID) && (copy_u8Prescaler <= TIMER2_1024PRE) && (Timerx_occupation_flag[copy_u8TimerID] == TIMER_Clear)){
    70e6:	89 81       	ldd	r24, Y+1	; 0x01
    70e8:	83 30       	cpi	r24, 0x03	; 3
    70ea:	78 f4       	brcc	.+30     	; 0x710a <TIMER_u8FastPWM+0x36>
    70ec:	8a 81       	ldd	r24, Y+2	; 0x02
    70ee:	88 30       	cpi	r24, 0x08	; 8
    70f0:	60 f4       	brcc	.+24     	; 0x710a <TIMER_u8FastPWM+0x36>
    70f2:	89 81       	ldd	r24, Y+1	; 0x01
    70f4:	88 2f       	mov	r24, r24
    70f6:	90 e0       	ldi	r25, 0x00	; 0
    70f8:	fc 01       	movw	r30, r24
    70fa:	e1 57       	subi	r30, 0x71	; 113
    70fc:	fe 4f       	sbci	r31, 0xFE	; 254
    70fe:	80 81       	ld	r24, Z
    7100:	81 30       	cpi	r24, 0x01	; 1
    7102:	19 f4       	brne	.+6      	; 0x710a <TIMER_u8FastPWM+0x36>
		return 1;
    7104:	81 e0       	ldi	r24, 0x01	; 1
    7106:	8c 83       	std	Y+4, r24	; 0x04
    7108:	01 c0       	rjmp	.+2      	; 0x710c <TIMER_u8FastPWM+0x38>
	}
	else{
		return 0;
    710a:	1c 82       	std	Y+4, r1	; 0x04
    710c:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    710e:	0f 90       	pop	r0
    7110:	0f 90       	pop	r0
    7112:	0f 90       	pop	r0
    7114:	0f 90       	pop	r0
    7116:	cf 91       	pop	r28
    7118:	df 91       	pop	r29
    711a:	08 95       	ret

0000711c <TIMER_u8PhaseCorrectPWM>:

u8 TIMER_u8PhaseCorrectPWM(u8 copy_u8TimerID, u8 copy_u8Prescaler, u8 copy_u8DutyCycle){
    711c:	df 93       	push	r29
    711e:	cf 93       	push	r28
    7120:	00 d0       	rcall	.+0      	; 0x7122 <TIMER_u8PhaseCorrectPWM+0x6>
    7122:	0f 92       	push	r0
    7124:	cd b7       	in	r28, 0x3d	; 61
    7126:	de b7       	in	r29, 0x3e	; 62
    7128:	89 83       	std	Y+1, r24	; 0x01
    712a:	6a 83       	std	Y+2, r22	; 0x02
    712c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 *
	 */

	return 0;
    712e:	80 e0       	ldi	r24, 0x00	; 0
}
    7130:	0f 90       	pop	r0
    7132:	0f 90       	pop	r0
    7134:	0f 90       	pop	r0
    7136:	cf 91       	pop	r28
    7138:	df 91       	pop	r29
    713a:	08 95       	ret

0000713c <TIMER_u8StopPWM>:
u8 TIMER_u8PinJoinPWM(u8 copy_u8TimerID, u8 copy_u8PortNumber, u8 copy_u8PinNumber){
	return 0;
}
*/

u8 TIMER_u8StopPWM(u8 copy_u8TimerID){
    713c:	df 93       	push	r29
    713e:	cf 93       	push	r28
    7140:	00 d0       	rcall	.+0      	; 0x7142 <TIMER_u8StopPWM+0x6>
    7142:	cd b7       	in	r28, 0x3d	; 61
    7144:	de b7       	in	r29, 0x3e	; 62
    7146:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	if((copy_u8TimerID <= TIMER2ID) && (Timerx_occupation_flag[copy_u8TimerID] == TIMER_PWM)){
    7148:	89 81       	ldd	r24, Y+1	; 0x01
    714a:	82 30       	cpi	r24, 0x02	; 2
    714c:	68 f5       	brcc	.+90     	; 0x71a8 <TIMER_u8StopPWM+0x6c>
    714e:	89 81       	ldd	r24, Y+1	; 0x01
    7150:	88 2f       	mov	r24, r24
    7152:	90 e0       	ldi	r25, 0x00	; 0
    7154:	fc 01       	movw	r30, r24
    7156:	e1 57       	subi	r30, 0x71	; 113
    7158:	fe 4f       	sbci	r31, 0xFE	; 254
    715a:	80 81       	ld	r24, Z
    715c:	85 30       	cpi	r24, 0x05	; 5
    715e:	21 f5       	brne	.+72     	; 0x71a8 <TIMER_u8StopPWM+0x6c>
		// Clear occupation flag
		Timerx_occupation_flag[copy_u8TimerID] = TIMER_Clear;
    7160:	89 81       	ldd	r24, Y+1	; 0x01
    7162:	88 2f       	mov	r24, r24
    7164:	90 e0       	ldi	r25, 0x00	; 0
    7166:	fc 01       	movw	r30, r24
    7168:	e1 57       	subi	r30, 0x71	; 113
    716a:	fe 4f       	sbci	r31, 0xFE	; 254
    716c:	81 e0       	ldi	r24, 0x01	; 1
    716e:	80 83       	st	Z, r24
		if(copy_u8TimerID == TIMER0ID){
    7170:	89 81       	ldd	r24, Y+1	; 0x01
    7172:	88 23       	and	r24, r24
    7174:	51 f4       	brne	.+20     	; 0x718a <TIMER_u8StopPWM+0x4e>
			// Clear timer config
			TIMER0_TCCR = TIMER_TCCR_Reset;
    7176:	e3 e5       	ldi	r30, 0x53	; 83
    7178:	f0 e0       	ldi	r31, 0x00	; 0
    717a:	10 82       	st	Z, r1
			// Clear counter
			TIMER0_TCNT = TIMER_BOTTOM;
    717c:	e2 e5       	ldi	r30, 0x52	; 82
    717e:	f0 e0       	ldi	r31, 0x00	; 0
    7180:	10 82       	st	Z, r1
			// Set the OCR value
			TIMER0_OCR = TIMER_BOTTOM;
    7182:	ec e5       	ldi	r30, 0x5C	; 92
    7184:	f0 e0       	ldi	r31, 0x00	; 0
    7186:	10 82       	st	Z, r1
    7188:	0c c0       	rjmp	.+24     	; 0x71a2 <TIMER_u8StopPWM+0x66>
		}
		else if(copy_u8TimerID == TIMER1ID){
    718a:	89 81       	ldd	r24, Y+1	; 0x01
    718c:	82 30       	cpi	r24, 0x02	; 2
    718e:	49 f0       	breq	.+18     	; 0x71a2 <TIMER_u8StopPWM+0x66>

		}
		else{
			// Clear timer config
			TIMER2_TCCR = TIMER_TCCR_Reset;
    7190:	e5 e4       	ldi	r30, 0x45	; 69
    7192:	f0 e0       	ldi	r31, 0x00	; 0
    7194:	10 82       	st	Z, r1
			// Clear counter
			TIMER2_TCNT = TIMER_BOTTOM;
    7196:	e4 e4       	ldi	r30, 0x44	; 68
    7198:	f0 e0       	ldi	r31, 0x00	; 0
    719a:	10 82       	st	Z, r1
			// Set the OCR value
			TIMER2_OCR = TIMER_BOTTOM;
    719c:	e3 e4       	ldi	r30, 0x43	; 67
    719e:	f0 e0       	ldi	r31, 0x00	; 0
    71a0:	10 82       	st	Z, r1
		}
		return 1;
    71a2:	81 e0       	ldi	r24, 0x01	; 1
    71a4:	8a 83       	std	Y+2, r24	; 0x02
    71a6:	01 c0       	rjmp	.+2      	; 0x71aa <TIMER_u8StopPWM+0x6e>
	}
	else{
		return 0;
    71a8:	1a 82       	std	Y+2, r1	; 0x02
    71aa:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    71ac:	0f 90       	pop	r0
    71ae:	0f 90       	pop	r0
    71b0:	cf 91       	pop	r28
    71b2:	df 91       	pop	r29
    71b4:	08 95       	ret

000071b6 <TIMER_vPWM_callback>:

void TIMER_vPWM_callback(u8 copy_u8TimerID){
    71b6:	df 93       	push	r29
    71b8:	cf 93       	push	r28
    71ba:	0f 92       	push	r0
    71bc:	cd b7       	in	r28, 0x3d	; 61
    71be:	de b7       	in	r29, 0x3e	; 62
    71c0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */

}
    71c2:	0f 90       	pop	r0
    71c4:	cf 91       	pop	r28
    71c6:	df 91       	pop	r29
    71c8:	08 95       	ret

000071ca <TIMER_u8StartICU>:

/* Timer ISR Implementation */
u8 TIMER_u8StartICU(u8 copy_u8Prescaler, f64* Ptr_f64Ton, f64* Ptr_f64Toff){
    71ca:	df 93       	push	r29
    71cc:	cf 93       	push	r28
    71ce:	00 d0       	rcall	.+0      	; 0x71d0 <TIMER_u8StartICU+0x6>
    71d0:	00 d0       	rcall	.+0      	; 0x71d2 <TIMER_u8StartICU+0x8>
    71d2:	0f 92       	push	r0
    71d4:	cd b7       	in	r28, 0x3d	; 61
    71d6:	de b7       	in	r29, 0x3e	; 62
    71d8:	89 83       	std	Y+1, r24	; 0x01
    71da:	7b 83       	std	Y+3, r23	; 0x03
    71dc:	6a 83       	std	Y+2, r22	; 0x02
    71de:	5d 83       	std	Y+5, r21	; 0x05
    71e0:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 *
	 */
	return 0;
    71e2:	80 e0       	ldi	r24, 0x00	; 0
}
    71e4:	0f 90       	pop	r0
    71e6:	0f 90       	pop	r0
    71e8:	0f 90       	pop	r0
    71ea:	0f 90       	pop	r0
    71ec:	0f 90       	pop	r0
    71ee:	cf 91       	pop	r28
    71f0:	df 91       	pop	r29
    71f2:	08 95       	ret

000071f4 <TIMER_u8StopICU>:

u8 TIMER_u8StopICU(void ){
    71f4:	df 93       	push	r29
    71f6:	cf 93       	push	r28
    71f8:	cd b7       	in	r28, 0x3d	; 61
    71fa:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	return 0;
    71fc:	80 e0       	ldi	r24, 0x00	; 0
}
    71fe:	cf 91       	pop	r28
    7200:	df 91       	pop	r29
    7202:	08 95       	ret

00007204 <TIMER_vICU_callback>:

void TIMER_vICU_callback(void ){
    7204:	df 93       	push	r29
    7206:	cf 93       	push	r28
    7208:	cd b7       	in	r28, 0x3d	; 61
    720a:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */

}
    720c:	cf 91       	pop	r28
    720e:	df 91       	pop	r29
    7210:	08 95       	ret

00007212 <__vector_11>:

// ISR of Timer/Counter0 Overflow
void __vector_11(void){
    7212:	1f 92       	push	r1
    7214:	0f 92       	push	r0
    7216:	0f b6       	in	r0, 0x3f	; 63
    7218:	0f 92       	push	r0
    721a:	11 24       	eor	r1, r1
    721c:	2f 93       	push	r18
    721e:	3f 93       	push	r19
    7220:	4f 93       	push	r20
    7222:	5f 93       	push	r21
    7224:	6f 93       	push	r22
    7226:	7f 93       	push	r23
    7228:	8f 93       	push	r24
    722a:	9f 93       	push	r25
    722c:	af 93       	push	r26
    722e:	bf 93       	push	r27
    7230:	ef 93       	push	r30
    7232:	ff 93       	push	r31
    7234:	df 93       	push	r29
    7236:	cf 93       	push	r28
    7238:	00 d0       	rcall	.+0      	; 0x723a <__vector_11+0x28>
    723a:	cd b7       	in	r28, 0x3d	; 61
    723c:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	switch(Timerx_occupation_flag[TIMER0ID]){
    723e:	80 91 8f 01 	lds	r24, 0x018F
    7242:	28 2f       	mov	r18, r24
    7244:	30 e0       	ldi	r19, 0x00	; 0
    7246:	3a 83       	std	Y+2, r19	; 0x02
    7248:	29 83       	std	Y+1, r18	; 0x01
    724a:	89 81       	ldd	r24, Y+1	; 0x01
    724c:	9a 81       	ldd	r25, Y+2	; 0x02
    724e:	83 30       	cpi	r24, 0x03	; 3
    7250:	91 05       	cpc	r25, r1
    7252:	41 f1       	breq	.+80     	; 0x72a4 <__vector_11+0x92>
    7254:	29 81       	ldd	r18, Y+1	; 0x01
    7256:	3a 81       	ldd	r19, Y+2	; 0x02
    7258:	24 30       	cpi	r18, 0x04	; 4
    725a:	31 05       	cpc	r19, r1
    725c:	5c f4       	brge	.+22     	; 0x7274 <__vector_11+0x62>
    725e:	89 81       	ldd	r24, Y+1	; 0x01
    7260:	9a 81       	ldd	r25, Y+2	; 0x02
    7262:	81 30       	cpi	r24, 0x01	; 1
    7264:	91 05       	cpc	r25, r1
    7266:	b1 f0       	breq	.+44     	; 0x7294 <__vector_11+0x82>
    7268:	29 81       	ldd	r18, Y+1	; 0x01
    726a:	3a 81       	ldd	r19, Y+2	; 0x02
    726c:	22 30       	cpi	r18, 0x02	; 2
    726e:	31 05       	cpc	r19, r1
    7270:	a9 f0       	breq	.+42     	; 0x729c <__vector_11+0x8a>
    7272:	27 c0       	rjmp	.+78     	; 0x72c2 <__vector_11+0xb0>
    7274:	89 81       	ldd	r24, Y+1	; 0x01
    7276:	9a 81       	ldd	r25, Y+2	; 0x02
    7278:	85 30       	cpi	r24, 0x05	; 5
    727a:	91 05       	cpc	r25, r1
    727c:	d9 f0       	breq	.+54     	; 0x72b4 <__vector_11+0xa2>
    727e:	29 81       	ldd	r18, Y+1	; 0x01
    7280:	3a 81       	ldd	r19, Y+2	; 0x02
    7282:	25 30       	cpi	r18, 0x05	; 5
    7284:	31 05       	cpc	r19, r1
    7286:	94 f0       	brlt	.+36     	; 0x72ac <__vector_11+0x9a>
    7288:	89 81       	ldd	r24, Y+1	; 0x01
    728a:	9a 81       	ldd	r25, Y+2	; 0x02
    728c:	86 30       	cpi	r24, 0x06	; 6
    728e:	91 05       	cpc	r25, r1
    7290:	a9 f0       	breq	.+42     	; 0x72bc <__vector_11+0xaa>
    7292:	17 c0       	rjmp	.+46     	; 0x72c2 <__vector_11+0xb0>
		case TIMER_Clear:
			TIMERx_vClear(TIMER0ID);
    7294:	80 e0       	ldi	r24, 0x00	; 0
    7296:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <TIMERx_vClear>
    729a:	13 c0       	rjmp	.+38     	; 0x72c2 <__vector_11+0xb0>
			break;
		case TIMER_Delay_mS:
			TIMER_vDelay_Callback(TIMER0ID);
    729c:	80 e0       	ldi	r24, 0x00	; 0
    729e:	0e 94 67 32 	call	0x64ce	; 0x64ce <TIMER_vDelay_Callback>
    72a2:	0f c0       	rjmp	.+30     	; 0x72c2 <__vector_11+0xb0>
			break;
		case TIMER_Delay_uS:
			TIMER_vDelay_Callback(TIMER0ID);
    72a4:	80 e0       	ldi	r24, 0x00	; 0
    72a6:	0e 94 67 32 	call	0x64ce	; 0x64ce <TIMER_vDelay_Callback>
    72aa:	0b c0       	rjmp	.+22     	; 0x72c2 <__vector_11+0xb0>
			break;
		case TIMER_Counter:
			TIMER_vCounter_callback(TIMER0ID);
    72ac:	80 e0       	ldi	r24, 0x00	; 0
    72ae:	0e 94 38 38 	call	0x7070	; 0x7070 <TIMER_vCounter_callback>
    72b2:	07 c0       	rjmp	.+14     	; 0x72c2 <__vector_11+0xb0>
			break;
		case TIMER_PWM:
			TIMER_vPWM_callback(TIMER0ID);
    72b4:	80 e0       	ldi	r24, 0x00	; 0
    72b6:	0e 94 db 38 	call	0x71b6	; 0x71b6 <TIMER_vPWM_callback>
    72ba:	03 c0       	rjmp	.+6      	; 0x72c2 <__vector_11+0xb0>
			break;
		case TIMER_Ptask:
			TIMER_vPtask_Callback(TIMER0ID);
    72bc:	80 e0       	ldi	r24, 0x00	; 0
    72be:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <TIMER_vPtask_Callback>
			break;
		default:
			break;
	}
}
    72c2:	0f 90       	pop	r0
    72c4:	0f 90       	pop	r0
    72c6:	cf 91       	pop	r28
    72c8:	df 91       	pop	r29
    72ca:	ff 91       	pop	r31
    72cc:	ef 91       	pop	r30
    72ce:	bf 91       	pop	r27
    72d0:	af 91       	pop	r26
    72d2:	9f 91       	pop	r25
    72d4:	8f 91       	pop	r24
    72d6:	7f 91       	pop	r23
    72d8:	6f 91       	pop	r22
    72da:	5f 91       	pop	r21
    72dc:	4f 91       	pop	r20
    72de:	3f 91       	pop	r19
    72e0:	2f 91       	pop	r18
    72e2:	0f 90       	pop	r0
    72e4:	0f be       	out	0x3f, r0	; 63
    72e6:	0f 90       	pop	r0
    72e8:	1f 90       	pop	r1
    72ea:	18 95       	reti

000072ec <__vector_9>:

// ISR of Timer/Counter1 Overflow
void __vector_9(void){
    72ec:	1f 92       	push	r1
    72ee:	0f 92       	push	r0
    72f0:	0f b6       	in	r0, 0x3f	; 63
    72f2:	0f 92       	push	r0
    72f4:	11 24       	eor	r1, r1
    72f6:	2f 93       	push	r18
    72f8:	3f 93       	push	r19
    72fa:	4f 93       	push	r20
    72fc:	5f 93       	push	r21
    72fe:	6f 93       	push	r22
    7300:	7f 93       	push	r23
    7302:	8f 93       	push	r24
    7304:	9f 93       	push	r25
    7306:	af 93       	push	r26
    7308:	bf 93       	push	r27
    730a:	ef 93       	push	r30
    730c:	ff 93       	push	r31
    730e:	df 93       	push	r29
    7310:	cf 93       	push	r28
    7312:	00 d0       	rcall	.+0      	; 0x7314 <__vector_9+0x28>
    7314:	cd b7       	in	r28, 0x3d	; 61
    7316:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	switch(Timerx_occupation_flag[TIMER1ID]){
    7318:	80 91 91 01 	lds	r24, 0x0191
    731c:	28 2f       	mov	r18, r24
    731e:	30 e0       	ldi	r19, 0x00	; 0
    7320:	3a 83       	std	Y+2, r19	; 0x02
    7322:	29 83       	std	Y+1, r18	; 0x01
    7324:	89 81       	ldd	r24, Y+1	; 0x01
    7326:	9a 81       	ldd	r25, Y+2	; 0x02
    7328:	83 30       	cpi	r24, 0x03	; 3
    732a:	91 05       	cpc	r25, r1
    732c:	41 f1       	breq	.+80     	; 0x737e <__vector_9+0x92>
    732e:	29 81       	ldd	r18, Y+1	; 0x01
    7330:	3a 81       	ldd	r19, Y+2	; 0x02
    7332:	24 30       	cpi	r18, 0x04	; 4
    7334:	31 05       	cpc	r19, r1
    7336:	5c f4       	brge	.+22     	; 0x734e <__vector_9+0x62>
    7338:	89 81       	ldd	r24, Y+1	; 0x01
    733a:	9a 81       	ldd	r25, Y+2	; 0x02
    733c:	81 30       	cpi	r24, 0x01	; 1
    733e:	91 05       	cpc	r25, r1
    7340:	b1 f0       	breq	.+44     	; 0x736e <__vector_9+0x82>
    7342:	29 81       	ldd	r18, Y+1	; 0x01
    7344:	3a 81       	ldd	r19, Y+2	; 0x02
    7346:	22 30       	cpi	r18, 0x02	; 2
    7348:	31 05       	cpc	r19, r1
    734a:	a9 f0       	breq	.+42     	; 0x7376 <__vector_9+0x8a>
    734c:	27 c0       	rjmp	.+78     	; 0x739c <__vector_9+0xb0>
    734e:	89 81       	ldd	r24, Y+1	; 0x01
    7350:	9a 81       	ldd	r25, Y+2	; 0x02
    7352:	85 30       	cpi	r24, 0x05	; 5
    7354:	91 05       	cpc	r25, r1
    7356:	d9 f0       	breq	.+54     	; 0x738e <__vector_9+0xa2>
    7358:	29 81       	ldd	r18, Y+1	; 0x01
    735a:	3a 81       	ldd	r19, Y+2	; 0x02
    735c:	25 30       	cpi	r18, 0x05	; 5
    735e:	31 05       	cpc	r19, r1
    7360:	94 f0       	brlt	.+36     	; 0x7386 <__vector_9+0x9a>
    7362:	89 81       	ldd	r24, Y+1	; 0x01
    7364:	9a 81       	ldd	r25, Y+2	; 0x02
    7366:	86 30       	cpi	r24, 0x06	; 6
    7368:	91 05       	cpc	r25, r1
    736a:	a9 f0       	breq	.+42     	; 0x7396 <__vector_9+0xaa>
    736c:	17 c0       	rjmp	.+46     	; 0x739c <__vector_9+0xb0>
		case TIMER_Clear:
			TIMERx_vClear(TIMER1ID);
    736e:	82 e0       	ldi	r24, 0x02	; 2
    7370:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <TIMERx_vClear>
    7374:	13 c0       	rjmp	.+38     	; 0x739c <__vector_9+0xb0>
			break;
		case TIMER_Delay_mS:
			TIMER_vDelay_Callback(TIMER1ID);
    7376:	82 e0       	ldi	r24, 0x02	; 2
    7378:	0e 94 67 32 	call	0x64ce	; 0x64ce <TIMER_vDelay_Callback>
    737c:	0f c0       	rjmp	.+30     	; 0x739c <__vector_9+0xb0>
			break;
		case TIMER_Delay_uS:
			TIMER_vDelay_Callback(TIMER1ID);
    737e:	82 e0       	ldi	r24, 0x02	; 2
    7380:	0e 94 67 32 	call	0x64ce	; 0x64ce <TIMER_vDelay_Callback>
    7384:	0b c0       	rjmp	.+22     	; 0x739c <__vector_9+0xb0>
			break;
		case TIMER_Counter:
			TIMER_vCounter_callback(TIMER1ID);
    7386:	82 e0       	ldi	r24, 0x02	; 2
    7388:	0e 94 38 38 	call	0x7070	; 0x7070 <TIMER_vCounter_callback>
    738c:	07 c0       	rjmp	.+14     	; 0x739c <__vector_9+0xb0>
			break;
		case TIMER_PWM:
			TIMER_vPWM_callback(TIMER1ID);
    738e:	82 e0       	ldi	r24, 0x02	; 2
    7390:	0e 94 db 38 	call	0x71b6	; 0x71b6 <TIMER_vPWM_callback>
    7394:	03 c0       	rjmp	.+6      	; 0x739c <__vector_9+0xb0>
			break;
		case TIMER_Ptask:
			TIMER_vPtask_Callback(TIMER1ID);
    7396:	82 e0       	ldi	r24, 0x02	; 2
    7398:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <TIMER_vPtask_Callback>
			break;
		default:
			break;
	}
}
    739c:	0f 90       	pop	r0
    739e:	0f 90       	pop	r0
    73a0:	cf 91       	pop	r28
    73a2:	df 91       	pop	r29
    73a4:	ff 91       	pop	r31
    73a6:	ef 91       	pop	r30
    73a8:	bf 91       	pop	r27
    73aa:	af 91       	pop	r26
    73ac:	9f 91       	pop	r25
    73ae:	8f 91       	pop	r24
    73b0:	7f 91       	pop	r23
    73b2:	6f 91       	pop	r22
    73b4:	5f 91       	pop	r21
    73b6:	4f 91       	pop	r20
    73b8:	3f 91       	pop	r19
    73ba:	2f 91       	pop	r18
    73bc:	0f 90       	pop	r0
    73be:	0f be       	out	0x3f, r0	; 63
    73c0:	0f 90       	pop	r0
    73c2:	1f 90       	pop	r1
    73c4:	18 95       	reti

000073c6 <__vector_6>:

// ISR of Timer/Counter1 Input capture unit
void __vector_6(void){
    73c6:	1f 92       	push	r1
    73c8:	0f 92       	push	r0
    73ca:	0f b6       	in	r0, 0x3f	; 63
    73cc:	0f 92       	push	r0
    73ce:	11 24       	eor	r1, r1
    73d0:	df 93       	push	r29
    73d2:	cf 93       	push	r28
    73d4:	cd b7       	in	r28, 0x3d	; 61
    73d6:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */

}
    73d8:	cf 91       	pop	r28
    73da:	df 91       	pop	r29
    73dc:	0f 90       	pop	r0
    73de:	0f be       	out	0x3f, r0	; 63
    73e0:	0f 90       	pop	r0
    73e2:	1f 90       	pop	r1
    73e4:	18 95       	reti

000073e6 <__vector_5>:

// ISR of Timer/Counter2 Overflow
void __vector_5(void){
    73e6:	1f 92       	push	r1
    73e8:	0f 92       	push	r0
    73ea:	0f b6       	in	r0, 0x3f	; 63
    73ec:	0f 92       	push	r0
    73ee:	11 24       	eor	r1, r1
    73f0:	2f 93       	push	r18
    73f2:	3f 93       	push	r19
    73f4:	4f 93       	push	r20
    73f6:	5f 93       	push	r21
    73f8:	6f 93       	push	r22
    73fa:	7f 93       	push	r23
    73fc:	8f 93       	push	r24
    73fe:	9f 93       	push	r25
    7400:	af 93       	push	r26
    7402:	bf 93       	push	r27
    7404:	ef 93       	push	r30
    7406:	ff 93       	push	r31
    7408:	df 93       	push	r29
    740a:	cf 93       	push	r28
    740c:	00 d0       	rcall	.+0      	; 0x740e <__vector_5+0x28>
    740e:	cd b7       	in	r28, 0x3d	; 61
    7410:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	switch(Timerx_occupation_flag[TIMER2ID]){
    7412:	80 91 90 01 	lds	r24, 0x0190
    7416:	28 2f       	mov	r18, r24
    7418:	30 e0       	ldi	r19, 0x00	; 0
    741a:	3a 83       	std	Y+2, r19	; 0x02
    741c:	29 83       	std	Y+1, r18	; 0x01
    741e:	89 81       	ldd	r24, Y+1	; 0x01
    7420:	9a 81       	ldd	r25, Y+2	; 0x02
    7422:	83 30       	cpi	r24, 0x03	; 3
    7424:	91 05       	cpc	r25, r1
    7426:	41 f1       	breq	.+80     	; 0x7478 <__vector_5+0x92>
    7428:	29 81       	ldd	r18, Y+1	; 0x01
    742a:	3a 81       	ldd	r19, Y+2	; 0x02
    742c:	24 30       	cpi	r18, 0x04	; 4
    742e:	31 05       	cpc	r19, r1
    7430:	5c f4       	brge	.+22     	; 0x7448 <__vector_5+0x62>
    7432:	89 81       	ldd	r24, Y+1	; 0x01
    7434:	9a 81       	ldd	r25, Y+2	; 0x02
    7436:	81 30       	cpi	r24, 0x01	; 1
    7438:	91 05       	cpc	r25, r1
    743a:	b1 f0       	breq	.+44     	; 0x7468 <__vector_5+0x82>
    743c:	29 81       	ldd	r18, Y+1	; 0x01
    743e:	3a 81       	ldd	r19, Y+2	; 0x02
    7440:	22 30       	cpi	r18, 0x02	; 2
    7442:	31 05       	cpc	r19, r1
    7444:	a9 f0       	breq	.+42     	; 0x7470 <__vector_5+0x8a>
    7446:	27 c0       	rjmp	.+78     	; 0x7496 <__vector_5+0xb0>
    7448:	89 81       	ldd	r24, Y+1	; 0x01
    744a:	9a 81       	ldd	r25, Y+2	; 0x02
    744c:	85 30       	cpi	r24, 0x05	; 5
    744e:	91 05       	cpc	r25, r1
    7450:	d9 f0       	breq	.+54     	; 0x7488 <__vector_5+0xa2>
    7452:	29 81       	ldd	r18, Y+1	; 0x01
    7454:	3a 81       	ldd	r19, Y+2	; 0x02
    7456:	25 30       	cpi	r18, 0x05	; 5
    7458:	31 05       	cpc	r19, r1
    745a:	94 f0       	brlt	.+36     	; 0x7480 <__vector_5+0x9a>
    745c:	89 81       	ldd	r24, Y+1	; 0x01
    745e:	9a 81       	ldd	r25, Y+2	; 0x02
    7460:	86 30       	cpi	r24, 0x06	; 6
    7462:	91 05       	cpc	r25, r1
    7464:	a9 f0       	breq	.+42     	; 0x7490 <__vector_5+0xaa>
    7466:	17 c0       	rjmp	.+46     	; 0x7496 <__vector_5+0xb0>
		case TIMER_Clear:
			TIMERx_vClear(TIMER2ID);
    7468:	81 e0       	ldi	r24, 0x01	; 1
    746a:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <TIMERx_vClear>
    746e:	13 c0       	rjmp	.+38     	; 0x7496 <__vector_5+0xb0>
			break;
		case TIMER_Delay_mS:
			TIMER_vDelay_Callback(TIMER2ID);
    7470:	81 e0       	ldi	r24, 0x01	; 1
    7472:	0e 94 67 32 	call	0x64ce	; 0x64ce <TIMER_vDelay_Callback>
    7476:	0f c0       	rjmp	.+30     	; 0x7496 <__vector_5+0xb0>
			break;
		case TIMER_Delay_uS:
			TIMER_vDelay_Callback(TIMER2ID);
    7478:	81 e0       	ldi	r24, 0x01	; 1
    747a:	0e 94 67 32 	call	0x64ce	; 0x64ce <TIMER_vDelay_Callback>
    747e:	0b c0       	rjmp	.+22     	; 0x7496 <__vector_5+0xb0>
			break;
		case TIMER_Counter:
			TIMER_vCounter_callback(TIMER2ID);
    7480:	81 e0       	ldi	r24, 0x01	; 1
    7482:	0e 94 38 38 	call	0x7070	; 0x7070 <TIMER_vCounter_callback>
    7486:	07 c0       	rjmp	.+14     	; 0x7496 <__vector_5+0xb0>
			break;
		case TIMER_PWM:
			TIMER_vPWM_callback(TIMER2ID);
    7488:	81 e0       	ldi	r24, 0x01	; 1
    748a:	0e 94 db 38 	call	0x71b6	; 0x71b6 <TIMER_vPWM_callback>
    748e:	03 c0       	rjmp	.+6      	; 0x7496 <__vector_5+0xb0>
			break;
		case TIMER_Ptask:
			TIMER_vPtask_Callback(TIMER2ID);
    7490:	81 e0       	ldi	r24, 0x01	; 1
    7492:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <TIMER_vPtask_Callback>
			break;
		default:
			break;
	}
}
    7496:	0f 90       	pop	r0
    7498:	0f 90       	pop	r0
    749a:	cf 91       	pop	r28
    749c:	df 91       	pop	r29
    749e:	ff 91       	pop	r31
    74a0:	ef 91       	pop	r30
    74a2:	bf 91       	pop	r27
    74a4:	af 91       	pop	r26
    74a6:	9f 91       	pop	r25
    74a8:	8f 91       	pop	r24
    74aa:	7f 91       	pop	r23
    74ac:	6f 91       	pop	r22
    74ae:	5f 91       	pop	r21
    74b0:	4f 91       	pop	r20
    74b2:	3f 91       	pop	r19
    74b4:	2f 91       	pop	r18
    74b6:	0f 90       	pop	r0
    74b8:	0f be       	out	0x3f, r0	; 63
    74ba:	0f 90       	pop	r0
    74bc:	1f 90       	pop	r1
    74be:	18 95       	reti

000074c0 <UART_void_init>:
static void (*UART_Rx_callback)(u8 ) = NULL;


/******************************************************************************/
/* Functions implementation section */
void UART_void_init(void ){
    74c0:	df 93       	push	r29
    74c2:	cf 93       	push	r28
    74c4:	cd b7       	in	r28, 0x3d	; 61
    74c6:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	// Set the buad rate
	UART_UBRRH = UART_UBRRH_val;
    74c8:	e0 e4       	ldi	r30, 0x40	; 64
    74ca:	f0 e0       	ldi	r31, 0x00	; 0
    74cc:	10 82       	st	Z, r1
	UART_UBRRL = UART_UBRRL_val;
    74ce:	e9 e2       	ldi	r30, 0x29	; 41
    74d0:	f0 e0       	ldi	r31, 0x00	; 0
    74d2:	83 e3       	ldi	r24, 0x33	; 51
    74d4:	80 83       	st	Z, r24


	// Configure the control and status regester
	UART_UCSRB = ((UART_enable << UART_UCSRB_RXCIE) | (UART_enable << UART_UCSRB_TXCIE) | (UART_disable << UART_UCSRB_UDRIE) | (UART_enable << UART_UCSRB_RXEN) | (UART_enable << UART_UCSRB_TXEN) | (UART_disable << UART_UCSRB_UCSZ2) | (UART_disable));
    74d6:	ea e2       	ldi	r30, 0x2A	; 42
    74d8:	f0 e0       	ldi	r31, 0x00	; 0
    74da:	88 ed       	ldi	r24, 0xD8	; 216
    74dc:	80 83       	st	Z, r24
	UART_UCSRC = (UART_UCSRC_mask | (UART_disable << UART_UCSRC_UMSEL) | (UART_parity_mode << UART_UCSRC_UPM) | (UART_disable << UART_UCSRC_USBS) | (UART_UCSZ_val << UART_UCSRC_UCSZ) | (UART_disable << UART_UCSRC_UCPOL));
    74de:	e0 e4       	ldi	r30, 0x40	; 64
    74e0:	f0 e0       	ldi	r31, 0x00	; 0
    74e2:	86 e8       	ldi	r24, 0x86	; 134
    74e4:	80 83       	st	Z, r24

	// Enable global interrupt
	set_bit(UART_SREG, UART_global_int);
    74e6:	af e5       	ldi	r26, 0x5F	; 95
    74e8:	b0 e0       	ldi	r27, 0x00	; 0
    74ea:	ef e5       	ldi	r30, 0x5F	; 95
    74ec:	f0 e0       	ldi	r31, 0x00	; 0
    74ee:	80 81       	ld	r24, Z
    74f0:	80 68       	ori	r24, 0x80	; 128
    74f2:	8c 93       	st	X, r24
}
    74f4:	cf 91       	pop	r28
    74f6:	df 91       	pop	r29
    74f8:	08 95       	ret

000074fa <UART_u8_if_available>:

u8 UART_u8_if_available(void ){
    74fa:	df 93       	push	r29
    74fc:	cf 93       	push	r28
    74fe:	cd b7       	in	r28, 0x3d	; 61
    7500:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	return get_bit(UART_UCSRA, UART_UCSRA_UDRE);
    7502:	eb e2       	ldi	r30, 0x2B	; 43
    7504:	f0 e0       	ldi	r31, 0x00	; 0
    7506:	80 81       	ld	r24, Z
    7508:	82 95       	swap	r24
    750a:	86 95       	lsr	r24
    750c:	87 70       	andi	r24, 0x07	; 7
    750e:	81 70       	andi	r24, 0x01	; 1
}
    7510:	cf 91       	pop	r28
    7512:	df 91       	pop	r29
    7514:	08 95       	ret

00007516 <UART_void_transmit_char>:

void UART_void_transmit_char(u8 copy_data_byte){
    7516:	df 93       	push	r29
    7518:	cf 93       	push	r28
    751a:	0f 92       	push	r0
    751c:	cd b7       	in	r28, 0x3d	; 61
    751e:	de b7       	in	r29, 0x3e	; 62
    7520:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	while(UART_u8_if_available() == 0);
    7522:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <UART_u8_if_available>
    7526:	88 23       	and	r24, r24
    7528:	e1 f3       	breq	.-8      	; 0x7522 <UART_void_transmit_char+0xc>
	UART_UDR = copy_data_byte;
    752a:	ec e2       	ldi	r30, 0x2C	; 44
    752c:	f0 e0       	ldi	r31, 0x00	; 0
    752e:	89 81       	ldd	r24, Y+1	; 0x01
    7530:	80 83       	st	Z, r24
}
    7532:	0f 90       	pop	r0
    7534:	cf 91       	pop	r28
    7536:	df 91       	pop	r29
    7538:	08 95       	ret

0000753a <UART_void_transmit_str>:

void UART_void_transmit_str(u8* copy_ptr_str){
    753a:	df 93       	push	r29
    753c:	cf 93       	push	r28
    753e:	00 d0       	rcall	.+0      	; 0x7540 <UART_void_transmit_str+0x6>
    7540:	cd b7       	in	r28, 0x3d	; 61
    7542:	de b7       	in	r29, 0x3e	; 62
    7544:	9a 83       	std	Y+2, r25	; 0x02
    7546:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	static u8 str_index = 0;
	if(*(copy_ptr_str + str_index) == '\0'){
    7548:	80 91 b8 01 	lds	r24, 0x01B8
    754c:	28 2f       	mov	r18, r24
    754e:	30 e0       	ldi	r19, 0x00	; 0
    7550:	89 81       	ldd	r24, Y+1	; 0x01
    7552:	9a 81       	ldd	r25, Y+2	; 0x02
    7554:	fc 01       	movw	r30, r24
    7556:	e2 0f       	add	r30, r18
    7558:	f3 1f       	adc	r31, r19
    755a:	80 81       	ld	r24, Z
    755c:	88 23       	and	r24, r24
    755e:	39 f4       	brne	.+14     	; 0x756e <UART_void_transmit_str+0x34>
		str_index = 0;
    7560:	10 92 b8 01 	sts	0x01B8, r1
		UART_copy_ptr_str= NULL;
    7564:	10 92 b5 01 	sts	0x01B5, r1
    7568:	10 92 b4 01 	sts	0x01B4, r1
    756c:	1b c0       	rjmp	.+54     	; 0x75a4 <UART_void_transmit_str+0x6a>
	}
	else{
		if(str_index == 0){
    756e:	80 91 b8 01 	lds	r24, 0x01B8
    7572:	88 23       	and	r24, r24
    7574:	31 f4       	brne	.+12     	; 0x7582 <UART_void_transmit_str+0x48>
			UART_copy_ptr_str = copy_ptr_str;
    7576:	89 81       	ldd	r24, Y+1	; 0x01
    7578:	9a 81       	ldd	r25, Y+2	; 0x02
    757a:	90 93 b5 01 	sts	0x01B5, r25
    757e:	80 93 b4 01 	sts	0x01B4, r24
		}
		UART_void_transmit_char(*(copy_ptr_str + str_index));
    7582:	80 91 b8 01 	lds	r24, 0x01B8
    7586:	28 2f       	mov	r18, r24
    7588:	30 e0       	ldi	r19, 0x00	; 0
    758a:	89 81       	ldd	r24, Y+1	; 0x01
    758c:	9a 81       	ldd	r25, Y+2	; 0x02
    758e:	fc 01       	movw	r30, r24
    7590:	e2 0f       	add	r30, r18
    7592:	f3 1f       	adc	r31, r19
    7594:	80 81       	ld	r24, Z
    7596:	0e 94 8b 3a 	call	0x7516	; 0x7516 <UART_void_transmit_char>
			str_index++;
    759a:	80 91 b8 01 	lds	r24, 0x01B8
    759e:	8f 5f       	subi	r24, 0xFF	; 255
    75a0:	80 93 b8 01 	sts	0x01B8, r24
	}
}
    75a4:	0f 90       	pop	r0
    75a6:	0f 90       	pop	r0
    75a8:	cf 91       	pop	r28
    75aa:	df 91       	pop	r29
    75ac:	08 95       	ret

000075ae <UART_void_set_Rx_callback>:

void UART_void_set_Rx_callback(void (*copy_ptr_callback)(u8 )){
    75ae:	df 93       	push	r29
    75b0:	cf 93       	push	r28
    75b2:	00 d0       	rcall	.+0      	; 0x75b4 <UART_void_set_Rx_callback+0x6>
    75b4:	cd b7       	in	r28, 0x3d	; 61
    75b6:	de b7       	in	r29, 0x3e	; 62
    75b8:	9a 83       	std	Y+2, r25	; 0x02
    75ba:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	UART_Rx_callback = copy_ptr_callback;
    75bc:	89 81       	ldd	r24, Y+1	; 0x01
    75be:	9a 81       	ldd	r25, Y+2	; 0x02
    75c0:	90 93 b7 01 	sts	0x01B7, r25
    75c4:	80 93 b6 01 	sts	0x01B6, r24
}
    75c8:	0f 90       	pop	r0
    75ca:	0f 90       	pop	r0
    75cc:	cf 91       	pop	r28
    75ce:	df 91       	pop	r29
    75d0:	08 95       	ret

000075d2 <__vector_13>:

// UART, Rx complete
void __vector_13(void){
    75d2:	1f 92       	push	r1
    75d4:	0f 92       	push	r0
    75d6:	0f b6       	in	r0, 0x3f	; 63
    75d8:	0f 92       	push	r0
    75da:	11 24       	eor	r1, r1
    75dc:	2f 93       	push	r18
    75de:	3f 93       	push	r19
    75e0:	4f 93       	push	r20
    75e2:	5f 93       	push	r21
    75e4:	6f 93       	push	r22
    75e6:	7f 93       	push	r23
    75e8:	8f 93       	push	r24
    75ea:	9f 93       	push	r25
    75ec:	af 93       	push	r26
    75ee:	bf 93       	push	r27
    75f0:	ef 93       	push	r30
    75f2:	ff 93       	push	r31
    75f4:	df 93       	push	r29
    75f6:	cf 93       	push	r28
    75f8:	cd b7       	in	r28, 0x3d	; 61
    75fa:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(UART_Rx_callback != NULL){
    75fc:	80 91 b6 01 	lds	r24, 0x01B6
    7600:	90 91 b7 01 	lds	r25, 0x01B7
    7604:	00 97       	sbiw	r24, 0x00	; 0
    7606:	41 f0       	breq	.+16     	; 0x7618 <__vector_13+0x46>
		UART_Rx_callback(UART_UDR);
    7608:	e0 91 b6 01 	lds	r30, 0x01B6
    760c:	f0 91 b7 01 	lds	r31, 0x01B7
    7610:	ac e2       	ldi	r26, 0x2C	; 44
    7612:	b0 e0       	ldi	r27, 0x00	; 0
    7614:	8c 91       	ld	r24, X
    7616:	09 95       	icall
	}
}
    7618:	cf 91       	pop	r28
    761a:	df 91       	pop	r29
    761c:	ff 91       	pop	r31
    761e:	ef 91       	pop	r30
    7620:	bf 91       	pop	r27
    7622:	af 91       	pop	r26
    7624:	9f 91       	pop	r25
    7626:	8f 91       	pop	r24
    7628:	7f 91       	pop	r23
    762a:	6f 91       	pop	r22
    762c:	5f 91       	pop	r21
    762e:	4f 91       	pop	r20
    7630:	3f 91       	pop	r19
    7632:	2f 91       	pop	r18
    7634:	0f 90       	pop	r0
    7636:	0f be       	out	0x3f, r0	; 63
    7638:	0f 90       	pop	r0
    763a:	1f 90       	pop	r1
    763c:	18 95       	reti

0000763e <__vector_14>:

// USART Data Register Empty
void __vector_14(void){
    763e:	1f 92       	push	r1
    7640:	0f 92       	push	r0
    7642:	0f b6       	in	r0, 0x3f	; 63
    7644:	0f 92       	push	r0
    7646:	11 24       	eor	r1, r1
    7648:	df 93       	push	r29
    764a:	cf 93       	push	r28
    764c:	cd b7       	in	r28, 0x3d	; 61
    764e:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */

}
    7650:	cf 91       	pop	r28
    7652:	df 91       	pop	r29
    7654:	0f 90       	pop	r0
    7656:	0f be       	out	0x3f, r0	; 63
    7658:	0f 90       	pop	r0
    765a:	1f 90       	pop	r1
    765c:	18 95       	reti

0000765e <__vector_15>:

// UART, Tx complete
void __vector_15(void){
    765e:	1f 92       	push	r1
    7660:	0f 92       	push	r0
    7662:	0f b6       	in	r0, 0x3f	; 63
    7664:	0f 92       	push	r0
    7666:	11 24       	eor	r1, r1
    7668:	2f 93       	push	r18
    766a:	3f 93       	push	r19
    766c:	4f 93       	push	r20
    766e:	5f 93       	push	r21
    7670:	6f 93       	push	r22
    7672:	7f 93       	push	r23
    7674:	8f 93       	push	r24
    7676:	9f 93       	push	r25
    7678:	af 93       	push	r26
    767a:	bf 93       	push	r27
    767c:	ef 93       	push	r30
    767e:	ff 93       	push	r31
    7680:	df 93       	push	r29
    7682:	cf 93       	push	r28
    7684:	cd b7       	in	r28, 0x3d	; 61
    7686:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	UART_void_transmit_str(UART_copy_ptr_str);
    7688:	80 91 b4 01 	lds	r24, 0x01B4
    768c:	90 91 b5 01 	lds	r25, 0x01B5
    7690:	0e 94 9d 3a 	call	0x753a	; 0x753a <UART_void_transmit_str>
}
    7694:	cf 91       	pop	r28
    7696:	df 91       	pop	r29
    7698:	ff 91       	pop	r31
    769a:	ef 91       	pop	r30
    769c:	bf 91       	pop	r27
    769e:	af 91       	pop	r26
    76a0:	9f 91       	pop	r25
    76a2:	8f 91       	pop	r24
    76a4:	7f 91       	pop	r23
    76a6:	6f 91       	pop	r22
    76a8:	5f 91       	pop	r21
    76aa:	4f 91       	pop	r20
    76ac:	3f 91       	pop	r19
    76ae:	2f 91       	pop	r18
    76b0:	0f 90       	pop	r0
    76b2:	0f be       	out	0x3f, r0	; 63
    76b4:	0f 90       	pop	r0
    76b6:	1f 90       	pop	r1
    76b8:	18 95       	reti

000076ba <main>:

ADC_config_struct ADC_Config = { ADC_THROTTLE_CH, ADC_PRESCALER, ADC_DISABLE, ADC_DISABLE, ADC_DISABLE };

/* Main function */
int main( void )
{
    76ba:	df 93       	push	r29
    76bc:	cf 93       	push	r28
    76be:	cd b7       	in	r28, 0x3d	; 61
    76c0:	de b7       	in	r29, 0x3e	; 62
    76c2:	27 97       	sbiw	r28, 0x07	; 7
    76c4:	0f b6       	in	r0, 0x3f	; 63
    76c6:	f8 94       	cli
    76c8:	de bf       	out	0x3e, r29	; 62
    76ca:	0f be       	out	0x3f, r0	; 63
    76cc:	cd bf       	out	0x3d, r28	; 61
	/* Create local version of every thing */
	u16 Local_u16ThrottleValue = 0;
    76ce:	1c 82       	std	Y+4, r1	; 0x04
    76d0:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16SteeringAnalogValue = 0;
    76d2:	1e 82       	std	Y+6, r1	; 0x06
    76d4:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8DriveMode = DRIVEMODE_N;
    76d6:	8e e4       	ldi	r24, 0x4E	; 78
    76d8:	8f 83       	std	Y+7, r24	; 0x07

	u8 Local_u8ThrottlePercent = 0;
    76da:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8SteeringPercent = 0;
    76dc:	19 82       	std	Y+1, r1	; 0x01

	/* Init Peripherals */
	// Initiating the ADC
	ADC_void_init();
    76de:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_void_init>
	// Initiating the DIO pins
	DIO_void_set_pin_in_pullUP(DIO_D0_PORT,  DIO_D0_PIN );
    76e2:	81 e0       	ldi	r24, 0x01	; 1
    76e4:	63 e0       	ldi	r22, 0x03	; 3
    76e6:	0e 94 4e 09 	call	0x129c	; 0x129c <DIO_void_set_pin_in_pullUP>
	DIO_void_set_pin_in_pullUP(DIO_D1_PORT,  DIO_D1_PIN );
    76ea:	81 e0       	ldi	r24, 0x01	; 1
    76ec:	64 e0       	ldi	r22, 0x04	; 4
    76ee:	0e 94 4e 09 	call	0x129c	; 0x129c <DIO_void_set_pin_in_pullUP>
	DIO_void_set_pin_in_pullUP(DIO_BR_PORT,  DIO_BR_PIN );
    76f2:	83 e0       	ldi	r24, 0x03	; 3
    76f4:	62 e0       	ldi	r22, 0x02	; 2
    76f6:	0e 94 4e 09 	call	0x129c	; 0x129c <DIO_void_set_pin_in_pullUP>
	DIO_void_set_pin_in_pullUP(DIO_ACC_PORT, DIO_ACC_PIN);
    76fa:	83 e0       	ldi	r24, 0x03	; 3
    76fc:	63 e0       	ldi	r22, 0x03	; 3
    76fe:	0e 94 4e 09 	call	0x129c	; 0x129c <DIO_void_set_pin_in_pullUP>
	// Initiating the EXTI

	// Initiating the UART

	// Initiating the LCD
	LCD_init();
    7702:	0e 94 00 27 	call	0x4e00	; 0x4e00 <LCD_init>
	LCD_write_str("TH: ");
    7706:	80 e6       	ldi	r24, 0x60	; 96
    7708:	90 e0       	ldi	r25, 0x00	; 0
    770a:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <LCD_write_str>
	LCD_set_cursor(1, 0);
    770e:	81 e0       	ldi	r24, 0x01	; 1
    7710:	60 e0       	ldi	r22, 0x00	; 0
    7712:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <LCD_set_cursor>
	LCD_write_str("ST: ");
    7716:	85 e6       	ldi	r24, 0x65	; 101
    7718:	90 e0       	ldi	r25, 0x00	; 0
    771a:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <LCD_write_str>
	LCD_set_cursor(2, 0);
    771e:	82 e0       	ldi	r24, 0x02	; 2
    7720:	60 e0       	ldi	r22, 0x00	; 0
    7722:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <LCD_set_cursor>
	LCD_write_str("DM: ");
    7726:	8a e6       	ldi	r24, 0x6A	; 106
    7728:	90 e0       	ldi	r25, 0x00	; 0
    772a:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <LCD_write_str>

	/* Super loop */
	while( 1 )
	{
		vReadThrottle( &Local_u16ThrottleValue );
    772e:	ce 01       	movw	r24, r28
    7730:	03 96       	adiw	r24, 0x03	; 3
    7732:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <vReadThrottle>
		vReadSteering( &Local_u16SteeringAnalogValue );
    7736:	ce 01       	movw	r24, r28
    7738:	05 96       	adiw	r24, 0x05	; 5
    773a:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <vReadSteering>
		vReadDriveMode( &Local_u8DriveMode );
    773e:	ce 01       	movw	r24, r28
    7740:	07 96       	adiw	r24, 0x07	; 7
    7742:	0e 94 19 3c 	call	0x7832	; 0x7832 <vReadDriveMode>

		if( Local_u16ThrottleValue != Global_u16ThrottleValue )
    7746:	80 91 b9 01 	lds	r24, 0x01B9
    774a:	28 2f       	mov	r18, r24
    774c:	30 e0       	ldi	r19, 0x00	; 0
    774e:	8b 81       	ldd	r24, Y+3	; 0x03
    7750:	9c 81       	ldd	r25, Y+4	; 0x04
    7752:	28 17       	cp	r18, r24
    7754:	39 07       	cpc	r19, r25
    7756:	91 f0       	breq	.+36     	; 0x777c <main+0xc2>
		{
			Global_u16ThrottleValue = Local_u16ThrottleValue;
    7758:	8b 81       	ldd	r24, Y+3	; 0x03
    775a:	9c 81       	ldd	r25, Y+4	; 0x04
    775c:	80 93 b9 01 	sts	0x01B9, r24
			Local_u8ThrottlePercent = Global_u16ThrottleValue/MAX_ADC;
    7760:	80 91 b9 01 	lds	r24, 0x01B9
    7764:	88 2f       	mov	r24, r24
    7766:	90 e0       	ldi	r25, 0x00	; 0
    7768:	2f ef       	ldi	r18, 0xFF	; 255
    776a:	33 e0       	ldi	r19, 0x03	; 3
    776c:	b9 01       	movw	r22, r18
    776e:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <__divmodhi4>
    7772:	cb 01       	movw	r24, r22
    7774:	8a 83       	std	Y+2, r24	; 0x02
			//vSendFrame( THROTTLEFRAME_ID , Local_u8ThrottlePercent );
			vUpdateScreen( THROTTLEFRAME_ID );
    7776:	80 e2       	ldi	r24, 0x20	; 32
    7778:	0e 94 83 3c 	call	0x7906	; 0x7906 <vUpdateScreen>
		}
		else
		{
			// Do nothing
		}
		if( Local_u16SteeringAnalogValue != Global_u16SteeringAnalogValue )
    777c:	80 91 ba 01 	lds	r24, 0x01BA
    7780:	28 2f       	mov	r18, r24
    7782:	30 e0       	ldi	r19, 0x00	; 0
    7784:	8d 81       	ldd	r24, Y+5	; 0x05
    7786:	9e 81       	ldd	r25, Y+6	; 0x06
    7788:	28 17       	cp	r18, r24
    778a:	39 07       	cpc	r19, r25
    778c:	91 f0       	breq	.+36     	; 0x77b2 <main+0xf8>
		{
			Global_u16SteeringAnalogValue = Local_u16SteeringAnalogValue;
    778e:	8d 81       	ldd	r24, Y+5	; 0x05
    7790:	9e 81       	ldd	r25, Y+6	; 0x06
    7792:	80 93 ba 01 	sts	0x01BA, r24
			Local_u8SteeringPercent = Global_u16SteeringAnalogValue/MAX_ADC;
    7796:	80 91 ba 01 	lds	r24, 0x01BA
    779a:	88 2f       	mov	r24, r24
    779c:	90 e0       	ldi	r25, 0x00	; 0
    779e:	2f ef       	ldi	r18, 0xFF	; 255
    77a0:	33 e0       	ldi	r19, 0x03	; 3
    77a2:	b9 01       	movw	r22, r18
    77a4:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <__divmodhi4>
    77a8:	cb 01       	movw	r24, r22
    77aa:	89 83       	std	Y+1, r24	; 0x01
			//vSendFrame( STEERINGFRAME_ID , Local_u8SteeringPercent );
			vUpdateScreen( STEERINGFRAME_ID );
    77ac:	84 e2       	ldi	r24, 0x24	; 36
    77ae:	0e 94 83 3c 	call	0x7906	; 0x7906 <vUpdateScreen>
		}
		else
		{
			// Do nothing
		}
		if( Local_u8DriveMode != Global_u8DriveMode )
    77b2:	9f 81       	ldd	r25, Y+7	; 0x07
    77b4:	80 91 92 01 	lds	r24, 0x0192
    77b8:	98 17       	cp	r25, r24
    77ba:	09 f4       	brne	.+2      	; 0x77be <main+0x104>
    77bc:	b8 cf       	rjmp	.-144    	; 0x772e <main+0x74>
		{
			Global_u8DriveMode = Local_u8DriveMode;
    77be:	8f 81       	ldd	r24, Y+7	; 0x07
    77c0:	80 93 92 01 	sts	0x0192, r24
			//vSendFrame( DRIVEMODEFRAME_ID , Local_u8DriveMode );
			vUpdateScreen( DRIVEMODEFRAME_ID );
    77c4:	88 e2       	ldi	r24, 0x28	; 40
    77c6:	0e 94 83 3c 	call	0x7906	; 0x7906 <vUpdateScreen>
    77ca:	b1 cf       	rjmp	.-158    	; 0x772e <main+0x74>

000077cc <vReadThrottle>:


/* Private functions implementation */
// Function that configure the ADC to read throttle value and return the reading in the local variable
void vReadThrottle( u16* ptr_u16ThrottleData )
{
    77cc:	df 93       	push	r29
    77ce:	cf 93       	push	r28
    77d0:	00 d0       	rcall	.+0      	; 0x77d2 <vReadThrottle+0x6>
    77d2:	cd b7       	in	r28, 0x3d	; 61
    77d4:	de b7       	in	r29, 0x3e	; 62
    77d6:	9a 83       	std	Y+2, r25	; 0x02
    77d8:	89 83       	std	Y+1, r24	; 0x01
	// Set throttle channel in the configurations
	ADC_Config.MUX = ADC_THROTTLE_CH;
    77da:	80 91 94 01 	lds	r24, 0x0194
    77de:	80 7e       	andi	r24, 0xE0	; 224
    77e0:	80 93 94 01 	sts	0x0194, r24
	// Configure the ADC to the new update
	ADC_void_config(&ADC_Config);
    77e4:	84 e9       	ldi	r24, 0x94	; 148
    77e6:	91 e0       	ldi	r25, 0x01	; 1
    77e8:	0e 94 98 07 	call	0xf30	; 0xf30 <ADC_void_config>
	// Read the Throttle value
	ADC_void_read_data(ptr_u16ThrottleData);
    77ec:	89 81       	ldd	r24, Y+1	; 0x01
    77ee:	9a 81       	ldd	r25, Y+2	; 0x02
    77f0:	0e 94 2a 08 	call	0x1054	; 0x1054 <ADC_void_read_data>
}
    77f4:	0f 90       	pop	r0
    77f6:	0f 90       	pop	r0
    77f8:	cf 91       	pop	r28
    77fa:	df 91       	pop	r29
    77fc:	08 95       	ret

000077fe <vReadSteering>:

// Function that configure the ADC to read steering value and return the reading in the local variable
void vReadSteering( u16* ptr_u16SteeringData )
{
    77fe:	df 93       	push	r29
    7800:	cf 93       	push	r28
    7802:	00 d0       	rcall	.+0      	; 0x7804 <vReadSteering+0x6>
    7804:	cd b7       	in	r28, 0x3d	; 61
    7806:	de b7       	in	r29, 0x3e	; 62
    7808:	9a 83       	std	Y+2, r25	; 0x02
    780a:	89 83       	std	Y+1, r24	; 0x01
	// Set steering channel in the configurations
	ADC_Config.MUX = ADC_STEERING_CH;
    780c:	80 91 94 01 	lds	r24, 0x0194
    7810:	80 7e       	andi	r24, 0xE0	; 224
    7812:	81 60       	ori	r24, 0x01	; 1
    7814:	80 93 94 01 	sts	0x0194, r24
	// Configure the ADC to the new update
	ADC_void_config(&ADC_Config);
    7818:	84 e9       	ldi	r24, 0x94	; 148
    781a:	91 e0       	ldi	r25, 0x01	; 1
    781c:	0e 94 98 07 	call	0xf30	; 0xf30 <ADC_void_config>
	// Read the steering value
	ADC_void_read_data(ptr_u16SteeringData);
    7820:	89 81       	ldd	r24, Y+1	; 0x01
    7822:	9a 81       	ldd	r25, Y+2	; 0x02
    7824:	0e 94 2a 08 	call	0x1054	; 0x1054 <ADC_void_read_data>
}
    7828:	0f 90       	pop	r0
    782a:	0f 90       	pop	r0
    782c:	cf 91       	pop	r28
    782e:	df 91       	pop	r29
    7830:	08 95       	ret

00007832 <vReadDriveMode>:

// Function to read the Drive mode buttons and return the change in the local variable
void vReadDriveMode( u8* ptr_u8DriveMode )
{
    7832:	df 93       	push	r29
    7834:	cf 93       	push	r28
    7836:	00 d0       	rcall	.+0      	; 0x7838 <vReadDriveMode+0x6>
    7838:	00 d0       	rcall	.+0      	; 0x783a <vReadDriveMode+0x8>
    783a:	00 d0       	rcall	.+0      	; 0x783c <vReadDriveMode+0xa>
    783c:	cd b7       	in	r28, 0x3d	; 61
    783e:	de b7       	in	r29, 0x3e	; 62
    7840:	9a 83       	std	Y+2, r25	; 0x02
    7842:	89 83       	std	Y+1, r24	; 0x01
	// Check if the D0 button is pressed
	if( DIO_u8_get_pin( DIO_D0_PORT, DIO_D0_PIN) == DIO_BUTTON_PRESSED )
    7844:	81 e0       	ldi	r24, 0x01	; 1
    7846:	63 e0       	ldi	r22, 0x03	; 3
    7848:	0e 94 6d 0b 	call	0x16da	; 0x16da <DIO_u8_get_pin>
    784c:	88 23       	and	r24, r24
    784e:	39 f5       	brne	.+78     	; 0x789e <vReadDriveMode+0x6c>
	{
		// Check which mode is the currently running
		switch(*ptr_u8DriveMode)
    7850:	e9 81       	ldd	r30, Y+1	; 0x01
    7852:	fa 81       	ldd	r31, Y+2	; 0x02
    7854:	80 81       	ld	r24, Z
    7856:	28 2f       	mov	r18, r24
    7858:	30 e0       	ldi	r19, 0x00	; 0
    785a:	3e 83       	std	Y+6, r19	; 0x06
    785c:	2d 83       	std	Y+5, r18	; 0x05
    785e:	8d 81       	ldd	r24, Y+5	; 0x05
    7860:	9e 81       	ldd	r25, Y+6	; 0x06
    7862:	8e 34       	cpi	r24, 0x4E	; 78
    7864:	91 05       	cpc	r25, r1
    7866:	61 f0       	breq	.+24     	; 0x7880 <vReadDriveMode+0x4e>
    7868:	2d 81       	ldd	r18, Y+5	; 0x05
    786a:	3e 81       	ldd	r19, Y+6	; 0x06
    786c:	22 35       	cpi	r18, 0x52	; 82
    786e:	31 05       	cpc	r19, r1
    7870:	09 f4       	brne	.+2      	; 0x7874 <vReadDriveMode+0x42>
    7872:	40 c0       	rjmp	.+128    	; 0x78f4 <vReadDriveMode+0xc2>
    7874:	8d 81       	ldd	r24, Y+5	; 0x05
    7876:	9e 81       	ldd	r25, Y+6	; 0x06
    7878:	84 34       	cpi	r24, 0x44	; 68
    787a:	91 05       	cpc	r25, r1
    787c:	31 f0       	breq	.+12     	; 0x788a <vReadDriveMode+0x58>
    787e:	0a c0       	rjmp	.+20     	; 0x7894 <vReadDriveMode+0x62>
		{
		case DRIVEMODE_N: // if the current mode is Neutral
			*ptr_u8DriveMode = DRIVEMODE_R;
    7880:	e9 81       	ldd	r30, Y+1	; 0x01
    7882:	fa 81       	ldd	r31, Y+2	; 0x02
    7884:	82 e5       	ldi	r24, 0x52	; 82
    7886:	80 83       	st	Z, r24
    7888:	35 c0       	rjmp	.+106    	; 0x78f4 <vReadDriveMode+0xc2>
			break;
		case DRIVEMODE_D: // if the current mode is Drive
			*ptr_u8DriveMode = DRIVEMODE_N;
    788a:	e9 81       	ldd	r30, Y+1	; 0x01
    788c:	fa 81       	ldd	r31, Y+2	; 0x02
    788e:	8e e4       	ldi	r24, 0x4E	; 78
    7890:	80 83       	st	Z, r24
    7892:	30 c0       	rjmp	.+96     	; 0x78f4 <vReadDriveMode+0xc2>
			break;
		case DRIVEMODE_R: // if the current mode is Reverse
			// Do nothing
			break;
		default: // if the current mode is fault value
			*ptr_u8DriveMode = DRIVEMODE_N;
    7894:	e9 81       	ldd	r30, Y+1	; 0x01
    7896:	fa 81       	ldd	r31, Y+2	; 0x02
    7898:	8e e4       	ldi	r24, 0x4E	; 78
    789a:	80 83       	st	Z, r24
    789c:	2b c0       	rjmp	.+86     	; 0x78f4 <vReadDriveMode+0xc2>
			break;
		}
	}
	// Check if the D1 button is pressed
	else if( DIO_u8_get_pin( DIO_D1_PORT, DIO_D1_PIN) == DIO_BUTTON_PRESSED )
    789e:	81 e0       	ldi	r24, 0x01	; 1
    78a0:	64 e0       	ldi	r22, 0x04	; 4
    78a2:	0e 94 6d 0b 	call	0x16da	; 0x16da <DIO_u8_get_pin>
    78a6:	88 23       	and	r24, r24
    78a8:	29 f5       	brne	.+74     	; 0x78f4 <vReadDriveMode+0xc2>
	{
		// Check which mode is the currently running
		switch(*ptr_u8DriveMode)
    78aa:	e9 81       	ldd	r30, Y+1	; 0x01
    78ac:	fa 81       	ldd	r31, Y+2	; 0x02
    78ae:	80 81       	ld	r24, Z
    78b0:	28 2f       	mov	r18, r24
    78b2:	30 e0       	ldi	r19, 0x00	; 0
    78b4:	3c 83       	std	Y+4, r19	; 0x04
    78b6:	2b 83       	std	Y+3, r18	; 0x03
    78b8:	8b 81       	ldd	r24, Y+3	; 0x03
    78ba:	9c 81       	ldd	r25, Y+4	; 0x04
    78bc:	8e 34       	cpi	r24, 0x4E	; 78
    78be:	91 05       	cpc	r25, r1
    78c0:	59 f0       	breq	.+22     	; 0x78d8 <vReadDriveMode+0xa6>
    78c2:	2b 81       	ldd	r18, Y+3	; 0x03
    78c4:	3c 81       	ldd	r19, Y+4	; 0x04
    78c6:	22 35       	cpi	r18, 0x52	; 82
    78c8:	31 05       	cpc	r19, r1
    78ca:	59 f0       	breq	.+22     	; 0x78e2 <vReadDriveMode+0xb0>
    78cc:	8b 81       	ldd	r24, Y+3	; 0x03
    78ce:	9c 81       	ldd	r25, Y+4	; 0x04
    78d0:	84 34       	cpi	r24, 0x44	; 68
    78d2:	91 05       	cpc	r25, r1
    78d4:	79 f0       	breq	.+30     	; 0x78f4 <vReadDriveMode+0xc2>
    78d6:	0a c0       	rjmp	.+20     	; 0x78ec <vReadDriveMode+0xba>
		{
		case DRIVEMODE_N: // if the current mode is Neutral
			*ptr_u8DriveMode = DRIVEMODE_D;
    78d8:	e9 81       	ldd	r30, Y+1	; 0x01
    78da:	fa 81       	ldd	r31, Y+2	; 0x02
    78dc:	84 e4       	ldi	r24, 0x44	; 68
    78de:	80 83       	st	Z, r24
    78e0:	09 c0       	rjmp	.+18     	; 0x78f4 <vReadDriveMode+0xc2>
			break;
		case DRIVEMODE_D: // if the current mode is Drive
			// Do nothing
			break;
		case DRIVEMODE_R: // if the current mode is Reverse
			*ptr_u8DriveMode = DRIVEMODE_N;
    78e2:	e9 81       	ldd	r30, Y+1	; 0x01
    78e4:	fa 81       	ldd	r31, Y+2	; 0x02
    78e6:	8e e4       	ldi	r24, 0x4E	; 78
    78e8:	80 83       	st	Z, r24
    78ea:	04 c0       	rjmp	.+8      	; 0x78f4 <vReadDriveMode+0xc2>
			break;
		default: // if the current mode is fault value
			*ptr_u8DriveMode = DRIVEMODE_N;
    78ec:	e9 81       	ldd	r30, Y+1	; 0x01
    78ee:	fa 81       	ldd	r31, Y+2	; 0x02
    78f0:	8e e4       	ldi	r24, 0x4E	; 78
    78f2:	80 83       	st	Z, r24
	// If nothing is pressed
	else
	{
		// Do nothing
	}
}
    78f4:	26 96       	adiw	r28, 0x06	; 6
    78f6:	0f b6       	in	r0, 0x3f	; 63
    78f8:	f8 94       	cli
    78fa:	de bf       	out	0x3e, r29	; 62
    78fc:	0f be       	out	0x3f, r0	; 63
    78fe:	cd bf       	out	0x3d, r28	; 61
    7900:	cf 91       	pop	r28
    7902:	df 91       	pop	r29
    7904:	08 95       	ret

00007906 <vUpdateScreen>:


void vUpdateScreen( u8 copy_u8FrameID )
{
    7906:	df 93       	push	r29
    7908:	cf 93       	push	r28
    790a:	00 d0       	rcall	.+0      	; 0x790c <vUpdateScreen+0x6>
    790c:	0f 92       	push	r0
    790e:	cd b7       	in	r28, 0x3d	; 61
    7910:	de b7       	in	r29, 0x3e	; 62
    7912:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8FrameID)
    7914:	89 81       	ldd	r24, Y+1	; 0x01
    7916:	28 2f       	mov	r18, r24
    7918:	30 e0       	ldi	r19, 0x00	; 0
    791a:	3b 83       	std	Y+3, r19	; 0x03
    791c:	2a 83       	std	Y+2, r18	; 0x02
    791e:	8a 81       	ldd	r24, Y+2	; 0x02
    7920:	9b 81       	ldd	r25, Y+3	; 0x03
    7922:	84 32       	cpi	r24, 0x24	; 36
    7924:	91 05       	cpc	r25, r1
    7926:	c9 f0       	breq	.+50     	; 0x795a <vUpdateScreen+0x54>
    7928:	2a 81       	ldd	r18, Y+2	; 0x02
    792a:	3b 81       	ldd	r19, Y+3	; 0x03
    792c:	28 32       	cpi	r18, 0x28	; 40
    792e:	31 05       	cpc	r19, r1
    7930:	19 f1       	breq	.+70     	; 0x7978 <vUpdateScreen+0x72>
    7932:	8a 81       	ldd	r24, Y+2	; 0x02
    7934:	9b 81       	ldd	r25, Y+3	; 0x03
    7936:	80 32       	cpi	r24, 0x20	; 32
    7938:	91 05       	cpc	r25, r1
    793a:	31 f5       	brne	.+76     	; 0x7988 <vUpdateScreen+0x82>
	{
	case THROTTLEFRAME_ID:
		LCD_set_cursor(0, 5);
    793c:	80 e0       	ldi	r24, 0x00	; 0
    793e:	65 e0       	ldi	r22, 0x05	; 5
    7940:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <LCD_set_cursor>
		LCD_write_s32_number(Global_u16ThrottleValue);
    7944:	80 91 b9 01 	lds	r24, 0x01B9
    7948:	88 2f       	mov	r24, r24
    794a:	90 e0       	ldi	r25, 0x00	; 0
    794c:	a0 e0       	ldi	r26, 0x00	; 0
    794e:	b0 e0       	ldi	r27, 0x00	; 0
    7950:	bc 01       	movw	r22, r24
    7952:	cd 01       	movw	r24, r26
    7954:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <LCD_write_s32_number>
    7958:	17 c0       	rjmp	.+46     	; 0x7988 <vUpdateScreen+0x82>
		break;
	case STEERINGFRAME_ID:
		LCD_set_cursor(1, 5);
    795a:	81 e0       	ldi	r24, 0x01	; 1
    795c:	65 e0       	ldi	r22, 0x05	; 5
    795e:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <LCD_set_cursor>
		LCD_write_s32_number(Global_u16SteeringAnalogValue);
    7962:	80 91 ba 01 	lds	r24, 0x01BA
    7966:	88 2f       	mov	r24, r24
    7968:	90 e0       	ldi	r25, 0x00	; 0
    796a:	a0 e0       	ldi	r26, 0x00	; 0
    796c:	b0 e0       	ldi	r27, 0x00	; 0
    796e:	bc 01       	movw	r22, r24
    7970:	cd 01       	movw	r24, r26
    7972:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <LCD_write_s32_number>
    7976:	08 c0       	rjmp	.+16     	; 0x7988 <vUpdateScreen+0x82>
		break;
	case DRIVEMODEFRAME_ID:
		LCD_set_cursor(2, 5);
    7978:	82 e0       	ldi	r24, 0x02	; 2
    797a:	65 e0       	ldi	r22, 0x05	; 5
    797c:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <LCD_set_cursor>
		LCD_write_char(Global_u8DriveMode);
    7980:	80 91 92 01 	lds	r24, 0x0192
    7984:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <LCD_write_char>
		break;
	default:
		break;
	}
}
    7988:	0f 90       	pop	r0
    798a:	0f 90       	pop	r0
    798c:	0f 90       	pop	r0
    798e:	cf 91       	pop	r28
    7990:	df 91       	pop	r29
    7992:	08 95       	ret

00007994 <vSendFrame>:

void vSendFrame( u8 copy_u8FreameID , u8 copy_u8FrameDataByte )
{
    7994:	df 93       	push	r29
    7996:	cf 93       	push	r28
    7998:	00 d0       	rcall	.+0      	; 0x799a <vSendFrame+0x6>
    799a:	cd b7       	in	r28, 0x3d	; 61
    799c:	de b7       	in	r29, 0x3e	; 62
    799e:	89 83       	std	Y+1, r24	; 0x01
    79a0:	6a 83       	std	Y+2, r22	; 0x02

}
    79a2:	0f 90       	pop	r0
    79a4:	0f 90       	pop	r0
    79a6:	cf 91       	pop	r28
    79a8:	df 91       	pop	r29
    79aa:	08 95       	ret

000079ac <vReciveFrame>:

void vReciveFrame( u8 copy_u8RecivedByte )
{
    79ac:	df 93       	push	r29
    79ae:	cf 93       	push	r28
    79b0:	0f 92       	push	r0
    79b2:	cd b7       	in	r28, 0x3d	; 61
    79b4:	de b7       	in	r29, 0x3e	; 62
    79b6:	89 83       	std	Y+1, r24	; 0x01

}
    79b8:	0f 90       	pop	r0
    79ba:	cf 91       	pop	r28
    79bc:	df 91       	pop	r29
    79be:	08 95       	ret

000079c0 <vBreakAction>:


void vBreakAction( void )
{
    79c0:	df 93       	push	r29
    79c2:	cf 93       	push	r28
    79c4:	cd b7       	in	r28, 0x3d	; 61
    79c6:	de b7       	in	r29, 0x3e	; 62
	// Check if the break button is pressed
	if( DIO_u8_get_pin(DIO_BR_PORT, DIO_BR_PIN) == DIO_BUTTON_PRESSED )
    79c8:	83 e0       	ldi	r24, 0x03	; 3
    79ca:	62 e0       	ldi	r22, 0x02	; 2
    79cc:	0e 94 6d 0b 	call	0x16da	; 0x16da <DIO_u8_get_pin>
    79d0:	88 23       	and	r24, r24
    79d2:	29 f4       	brne	.+10     	; 0x79de <vBreakAction+0x1e>
	{// if pressed send break on frame
		vSendFrame( BREAK_FRAME_ID, BREAK_ON );
    79d4:	82 e2       	ldi	r24, 0x22	; 34
    79d6:	6f e0       	ldi	r22, 0x0F	; 15
    79d8:	0e 94 ca 3c 	call	0x7994	; 0x7994 <vSendFrame>
    79dc:	04 c0       	rjmp	.+8      	; 0x79e6 <vBreakAction+0x26>
	}
	else
	{// if not pressed send break off frame
		vSendFrame( BREAK_FRAME_ID, BREAK_OFF );
    79de:	82 e2       	ldi	r24, 0x22	; 34
    79e0:	60 ef       	ldi	r22, 0xF0	; 240
    79e2:	0e 94 ca 3c 	call	0x7994	; 0x7994 <vSendFrame>
	}
}
    79e6:	cf 91       	pop	r28
    79e8:	df 91       	pop	r29
    79ea:	08 95       	ret

000079ec <vACCAction>:

void vACCAction( void )
{
    79ec:	df 93       	push	r29
    79ee:	cf 93       	push	r28
    79f0:	cd b7       	in	r28, 0x3d	; 61
    79f2:	de b7       	in	r29, 0x3e	; 62
	// Check if the cruise control is on
	if( Global_u8CruiseState == CRUISE_ON )
    79f4:	80 91 93 01 	lds	r24, 0x0193
    79f8:	8f 30       	cpi	r24, 0x0F	; 15
    79fa:	41 f4       	brne	.+16     	; 0x7a0c <vACCAction+0x20>
	{// if cruise is on
		// Send cruise off frame
		vSendFrame( ACC_FRAME_ID, CRUISE_OFF );
    79fc:	86 e2       	ldi	r24, 0x26	; 38
    79fe:	60 ef       	ldi	r22, 0xF0	; 240
    7a00:	0e 94 ca 3c 	call	0x7994	; 0x7994 <vSendFrame>
		// Save the current state
		Global_u8CruiseState = CRUISE_OFF;
    7a04:	80 ef       	ldi	r24, 0xF0	; 240
    7a06:	80 93 93 01 	sts	0x0193, r24
    7a0a:	07 c0       	rjmp	.+14     	; 0x7a1a <vACCAction+0x2e>
	}
	else
	{// if cruise is off
		// Send cruise on frame
		vSendFrame( ACC_FRAME_ID, CRUISE_ON );
    7a0c:	86 e2       	ldi	r24, 0x26	; 38
    7a0e:	6f e0       	ldi	r22, 0x0F	; 15
    7a10:	0e 94 ca 3c 	call	0x7994	; 0x7994 <vSendFrame>
		// Save the current state
		Global_u8CruiseState = CRUISE_ON;
    7a14:	8f e0       	ldi	r24, 0x0F	; 15
    7a16:	80 93 93 01 	sts	0x0193, r24
	}
}
    7a1a:	cf 91       	pop	r28
    7a1c:	df 91       	pop	r29
    7a1e:	08 95       	ret

00007a20 <__mulsi3>:
    7a20:	62 9f       	mul	r22, r18
    7a22:	d0 01       	movw	r26, r0
    7a24:	73 9f       	mul	r23, r19
    7a26:	f0 01       	movw	r30, r0
    7a28:	82 9f       	mul	r24, r18
    7a2a:	e0 0d       	add	r30, r0
    7a2c:	f1 1d       	adc	r31, r1
    7a2e:	64 9f       	mul	r22, r20
    7a30:	e0 0d       	add	r30, r0
    7a32:	f1 1d       	adc	r31, r1
    7a34:	92 9f       	mul	r25, r18
    7a36:	f0 0d       	add	r31, r0
    7a38:	83 9f       	mul	r24, r19
    7a3a:	f0 0d       	add	r31, r0
    7a3c:	74 9f       	mul	r23, r20
    7a3e:	f0 0d       	add	r31, r0
    7a40:	65 9f       	mul	r22, r21
    7a42:	f0 0d       	add	r31, r0
    7a44:	99 27       	eor	r25, r25
    7a46:	72 9f       	mul	r23, r18
    7a48:	b0 0d       	add	r27, r0
    7a4a:	e1 1d       	adc	r30, r1
    7a4c:	f9 1f       	adc	r31, r25
    7a4e:	63 9f       	mul	r22, r19
    7a50:	b0 0d       	add	r27, r0
    7a52:	e1 1d       	adc	r30, r1
    7a54:	f9 1f       	adc	r31, r25
    7a56:	bd 01       	movw	r22, r26
    7a58:	cf 01       	movw	r24, r30
    7a5a:	11 24       	eor	r1, r1
    7a5c:	08 95       	ret

00007a5e <__divmodhi4>:
    7a5e:	97 fb       	bst	r25, 7
    7a60:	09 2e       	mov	r0, r25
    7a62:	07 26       	eor	r0, r23
    7a64:	0a d0       	rcall	.+20     	; 0x7a7a <__divmodhi4_neg1>
    7a66:	77 fd       	sbrc	r23, 7
    7a68:	04 d0       	rcall	.+8      	; 0x7a72 <__divmodhi4_neg2>
    7a6a:	27 d0       	rcall	.+78     	; 0x7aba <__udivmodhi4>
    7a6c:	06 d0       	rcall	.+12     	; 0x7a7a <__divmodhi4_neg1>
    7a6e:	00 20       	and	r0, r0
    7a70:	1a f4       	brpl	.+6      	; 0x7a78 <__divmodhi4_exit>

00007a72 <__divmodhi4_neg2>:
    7a72:	70 95       	com	r23
    7a74:	61 95       	neg	r22
    7a76:	7f 4f       	sbci	r23, 0xFF	; 255

00007a78 <__divmodhi4_exit>:
    7a78:	08 95       	ret

00007a7a <__divmodhi4_neg1>:
    7a7a:	f6 f7       	brtc	.-4      	; 0x7a78 <__divmodhi4_exit>
    7a7c:	90 95       	com	r25
    7a7e:	81 95       	neg	r24
    7a80:	9f 4f       	sbci	r25, 0xFF	; 255
    7a82:	08 95       	ret

00007a84 <__divmodsi4>:
    7a84:	97 fb       	bst	r25, 7
    7a86:	09 2e       	mov	r0, r25
    7a88:	05 26       	eor	r0, r21
    7a8a:	0e d0       	rcall	.+28     	; 0x7aa8 <__divmodsi4_neg1>
    7a8c:	57 fd       	sbrc	r21, 7
    7a8e:	04 d0       	rcall	.+8      	; 0x7a98 <__divmodsi4_neg2>
    7a90:	28 d0       	rcall	.+80     	; 0x7ae2 <__udivmodsi4>
    7a92:	0a d0       	rcall	.+20     	; 0x7aa8 <__divmodsi4_neg1>
    7a94:	00 1c       	adc	r0, r0
    7a96:	38 f4       	brcc	.+14     	; 0x7aa6 <__divmodsi4_exit>

00007a98 <__divmodsi4_neg2>:
    7a98:	50 95       	com	r21
    7a9a:	40 95       	com	r20
    7a9c:	30 95       	com	r19
    7a9e:	21 95       	neg	r18
    7aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    7aa2:	4f 4f       	sbci	r20, 0xFF	; 255
    7aa4:	5f 4f       	sbci	r21, 0xFF	; 255

00007aa6 <__divmodsi4_exit>:
    7aa6:	08 95       	ret

00007aa8 <__divmodsi4_neg1>:
    7aa8:	f6 f7       	brtc	.-4      	; 0x7aa6 <__divmodsi4_exit>
    7aaa:	90 95       	com	r25
    7aac:	80 95       	com	r24
    7aae:	70 95       	com	r23
    7ab0:	61 95       	neg	r22
    7ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    7ab4:	8f 4f       	sbci	r24, 0xFF	; 255
    7ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    7ab8:	08 95       	ret

00007aba <__udivmodhi4>:
    7aba:	aa 1b       	sub	r26, r26
    7abc:	bb 1b       	sub	r27, r27
    7abe:	51 e1       	ldi	r21, 0x11	; 17
    7ac0:	07 c0       	rjmp	.+14     	; 0x7ad0 <__udivmodhi4_ep>

00007ac2 <__udivmodhi4_loop>:
    7ac2:	aa 1f       	adc	r26, r26
    7ac4:	bb 1f       	adc	r27, r27
    7ac6:	a6 17       	cp	r26, r22
    7ac8:	b7 07       	cpc	r27, r23
    7aca:	10 f0       	brcs	.+4      	; 0x7ad0 <__udivmodhi4_ep>
    7acc:	a6 1b       	sub	r26, r22
    7ace:	b7 0b       	sbc	r27, r23

00007ad0 <__udivmodhi4_ep>:
    7ad0:	88 1f       	adc	r24, r24
    7ad2:	99 1f       	adc	r25, r25
    7ad4:	5a 95       	dec	r21
    7ad6:	a9 f7       	brne	.-22     	; 0x7ac2 <__udivmodhi4_loop>
    7ad8:	80 95       	com	r24
    7ada:	90 95       	com	r25
    7adc:	bc 01       	movw	r22, r24
    7ade:	cd 01       	movw	r24, r26
    7ae0:	08 95       	ret

00007ae2 <__udivmodsi4>:
    7ae2:	a1 e2       	ldi	r26, 0x21	; 33
    7ae4:	1a 2e       	mov	r1, r26
    7ae6:	aa 1b       	sub	r26, r26
    7ae8:	bb 1b       	sub	r27, r27
    7aea:	fd 01       	movw	r30, r26
    7aec:	0d c0       	rjmp	.+26     	; 0x7b08 <__udivmodsi4_ep>

00007aee <__udivmodsi4_loop>:
    7aee:	aa 1f       	adc	r26, r26
    7af0:	bb 1f       	adc	r27, r27
    7af2:	ee 1f       	adc	r30, r30
    7af4:	ff 1f       	adc	r31, r31
    7af6:	a2 17       	cp	r26, r18
    7af8:	b3 07       	cpc	r27, r19
    7afa:	e4 07       	cpc	r30, r20
    7afc:	f5 07       	cpc	r31, r21
    7afe:	20 f0       	brcs	.+8      	; 0x7b08 <__udivmodsi4_ep>
    7b00:	a2 1b       	sub	r26, r18
    7b02:	b3 0b       	sbc	r27, r19
    7b04:	e4 0b       	sbc	r30, r20
    7b06:	f5 0b       	sbc	r31, r21

00007b08 <__udivmodsi4_ep>:
    7b08:	66 1f       	adc	r22, r22
    7b0a:	77 1f       	adc	r23, r23
    7b0c:	88 1f       	adc	r24, r24
    7b0e:	99 1f       	adc	r25, r25
    7b10:	1a 94       	dec	r1
    7b12:	69 f7       	brne	.-38     	; 0x7aee <__udivmodsi4_loop>
    7b14:	60 95       	com	r22
    7b16:	70 95       	com	r23
    7b18:	80 95       	com	r24
    7b1a:	90 95       	com	r25
    7b1c:	9b 01       	movw	r18, r22
    7b1e:	ac 01       	movw	r20, r24
    7b20:	bd 01       	movw	r22, r26
    7b22:	cf 01       	movw	r24, r30
    7b24:	08 95       	ret

00007b26 <__prologue_saves__>:
    7b26:	2f 92       	push	r2
    7b28:	3f 92       	push	r3
    7b2a:	4f 92       	push	r4
    7b2c:	5f 92       	push	r5
    7b2e:	6f 92       	push	r6
    7b30:	7f 92       	push	r7
    7b32:	8f 92       	push	r8
    7b34:	9f 92       	push	r9
    7b36:	af 92       	push	r10
    7b38:	bf 92       	push	r11
    7b3a:	cf 92       	push	r12
    7b3c:	df 92       	push	r13
    7b3e:	ef 92       	push	r14
    7b40:	ff 92       	push	r15
    7b42:	0f 93       	push	r16
    7b44:	1f 93       	push	r17
    7b46:	cf 93       	push	r28
    7b48:	df 93       	push	r29
    7b4a:	cd b7       	in	r28, 0x3d	; 61
    7b4c:	de b7       	in	r29, 0x3e	; 62
    7b4e:	ca 1b       	sub	r28, r26
    7b50:	db 0b       	sbc	r29, r27
    7b52:	0f b6       	in	r0, 0x3f	; 63
    7b54:	f8 94       	cli
    7b56:	de bf       	out	0x3e, r29	; 62
    7b58:	0f be       	out	0x3f, r0	; 63
    7b5a:	cd bf       	out	0x3d, r28	; 61
    7b5c:	09 94       	ijmp

00007b5e <__epilogue_restores__>:
    7b5e:	2a 88       	ldd	r2, Y+18	; 0x12
    7b60:	39 88       	ldd	r3, Y+17	; 0x11
    7b62:	48 88       	ldd	r4, Y+16	; 0x10
    7b64:	5f 84       	ldd	r5, Y+15	; 0x0f
    7b66:	6e 84       	ldd	r6, Y+14	; 0x0e
    7b68:	7d 84       	ldd	r7, Y+13	; 0x0d
    7b6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    7b6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    7b6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7b70:	b9 84       	ldd	r11, Y+9	; 0x09
    7b72:	c8 84       	ldd	r12, Y+8	; 0x08
    7b74:	df 80       	ldd	r13, Y+7	; 0x07
    7b76:	ee 80       	ldd	r14, Y+6	; 0x06
    7b78:	fd 80       	ldd	r15, Y+5	; 0x05
    7b7a:	0c 81       	ldd	r16, Y+4	; 0x04
    7b7c:	1b 81       	ldd	r17, Y+3	; 0x03
    7b7e:	aa 81       	ldd	r26, Y+2	; 0x02
    7b80:	b9 81       	ldd	r27, Y+1	; 0x01
    7b82:	ce 0f       	add	r28, r30
    7b84:	d1 1d       	adc	r29, r1
    7b86:	0f b6       	in	r0, 0x3f	; 63
    7b88:	f8 94       	cli
    7b8a:	de bf       	out	0x3e, r29	; 62
    7b8c:	0f be       	out	0x3f, r0	; 63
    7b8e:	cd bf       	out	0x3d, r28	; 61
    7b90:	ed 01       	movw	r28, r26
    7b92:	08 95       	ret

00007b94 <_exit>:
    7b94:	f8 94       	cli

00007b96 <__stop_program>:
    7b96:	ff cf       	rjmp	.-2      	; 0x7b96 <__stop_program>
