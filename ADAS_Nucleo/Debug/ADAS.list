
ADAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b78  08000b78  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b78  08000b78  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000b78  08000b78  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b78  08000b78  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b78  08000b78  00010b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b7c  08000b7c  00010b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000ba0  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000ba0  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000100a  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000503  00000000  00000000  0002109d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  000215a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000135  00000000  00000000  00021750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000097d  00000000  00000000  00021885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001181  00000000  00000000  00022202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005628  00000000  00000000  00023383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000598  00000000  00000000  000289ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00028f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000b60 	.word	0x08000b60

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	08000b60 	.word	0x08000b60

080001d4 <GPIO_voidSysInit>:

/**********************************************************************************
 *******************		 		GPIO_voidSysInit				***************
 **********************************************************************************/
/*		Function configure the GPIO peripherals initially		*/
void GPIO_voidSysInit(void ){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
		GPIO_bases[GPIOH_PORT] -> AFRL = GPIOA_CONFIG_AFRL;
		GPIO_bases[GPIOH_PORT] -> AFRH = GPIOA_CONFIG_AFRH;

	#endif

}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
	...

080001e4 <GPIO_voidSetPinMode>:
									MODE_ALTF
									MODE_ANALOG	

*/
void GPIO_voidSetPinMode(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8MODE)
 {
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
 80001ee:	460b      	mov	r3, r1
 80001f0:	71bb      	strb	r3, [r7, #6]
 80001f2:	4613      	mov	r3, r2
 80001f4:	717b      	strb	r3, [r7, #5]
	 if((copy_u8PORT <= GPIOH_PORT) && (copy_u8PIN <= PIN15) && (copy_u8MODE <= MODE_ANALOG)){
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b05      	cmp	r3, #5
 80001fa:	d825      	bhi.n	8000248 <GPIO_voidSetPinMode+0x64>
 80001fc:	79bb      	ldrb	r3, [r7, #6]
 80001fe:	2b0f      	cmp	r3, #15
 8000200:	d822      	bhi.n	8000248 <GPIO_voidSetPinMode+0x64>
 8000202:	797b      	ldrb	r3, [r7, #5]
 8000204:	2b03      	cmp	r3, #3
 8000206:	d81f      	bhi.n	8000248 <GPIO_voidSetPinMode+0x64>

		 GPIO_bases[copy_u8PORT] -> MODER &= GPIO_MODER_MASK( copy_u8PIN * 2 );
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	4a12      	ldr	r2, [pc, #72]	; (8000254 <GPIO_voidSetPinMode+0x70>)
 800020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000210:	6819      	ldr	r1, [r3, #0]
 8000212:	79bb      	ldrb	r3, [r7, #6]
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	2203      	movs	r2, #3
 8000218:	fa02 f303 	lsl.w	r3, r2, r3
 800021c:	43da      	mvns	r2, r3
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	480c      	ldr	r0, [pc, #48]	; (8000254 <GPIO_voidSetPinMode+0x70>)
 8000222:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000226:	400a      	ands	r2, r1
 8000228:	601a      	str	r2, [r3, #0]
		 GPIO_bases[copy_u8PORT] -> MODER |= ( ( ( u32 ) copy_u8MODE ) << copy_u8PIN * 2 );
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	4a09      	ldr	r2, [pc, #36]	; (8000254 <GPIO_voidSetPinMode+0x70>)
 800022e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000232:	6819      	ldr	r1, [r3, #0]
 8000234:	797a      	ldrb	r2, [r7, #5]
 8000236:	79bb      	ldrb	r3, [r7, #6]
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	409a      	lsls	r2, r3
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <GPIO_voidSetPinMode+0x70>)
 8000240:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000244:	430a      	orrs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]

	 }
	 else{

	 }
 }
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	20000000 	.word	0x20000000

08000258 <GPIO_voidWriteData>:
			* Function To Write Data At ODR	Value :
									 high 
									 low	
*/
void GPIO_voidWriteData(u8 copy_u8PORT ,u8 copy_u8PIN , u8 copy_u8Value )
 {
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
 8000262:	460b      	mov	r3, r1
 8000264:	71bb      	strb	r3, [r7, #6]
 8000266:	4613      	mov	r3, r2
 8000268:	717b      	strb	r3, [r7, #5]
	 if((copy_u8PORT <= GPIOH_PORT) && (copy_u8PIN <= PIN15)){
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b05      	cmp	r3, #5
 800026e:	d820      	bhi.n	80002b2 <GPIO_voidWriteData+0x5a>
 8000270:	79bb      	ldrb	r3, [r7, #6]
 8000272:	2b0f      	cmp	r3, #15
 8000274:	d81d      	bhi.n	80002b2 <GPIO_voidWriteData+0x5a>
		GPIO_bases[copy_u8PORT] -> ODR &= GPIO_ODR_MASK( copy_u8PIN );
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <GPIO_voidWriteData+0x68>)
 800027a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027e:	6959      	ldr	r1, [r3, #20]
 8000280:	79bb      	ldrb	r3, [r7, #6]
 8000282:	2201      	movs	r2, #1
 8000284:	fa02 f303 	lsl.w	r3, r2, r3
 8000288:	43da      	mvns	r2, r3
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <GPIO_voidWriteData+0x68>)
 800028e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000292:	400a      	ands	r2, r1
 8000294:	615a      	str	r2, [r3, #20]
		GPIO_bases[copy_u8PORT] -> ODR |= ( ( ( u32 ) copy_u8Value ) << copy_u8PIN );
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	4a09      	ldr	r2, [pc, #36]	; (80002c0 <GPIO_voidWriteData+0x68>)
 800029a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029e:	6959      	ldr	r1, [r3, #20]
 80002a0:	797a      	ldrb	r2, [r7, #5]
 80002a2:	79bb      	ldrb	r3, [r7, #6]
 80002a4:	409a      	lsls	r2, r3
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	4805      	ldr	r0, [pc, #20]	; (80002c0 <GPIO_voidWriteData+0x68>)
 80002aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80002ae:	430a      	orrs	r2, r1
 80002b0:	615a      	str	r2, [r3, #20]
	 }
	 else{
	 }
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20000000 	.word	0x20000000

080002c4 <GPIO_voidPinSetAltFn>:
 **********************************************************************************/  
/*
			Function Set The AltFn		: Every Pin Need 4 Bits SO We Have High AND Low
*/
void GPIO_voidPinSetAltFn(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8AlT)
{
 80002c4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002c8:	b082      	sub	sp, #8
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	4603      	mov	r3, r0
 80002ce:	71fb      	strb	r3, [r7, #7]
 80002d0:	460b      	mov	r3, r1
 80002d2:	71bb      	strb	r3, [r7, #6]
 80002d4:	4613      	mov	r3, r2
 80002d6:	717b      	strb	r3, [r7, #5]
	if((copy_u8PORT <= GPIOH_PORT) && (copy_u8PIN <= PIN15) && (copy_u8AlT <= GPIO_AFR_MAX)){
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	2b05      	cmp	r3, #5
 80002dc:	d871      	bhi.n	80003c2 <GPIO_voidPinSetAltFn+0xfe>
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	2b0f      	cmp	r3, #15
 80002e2:	d86e      	bhi.n	80003c2 <GPIO_voidPinSetAltFn+0xfe>
 80002e4:	797b      	ldrb	r3, [r7, #5]
 80002e6:	2b0f      	cmp	r3, #15
 80002e8:	d86b      	bhi.n	80003c2 <GPIO_voidPinSetAltFn+0xfe>
		if(copy_u8PIN <= PIN7)
 80002ea:	79bb      	ldrb	r3, [r7, #6]
 80002ec:	2b07      	cmp	r3, #7
 80002ee:	d833      	bhi.n	8000358 <GPIO_voidPinSetAltFn+0x94>
		{
			GPIO_bases[copy_u8PORT] -> AFRL &= GPIO_AFR_MASK( copy_u8PIN * 4 );
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	4a37      	ldr	r2, [pc, #220]	; (80003d0 <GPIO_voidPinSetAltFn+0x10c>)
 80002f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f8:	6a1b      	ldr	r3, [r3, #32]
 80002fa:	603b      	str	r3, [r7, #0]
 80002fc:	79bb      	ldrb	r3, [r7, #6]
 80002fe:	0099      	lsls	r1, r3, #2
 8000300:	f04f 020f 	mov.w	r2, #15
 8000304:	f04f 0300 	mov.w	r3, #0
 8000308:	f1a1 0620 	sub.w	r6, r1, #32
 800030c:	f1c1 0020 	rsb	r0, r1, #32
 8000310:	fa03 f901 	lsl.w	r9, r3, r1
 8000314:	fa02 f606 	lsl.w	r6, r2, r6
 8000318:	ea49 0906 	orr.w	r9, r9, r6
 800031c:	fa22 f000 	lsr.w	r0, r2, r0
 8000320:	ea49 0900 	orr.w	r9, r9, r0
 8000324:	fa02 f801 	lsl.w	r8, r2, r1
 8000328:	4643      	mov	r3, r8
 800032a:	43da      	mvns	r2, r3
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	4928      	ldr	r1, [pc, #160]	; (80003d0 <GPIO_voidPinSetAltFn+0x10c>)
 8000330:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000334:	6839      	ldr	r1, [r7, #0]
 8000336:	400a      	ands	r2, r1
 8000338:	621a      	str	r2, [r3, #32]
			GPIO_bases[copy_u8PORT] -> AFRL |= ( ( ( u32 ) copy_u8AlT ) << copy_u8PIN * 4 );
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	4a24      	ldr	r2, [pc, #144]	; (80003d0 <GPIO_voidPinSetAltFn+0x10c>)
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	6a19      	ldr	r1, [r3, #32]
 8000344:	797a      	ldrb	r2, [r7, #5]
 8000346:	79bb      	ldrb	r3, [r7, #6]
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	409a      	lsls	r2, r3
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4820      	ldr	r0, [pc, #128]	; (80003d0 <GPIO_voidPinSetAltFn+0x10c>)
 8000350:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000354:	430a      	orrs	r2, r1
 8000356:	621a      	str	r2, [r3, #32]
		}
		if(copy_u8PIN > PIN7)
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	2b07      	cmp	r3, #7
 800035c:	d931      	bls.n	80003c2 <GPIO_voidPinSetAltFn+0xfe>
		{
			GPIO_bases[copy_u8PORT] -> AFRH &= GPIO_AFR_MASK( copy_u8PIN * 4 );
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	4a1b      	ldr	r2, [pc, #108]	; (80003d0 <GPIO_voidPinSetAltFn+0x10c>)
 8000362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000368:	603b      	str	r3, [r7, #0]
 800036a:	79bb      	ldrb	r3, [r7, #6]
 800036c:	0099      	lsls	r1, r3, #2
 800036e:	f04f 020f 	mov.w	r2, #15
 8000372:	f04f 0300 	mov.w	r3, #0
 8000376:	f1a1 0620 	sub.w	r6, r1, #32
 800037a:	f1c1 0020 	rsb	r0, r1, #32
 800037e:	fa03 f501 	lsl.w	r5, r3, r1
 8000382:	fa02 f606 	lsl.w	r6, r2, r6
 8000386:	4335      	orrs	r5, r6
 8000388:	fa22 f000 	lsr.w	r0, r2, r0
 800038c:	4305      	orrs	r5, r0
 800038e:	fa02 f401 	lsl.w	r4, r2, r1
 8000392:	4623      	mov	r3, r4
 8000394:	43da      	mvns	r2, r3
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	490d      	ldr	r1, [pc, #52]	; (80003d0 <GPIO_voidPinSetAltFn+0x10c>)
 800039a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800039e:	6839      	ldr	r1, [r7, #0]
 80003a0:	400a      	ands	r2, r1
 80003a2:	625a      	str	r2, [r3, #36]	; 0x24
			GPIO_bases[copy_u8PORT] -> AFRH |= ( ( ( u32 ) copy_u8AlT ) << copy_u8PIN * 4 );
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <GPIO_voidPinSetAltFn+0x10c>)
 80003a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80003ae:	797a      	ldrb	r2, [r7, #5]
 80003b0:	79bb      	ldrb	r3, [r7, #6]
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	409a      	lsls	r2, r3
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	4805      	ldr	r0, [pc, #20]	; (80003d0 <GPIO_voidPinSetAltFn+0x10c>)
 80003ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80003be:	430a      	orrs	r2, r1
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	20000000 	.word	0x20000000

080003d4 <ICU_u8Init>:

/* Configure TIMER Peripheral using pre-build configurations		*/
/* Input Parameters: TIMER Peripheral ID							*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Failed			*/
STD_ReturnType ICU_u8Init( u8 copy_u8TIM_ID )
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	// Check data validity
	if ( ( ( copy_u8TIM_ID == TIMER2ID ) && ( ( ICU_Init == TIM5_Init ) || ( ICU_Init == TIM_NOT_Init ) ) ) ||
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d107      	bne.n	80003f4 <ICU_u8Init+0x20>
 80003e4:	4b28      	ldr	r3, [pc, #160]	; (8000488 <ICU_u8Init+0xb4>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2bf0      	cmp	r3, #240	; 0xf0
 80003ea:	d00e      	beq.n	800040a <ICU_u8Init+0x36>
 80003ec:	4b26      	ldr	r3, [pc, #152]	; (8000488 <ICU_u8Init+0xb4>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d00a      	beq.n	800040a <ICU_u8Init+0x36>
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d13f      	bne.n	800047a <ICU_u8Init+0xa6>
		 ( ( copy_u8TIM_ID == TIMER5ID ) && ( ( ICU_Init == TIM2_Init ) || ( ICU_Init == TIM_NOT_Init ) ) ) )
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <ICU_u8Init+0xb4>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b0f      	cmp	r3, #15
 8000400:	d003      	beq.n	800040a <ICU_u8Init+0x36>
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <ICU_u8Init+0xb4>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d137      	bne.n	800047a <ICU_u8Init+0xa6>
	{
		// Check which timer is selected to be initiated
		switch( copy_u8TIM_ID )
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d002      	beq.n	8000416 <ICU_u8Init+0x42>
 8000410:	2b01      	cmp	r3, #1
 8000412:	d017      	beq.n	8000444 <ICU_u8Init+0x70>
 8000414:	e02d      	b.n	8000472 <ICU_u8Init+0x9e>
		{
		case TIMER2ID:// Case of timer 2 is selected
			// Configure the registers
			//TIM2_CR1_ADR = TIM_CR1_CONFIG;
			TIM2_CCMR1_ADR = TIM_CCMR1_CONFIG;
 8000416:	4b1d      	ldr	r3, [pc, #116]	; (800048c <ICU_u8Init+0xb8>)
 8000418:	f241 1211 	movw	r2, #4369	; 0x1111
 800041c:	601a      	str	r2, [r3, #0]
			TIM2_CCMR2_ADR = TIM_CCMR2_CONFIG;
 800041e:	4b1c      	ldr	r3, [pc, #112]	; (8000490 <ICU_u8Init+0xbc>)
 8000420:	f241 1211 	movw	r2, #4369	; 0x1111
 8000424:	601a      	str	r2, [r3, #0]
			TIM2_CCER_ADR = TIM_CCER_CONFIG;
 8000426:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <ICU_u8Init+0xc0>)
 8000428:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800042c:	601a      	str	r2, [r3, #0]
			TIM2_PSR_ADR = TIM_PSR_CONFIG;
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <ICU_u8Init+0xc4>)
 8000430:	227d      	movs	r2, #125	; 0x7d
 8000432:	601a      	str	r2, [r3, #0]
			// Set the init flag
			ICU_Init |= TIM2_Init;
 8000434:	4b14      	ldr	r3, [pc, #80]	; (8000488 <ICU_u8Init+0xb4>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	f043 030f 	orr.w	r3, r3, #15
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <ICU_u8Init+0xb4>)
 8000440:	701a      	strb	r2, [r3, #0]
			break;
 8000442:	e018      	b.n	8000476 <ICU_u8Init+0xa2>
		case TIMER5ID: // Case of timer 5 is selected
			// Configure the registers
			//TIM5_CR1_ADR = TIM_CR1_CONFIG;
			TIM5_CCMR1_ADR = TIM_CCMR1_CONFIG;
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <ICU_u8Init+0xc8>)
 8000446:	f241 1211 	movw	r2, #4369	; 0x1111
 800044a:	601a      	str	r2, [r3, #0]
			TIM5_CCMR2_ADR = TIM_CCMR2_CONFIG;
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <ICU_u8Init+0xcc>)
 800044e:	f241 1211 	movw	r2, #4369	; 0x1111
 8000452:	601a      	str	r2, [r3, #0]
			TIM5_CCER_ADR = TIM_CCER_CONFIG;
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <ICU_u8Init+0xd0>)
 8000456:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800045a:	601a      	str	r2, [r3, #0]
			TIM5_PSR_ADR = TIM_PSR_CONFIG;
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <ICU_u8Init+0xc4>)
 800045e:	227d      	movs	r2, #125	; 0x7d
 8000460:	601a      	str	r2, [r3, #0]
			// Set the init flag
			ICU_Init |= TIM5_Init;
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <ICU_u8Init+0xb4>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	f063 030f 	orn	r3, r3, #15
 800046a:	b2da      	uxtb	r2, r3
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <ICU_u8Init+0xb4>)
 800046e:	701a      	strb	r2, [r3, #0]
			break;
 8000470:	e001      	b.n	8000476 <ICU_u8Init+0xa2>
		default: // Case of wrong selection
			// Return false
			return STD_FALSE;
 8000472:	2300      	movs	r3, #0
 8000474:	e002      	b.n	800047c <ICU_u8Init+0xa8>
			break;
		}
		// Return true
		return STD_TRUE;
 8000476:	2301      	movs	r3, #1
 8000478:	e000      	b.n	800047c <ICU_u8Init+0xa8>
	}
	else
	{// In case of in valid data or re-init
		// Return false
		return STD_FALSE;
 800047a:	2300      	movs	r3, #0
	}
}
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr
 8000488:	2000003c 	.word	0x2000003c
 800048c:	40000018 	.word	0x40000018
 8000490:	4000001c 	.word	0x4000001c
 8000494:	40000020 	.word	0x40000020
 8000498:	40000c28 	.word	0x40000c28
 800049c:	40000c18 	.word	0x40000c18
 80004a0:	40000c1c 	.word	0x40000c1c
 80004a4:	40000c20 	.word	0x40000c20

080004a8 <ICU_u8StartTim>:
/*--------------------------------------------------------------------------------*/
/* Enables the timer and start event detection						*/
/* Input Parameters: TIMER Peripheral ID							*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Failed			*/
STD_ReturnType ICU_u8StartTim(  u8 copy_u8TIM_ID )
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
	// Check data validity
	if( ( ( ICU_Init == TIM2_Init ) && ( copy_u8TIM_ID == TIMER2ID ) ) ||
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <ICU_u8StartTim+0x68>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b0f      	cmp	r3, #15
 80004b8:	d102      	bne.n	80004c0 <ICU_u8StartTim+0x18>
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d006      	beq.n	80004ce <ICU_u8StartTim+0x26>
		( ( ICU_Init == TIM5_Init ) && ( copy_u8TIM_ID == TIMER5ID ) ) )
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <ICU_u8StartTim+0x68>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
	if( ( ( ICU_Init == TIM2_Init ) && ( copy_u8TIM_ID == TIMER2ID ) ) ||
 80004c4:	2bf0      	cmp	r3, #240	; 0xf0
 80004c6:	d11c      	bne.n	8000502 <ICU_u8StartTim+0x5a>
		( ( ICU_Init == TIM5_Init ) && ( copy_u8TIM_ID == TIMER5ID ) ) )
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d119      	bne.n	8000502 <ICU_u8StartTim+0x5a>
	{
		// Check which timer is selected to be initiated
		switch( copy_u8TIM_ID )
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d002      	beq.n	80004da <ICU_u8StartTim+0x32>
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d009      	beq.n	80004ec <ICU_u8StartTim+0x44>
 80004d8:	e00f      	b.n	80004fa <ICU_u8StartTim+0x52>
		{
		case TIMER2ID:// Case of timer 2 is selected
			// Enable timer 2
			set_bit( TIM2_CR1_ADR , TIMx_EN );
 80004da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6013      	str	r3, [r2, #0]
			break;
 80004ea:	e008      	b.n	80004fe <ICU_u8StartTim+0x56>
		case TIMER5ID: // Case of timer 5 is selected
			// Enable timer 5
			set_bit( TIM5_CR1_ADR , TIMx_EN );
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <ICU_u8StartTim+0x6c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a08      	ldr	r2, [pc, #32]	; (8000514 <ICU_u8StartTim+0x6c>)
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	6013      	str	r3, [r2, #0]
			break;
 80004f8:	e001      	b.n	80004fe <ICU_u8StartTim+0x56>
		default: // Case of wrong selection
			// Return false
			return STD_FALSE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	e002      	b.n	8000504 <ICU_u8StartTim+0x5c>
			break;
		}
		// Return true
		return STD_TRUE;
 80004fe:	2301      	movs	r3, #1
 8000500:	e000      	b.n	8000504 <ICU_u8StartTim+0x5c>
	}
	else
	{// In case of in valid data or re-init
		// Return false
		return STD_FALSE;
 8000502:	2300      	movs	r3, #0
	}
}
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	2000003c 	.word	0x2000003c
 8000514:	40000c00 	.word	0x40000c00

08000518 <ICU_u8StartCh>:
/*--------------------------------------------------------------------------------*/
/* Enables a certain channel										*/
/* Input Parameters: TIMER Peripheral ID, Input channel ID			*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Failed			*/
STD_ReturnType ICU_u8StartCh(  u8 copy_u8TIM_ID , u8 copy_u8CH_ID )
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	460a      	mov	r2, r1
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	4613      	mov	r3, r2
 8000526:	71bb      	strb	r3, [r7, #6]
	// Check data validity
	if( ( ( ( ICU_Init == TIM2_Init ) && ( copy_u8TIM_ID == TIMER2ID ) ) ||
 8000528:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <ICU_u8StartCh+0x110>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b0f      	cmp	r3, #15
 800052e:	d102      	bne.n	8000536 <ICU_u8StartCh+0x1e>
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d006      	beq.n	8000544 <ICU_u8StartCh+0x2c>
		( ( ICU_Init == TIM5_Init ) && ( copy_u8TIM_ID == TIMER5ID ) ) ) &&
 8000536:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <ICU_u8StartCh+0x110>)
 8000538:	781b      	ldrb	r3, [r3, #0]
	if( ( ( ( ICU_Init == TIM2_Init ) && ( copy_u8TIM_ID == TIMER2ID ) ) ||
 800053a:	2bf0      	cmp	r3, #240	; 0xf0
 800053c:	d16c      	bne.n	8000618 <ICU_u8StartCh+0x100>
		( ( ICU_Init == TIM5_Init ) && ( copy_u8TIM_ID == TIMER5ID ) ) ) &&
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d169      	bne.n	8000618 <ICU_u8StartCh+0x100>
 8000544:	79bb      	ldrb	r3, [r7, #6]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d866      	bhi.n	8000618 <ICU_u8StartCh+0x100>
		( copy_u8CH_ID <= CH4ID ) )
	{
		// Check which channel is selected
		switch( copy_u8CH_ID )
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	2b03      	cmp	r3, #3
 800054e:	d85f      	bhi.n	8000610 <ICU_u8StartCh+0xf8>
 8000550:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <ICU_u8StartCh+0x40>)
 8000552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000556:	bf00      	nop
 8000558:	08000569 	.word	0x08000569
 800055c:	08000593 	.word	0x08000593
 8000560:	080005bd 	.word	0x080005bd
 8000564:	080005e7 	.word	0x080005e7
		{
		case CH1ID: // Case of Channel 1 is selected
			// Check which timer is selected
			switch( copy_u8TIM_ID )
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d002      	beq.n	8000574 <ICU_u8StartCh+0x5c>
 800056e:	2b01      	cmp	r3, #1
 8000570:	d007      	beq.n	8000582 <ICU_u8StartCh+0x6a>
			case TIMER5ID: // Case of timer 5 is selected
				// Enable the selected channel
				set_bit( TIM5_CCER_ADR , TIMx_CH1EN );
				break;
			default: // Case of wrong timer selection
				break;
 8000572:	e00d      	b.n	8000590 <ICU_u8StartCh+0x78>
				set_bit( TIM2_CCER_ADR , TIMx_CH1EN );
 8000574:	4b2d      	ldr	r3, [pc, #180]	; (800062c <ICU_u8StartCh+0x114>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a2c      	ldr	r2, [pc, #176]	; (800062c <ICU_u8StartCh+0x114>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	6013      	str	r3, [r2, #0]
				break;
 8000580:	e006      	b.n	8000590 <ICU_u8StartCh+0x78>
				set_bit( TIM5_CCER_ADR , TIMx_CH1EN );
 8000582:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <ICU_u8StartCh+0x118>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a2a      	ldr	r2, [pc, #168]	; (8000630 <ICU_u8StartCh+0x118>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6013      	str	r3, [r2, #0]
				break;
 800058e:	bf00      	nop
			}
			break;
 8000590:	e040      	b.n	8000614 <ICU_u8StartCh+0xfc>
		case CH2ID: // Case of Channel 2 is selected
			// Check which timer is selected
			switch( copy_u8TIM_ID )
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <ICU_u8StartCh+0x86>
 8000598:	2b01      	cmp	r3, #1
 800059a:	d007      	beq.n	80005ac <ICU_u8StartCh+0x94>
			case TIMER5ID: // Case of timer 5 is selected
				// Enable the selected channel
				set_bit( TIM5_CCER_ADR , TIMx_CH2EN );
				break;
			default: // Case of wrong timer selection
				break;
 800059c:	e00d      	b.n	80005ba <ICU_u8StartCh+0xa2>
				set_bit( TIM2_CCER_ADR , TIMx_CH2EN );
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <ICU_u8StartCh+0x114>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a22      	ldr	r2, [pc, #136]	; (800062c <ICU_u8StartCh+0x114>)
 80005a4:	f043 0310 	orr.w	r3, r3, #16
 80005a8:	6013      	str	r3, [r2, #0]
				break;
 80005aa:	e006      	b.n	80005ba <ICU_u8StartCh+0xa2>
				set_bit( TIM5_CCER_ADR , TIMx_CH2EN );
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <ICU_u8StartCh+0x118>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <ICU_u8StartCh+0x118>)
 80005b2:	f043 0310 	orr.w	r3, r3, #16
 80005b6:	6013      	str	r3, [r2, #0]
				break;
 80005b8:	bf00      	nop
			}
			break;
 80005ba:	e02b      	b.n	8000614 <ICU_u8StartCh+0xfc>
		case CH3ID: // Case of Channel 3 is selected
			// Check which timer is selected
			switch( copy_u8TIM_ID )
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d002      	beq.n	80005c8 <ICU_u8StartCh+0xb0>
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d007      	beq.n	80005d6 <ICU_u8StartCh+0xbe>
			case TIMER5ID: // Case of timer 5 is selected
				// Enable the selected channel
				set_bit( TIM5_CCER_ADR , TIMx_CH3EN );
				break;
			default: // Case of wrong timer selection
				break;
 80005c6:	e00d      	b.n	80005e4 <ICU_u8StartCh+0xcc>
				set_bit( TIM2_CCER_ADR , TIMx_CH3EN );
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <ICU_u8StartCh+0x114>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a17      	ldr	r2, [pc, #92]	; (800062c <ICU_u8StartCh+0x114>)
 80005ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d2:	6013      	str	r3, [r2, #0]
				break;
 80005d4:	e006      	b.n	80005e4 <ICU_u8StartCh+0xcc>
				set_bit( TIM5_CCER_ADR , TIMx_CH3EN );
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <ICU_u8StartCh+0x118>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a15      	ldr	r2, [pc, #84]	; (8000630 <ICU_u8StartCh+0x118>)
 80005dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e0:	6013      	str	r3, [r2, #0]
				break;
 80005e2:	bf00      	nop
			}
			break;
 80005e4:	e016      	b.n	8000614 <ICU_u8StartCh+0xfc>
		case CH4ID: // Case of Channel 4 is selected
			// Check which timer is selected
			switch( copy_u8TIM_ID )
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <ICU_u8StartCh+0xda>
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d007      	beq.n	8000600 <ICU_u8StartCh+0xe8>
			case TIMER5ID: // Case of timer 5 is selected
				// Enable the selected channel
				set_bit( TIM5_CCER_ADR , TIMx_CH4EN );
				break;
			default: // Case of wrong timer selection
				break;
 80005f0:	e00d      	b.n	800060e <ICU_u8StartCh+0xf6>
				set_bit( TIM2_CCER_ADR , TIMx_CH4EN );
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <ICU_u8StartCh+0x114>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a0d      	ldr	r2, [pc, #52]	; (800062c <ICU_u8StartCh+0x114>)
 80005f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005fc:	6013      	str	r3, [r2, #0]
				break;
 80005fe:	e006      	b.n	800060e <ICU_u8StartCh+0xf6>
				set_bit( TIM5_CCER_ADR , TIMx_CH4EN );
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <ICU_u8StartCh+0x118>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <ICU_u8StartCh+0x118>)
 8000606:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800060a:	6013      	str	r3, [r2, #0]
				break;
 800060c:	bf00      	nop
			}
			break;
 800060e:	e001      	b.n	8000614 <ICU_u8StartCh+0xfc>
		default: // Case of wrong channel selection
			// Return false
			return STD_FALSE;
 8000610:	2300      	movs	r3, #0
 8000612:	e002      	b.n	800061a <ICU_u8StartCh+0x102>
			break;
		}
		return STD_TRUE;
 8000614:	2301      	movs	r3, #1
 8000616:	e000      	b.n	800061a <ICU_u8StartCh+0x102>
	}
	else
	{// In case of in valid data or re-init
		// Return false
		return STD_FALSE;
 8000618:	2300      	movs	r3, #0
	}
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	2000003c 	.word	0x2000003c
 800062c:	40000020 	.word	0x40000020
 8000630:	40000c20 	.word	0x40000c20

08000634 <LCD_write_cmd_4bit>:
	for(u8 i= 0; i <= 5; i++);
	// Enable pin low
	GPIO_voidWriteData(lcd_ctrl_port, lcd_EN, LOW);
}

void LCD_write_cmd_4bit(u8 lcd_copy_cmd_4bit){
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	 *		lcd_copy_cmd_4bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	GPIO_voidWriteData(lcd_ctrl_port, lcd_RS, LOW);
 800063e:	2200      	movs	r2, #0
 8000640:	2102      	movs	r1, #2
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff fe08 	bl	8000258 <GPIO_voidWriteData>
	GPIO_voidWriteData(lcd_ctrl_port, lcd_RW, LOW);
 8000648:	2200      	movs	r2, #0
 800064a:	2101      	movs	r1, #1
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff fe03 	bl	8000258 <GPIO_voidWriteData>
	// delay 1uS
	for(u8 i= 0; i <= 5; i++);
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
 8000656:	e002      	b.n	800065e <LCD_write_cmd_4bit+0x2a>
 8000658:	7dfb      	ldrb	r3, [r7, #23]
 800065a:	3301      	adds	r3, #1
 800065c:	75fb      	strb	r3, [r7, #23]
 800065e:	7dfb      	ldrb	r3, [r7, #23]
 8000660:	2b05      	cmp	r3, #5
 8000662:	d9f9      	bls.n	8000658 <LCD_write_cmd_4bit+0x24>
	// Enable pin is high to send the higher nipple
	GPIO_voidWriteData(lcd_ctrl_port, lcd_EN, HIGH);
 8000664:	2201      	movs	r2, #1
 8000666:	2100      	movs	r1, #0
 8000668:	2001      	movs	r0, #1
 800066a:	f7ff fdf5 	bl	8000258 <GPIO_voidWriteData>
	// delay 1uS
	for(u8 i= 0; i <= 5; i++);
 800066e:	2300      	movs	r3, #0
 8000670:	75bb      	strb	r3, [r7, #22]
 8000672:	e002      	b.n	800067a <LCD_write_cmd_4bit+0x46>
 8000674:	7dbb      	ldrb	r3, [r7, #22]
 8000676:	3301      	adds	r3, #1
 8000678:	75bb      	strb	r3, [r7, #22]
 800067a:	7dbb      	ldrb	r3, [r7, #22]
 800067c:	2b05      	cmp	r3, #5
 800067e:	d9f9      	bls.n	8000674 <LCD_write_cmd_4bit+0x40>
	// Sent the higher nipple
	u8 BitValue;
	for(u8 i= 4; i < 8; i++){
 8000680:	2304      	movs	r3, #4
 8000682:	757b      	strb	r3, [r7, #21]
 8000684:	e012      	b.n	80006ac <LCD_write_cmd_4bit+0x78>
		BitValue = get_bit(lcd_copy_cmd_4bit, i);
 8000686:	79fa      	ldrb	r2, [r7, #7]
 8000688:	7d7b      	ldrb	r3, [r7, #21]
 800068a:	fa42 f303 	asr.w	r3, r2, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	73fb      	strb	r3, [r7, #15]
		GPIO_voidWriteData(lcd_data_port, LCD_DataPins[i], BitValue);
 8000696:	7d7b      	ldrb	r3, [r7, #21]
 8000698:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <LCD_write_cmd_4bit+0x120>)
 800069a:	5cd3      	ldrb	r3, [r2, r3]
 800069c:	7bfa      	ldrb	r2, [r7, #15]
 800069e:	4619      	mov	r1, r3
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff fdd9 	bl	8000258 <GPIO_voidWriteData>
	for(u8 i= 4; i < 8; i++){
 80006a6:	7d7b      	ldrb	r3, [r7, #21]
 80006a8:	3301      	adds	r3, #1
 80006aa:	757b      	strb	r3, [r7, #21]
 80006ac:	7d7b      	ldrb	r3, [r7, #21]
 80006ae:	2b07      	cmp	r3, #7
 80006b0:	d9e9      	bls.n	8000686 <LCD_write_cmd_4bit+0x52>
	}
	// delay 1uS
	for(u8 i= 0; i <= 5; i++);
 80006b2:	2300      	movs	r3, #0
 80006b4:	753b      	strb	r3, [r7, #20]
 80006b6:	e002      	b.n	80006be <LCD_write_cmd_4bit+0x8a>
 80006b8:	7d3b      	ldrb	r3, [r7, #20]
 80006ba:	3301      	adds	r3, #1
 80006bc:	753b      	strb	r3, [r7, #20]
 80006be:	7d3b      	ldrb	r3, [r7, #20]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d9f9      	bls.n	80006b8 <LCD_write_cmd_4bit+0x84>
	// Enable pin low
	GPIO_voidWriteData(lcd_ctrl_port, lcd_EN, LOW);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff fdc5 	bl	8000258 <GPIO_voidWriteData>
	// delay 50uS
	for(u8 i= 0; i <= 54; i++);
 80006ce:	2300      	movs	r3, #0
 80006d0:	74fb      	strb	r3, [r7, #19]
 80006d2:	e002      	b.n	80006da <LCD_write_cmd_4bit+0xa6>
 80006d4:	7cfb      	ldrb	r3, [r7, #19]
 80006d6:	3301      	adds	r3, #1
 80006d8:	74fb      	strb	r3, [r7, #19]
 80006da:	7cfb      	ldrb	r3, [r7, #19]
 80006dc:	2b36      	cmp	r3, #54	; 0x36
 80006de:	d9f9      	bls.n	80006d4 <LCD_write_cmd_4bit+0xa0>
	// Enable pin is high to send the Lower nipple
	GPIO_voidWriteData(lcd_ctrl_port, lcd_EN, HIGH);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2100      	movs	r1, #0
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff fdb7 	bl	8000258 <GPIO_voidWriteData>
	// delay 1uS
	for(u8 i= 0; i <= 5; i++);
 80006ea:	2300      	movs	r3, #0
 80006ec:	74bb      	strb	r3, [r7, #18]
 80006ee:	e002      	b.n	80006f6 <LCD_write_cmd_4bit+0xc2>
 80006f0:	7cbb      	ldrb	r3, [r7, #18]
 80006f2:	3301      	adds	r3, #1
 80006f4:	74bb      	strb	r3, [r7, #18]
 80006f6:	7cbb      	ldrb	r3, [r7, #18]
 80006f8:	2b05      	cmp	r3, #5
 80006fa:	d9f9      	bls.n	80006f0 <LCD_write_cmd_4bit+0xbc>
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++){
 80006fc:	2304      	movs	r3, #4
 80006fe:	747b      	strb	r3, [r7, #17]
 8000700:	e013      	b.n	800072a <LCD_write_cmd_4bit+0xf6>
		BitValue = get_bit(lcd_copy_cmd_4bit, i-4);
 8000702:	79fa      	ldrb	r2, [r7, #7]
 8000704:	7c7b      	ldrb	r3, [r7, #17]
 8000706:	3b04      	subs	r3, #4
 8000708:	fa42 f303 	asr.w	r3, r2, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	73fb      	strb	r3, [r7, #15]
		GPIO_voidWriteData(lcd_data_port, LCD_DataPins[i], BitValue);
 8000714:	7c7b      	ldrb	r3, [r7, #17]
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <LCD_write_cmd_4bit+0x120>)
 8000718:	5cd3      	ldrb	r3, [r2, r3]
 800071a:	7bfa      	ldrb	r2, [r7, #15]
 800071c:	4619      	mov	r1, r3
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff fd9a 	bl	8000258 <GPIO_voidWriteData>
	for(u8 i= 4; i< 8; i++){
 8000724:	7c7b      	ldrb	r3, [r7, #17]
 8000726:	3301      	adds	r3, #1
 8000728:	747b      	strb	r3, [r7, #17]
 800072a:	7c7b      	ldrb	r3, [r7, #17]
 800072c:	2b07      	cmp	r3, #7
 800072e:	d9e8      	bls.n	8000702 <LCD_write_cmd_4bit+0xce>
	}
	// delay 1uS
	for(u8 i= 0; i <= 5; i++);
 8000730:	2300      	movs	r3, #0
 8000732:	743b      	strb	r3, [r7, #16]
 8000734:	e002      	b.n	800073c <LCD_write_cmd_4bit+0x108>
 8000736:	7c3b      	ldrb	r3, [r7, #16]
 8000738:	3301      	adds	r3, #1
 800073a:	743b      	strb	r3, [r7, #16]
 800073c:	7c3b      	ldrb	r3, [r7, #16]
 800073e:	2b05      	cmp	r3, #5
 8000740:	d9f9      	bls.n	8000736 <LCD_write_cmd_4bit+0x102>
	// Enable pin low
	GPIO_voidWriteData(lcd_ctrl_port, lcd_EN, LOW);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff fd86 	bl	8000258 <GPIO_voidWriteData>
}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000018 	.word	0x20000018

08000758 <LCD_function_set_4bit>:

void LCD_function_set_4bit(void ){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
	 *	No inputs for the function.
	 *
	 *	No return from the function.
	 */
	// Configure RS/RW pins to recive command
	GPIO_voidWriteData(lcd_ctrl_port, lcd_RS, LOW);
 800075e:	2200      	movs	r2, #0
 8000760:	2102      	movs	r1, #2
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff fd78 	bl	8000258 <GPIO_voidWriteData>
	GPIO_voidWriteData(lcd_ctrl_port, lcd_RW, LOW);
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff fd73 	bl	8000258 <GPIO_voidWriteData>
	// delay 1uS
	for(u8 i= 0; i <= 5; i++);
 8000772:	2300      	movs	r3, #0
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e002      	b.n	800077e <LCD_function_set_4bit+0x26>
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	3301      	adds	r3, #1
 800077c:	73fb      	strb	r3, [r7, #15]
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	2b05      	cmp	r3, #5
 8000782:	d9f9      	bls.n	8000778 <LCD_function_set_4bit+0x20>
	// Enable pin is high to send the packet
	GPIO_voidWriteData(lcd_ctrl_port, lcd_EN, HIGH);
 8000784:	2201      	movs	r2, #1
 8000786:	2100      	movs	r1, #0
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff fd65 	bl	8000258 <GPIO_voidWriteData>
	// delay 1uS
	for(u8 i= 0; i <= 5; i++);
 800078e:	2300      	movs	r3, #0
 8000790:	73bb      	strb	r3, [r7, #14]
 8000792:	e002      	b.n	800079a <LCD_function_set_4bit+0x42>
 8000794:	7bbb      	ldrb	r3, [r7, #14]
 8000796:	3301      	adds	r3, #1
 8000798:	73bb      	strb	r3, [r7, #14]
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	2b05      	cmp	r3, #5
 800079e:	d9f9      	bls.n	8000794 <LCD_function_set_4bit+0x3c>
	// Sent the higher nipple
	u8 BitValue;
	for(u8 i= 0; i< 4; i++){
 80007a0:	2300      	movs	r3, #0
 80007a2:	737b      	strb	r3, [r7, #13]
 80007a4:	e013      	b.n	80007ce <LCD_function_set_4bit+0x76>
		BitValue = get_bit(0b0010, i);
 80007a6:	7b7b      	ldrb	r3, [r7, #13]
 80007a8:	2202      	movs	r2, #2
 80007aa:	fa42 f303 	asr.w	r3, r2, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	70fb      	strb	r3, [r7, #3]
		GPIO_voidWriteData(lcd_data_port, LCD_DataPins[i+4], BitValue);
 80007b6:	7b7b      	ldrb	r3, [r7, #13]
 80007b8:	3304      	adds	r3, #4
 80007ba:	4a4e      	ldr	r2, [pc, #312]	; (80008f4 <LCD_function_set_4bit+0x19c>)
 80007bc:	5cd3      	ldrb	r3, [r2, r3]
 80007be:	78fa      	ldrb	r2, [r7, #3]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fd48 	bl	8000258 <GPIO_voidWriteData>
	for(u8 i= 0; i< 4; i++){
 80007c8:	7b7b      	ldrb	r3, [r7, #13]
 80007ca:	3301      	adds	r3, #1
 80007cc:	737b      	strb	r3, [r7, #13]
 80007ce:	7b7b      	ldrb	r3, [r7, #13]
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d9e8      	bls.n	80007a6 <LCD_function_set_4bit+0x4e>
	}
	// Enable pin Low
	GPIO_voidWriteData(lcd_ctrl_port, lcd_EN, LOW);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff fd3d 	bl	8000258 <GPIO_voidWriteData>
	// delay 50uS
	for(u8 i= 0; i <= 54; i++);
 80007de:	2300      	movs	r3, #0
 80007e0:	733b      	strb	r3, [r7, #12]
 80007e2:	e002      	b.n	80007ea <LCD_function_set_4bit+0x92>
 80007e4:	7b3b      	ldrb	r3, [r7, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	733b      	strb	r3, [r7, #12]
 80007ea:	7b3b      	ldrb	r3, [r7, #12]
 80007ec:	2b36      	cmp	r3, #54	; 0x36
 80007ee:	d9f9      	bls.n	80007e4 <LCD_function_set_4bit+0x8c>
	// Enable pin is high to send the packet
	GPIO_voidWriteData(lcd_ctrl_port, lcd_EN, HIGH);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2100      	movs	r1, #0
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fd2f 	bl	8000258 <GPIO_voidWriteData>
	// delay 1uS
	for(u8 i= 0; i <= 5; i++);
 80007fa:	2300      	movs	r3, #0
 80007fc:	72fb      	strb	r3, [r7, #11]
 80007fe:	e002      	b.n	8000806 <LCD_function_set_4bit+0xae>
 8000800:	7afb      	ldrb	r3, [r7, #11]
 8000802:	3301      	adds	r3, #1
 8000804:	72fb      	strb	r3, [r7, #11]
 8000806:	7afb      	ldrb	r3, [r7, #11]
 8000808:	2b05      	cmp	r3, #5
 800080a:	d9f9      	bls.n	8000800 <LCD_function_set_4bit+0xa8>
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++){
 800080c:	2300      	movs	r3, #0
 800080e:	72bb      	strb	r3, [r7, #10]
 8000810:	e013      	b.n	800083a <LCD_function_set_4bit+0xe2>
		BitValue = get_bit(0b0010, i);
 8000812:	7abb      	ldrb	r3, [r7, #10]
 8000814:	2202      	movs	r2, #2
 8000816:	fa42 f303 	asr.w	r3, r2, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	70fb      	strb	r3, [r7, #3]
		GPIO_voidWriteData(lcd_data_port, LCD_DataPins[i+4], BitValue);
 8000822:	7abb      	ldrb	r3, [r7, #10]
 8000824:	3304      	adds	r3, #4
 8000826:	4a33      	ldr	r2, [pc, #204]	; (80008f4 <LCD_function_set_4bit+0x19c>)
 8000828:	5cd3      	ldrb	r3, [r2, r3]
 800082a:	78fa      	ldrb	r2, [r7, #3]
 800082c:	4619      	mov	r1, r3
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff fd12 	bl	8000258 <GPIO_voidWriteData>
	for(u8 i= 0; i< 4; i++){
 8000834:	7abb      	ldrb	r3, [r7, #10]
 8000836:	3301      	adds	r3, #1
 8000838:	72bb      	strb	r3, [r7, #10]
 800083a:	7abb      	ldrb	r3, [r7, #10]
 800083c:	2b03      	cmp	r3, #3
 800083e:	d9e8      	bls.n	8000812 <LCD_function_set_4bit+0xba>
	}
	// delay 1uS
	for(u8 i= 0; i <= 5; i++);
 8000840:	2300      	movs	r3, #0
 8000842:	727b      	strb	r3, [r7, #9]
 8000844:	e002      	b.n	800084c <LCD_function_set_4bit+0xf4>
 8000846:	7a7b      	ldrb	r3, [r7, #9]
 8000848:	3301      	adds	r3, #1
 800084a:	727b      	strb	r3, [r7, #9]
 800084c:	7a7b      	ldrb	r3, [r7, #9]
 800084e:	2b05      	cmp	r3, #5
 8000850:	d9f9      	bls.n	8000846 <LCD_function_set_4bit+0xee>
	// Enable pin low
	GPIO_voidWriteData(lcd_ctrl_port, lcd_EN, LOW);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff fcfe 	bl	8000258 <GPIO_voidWriteData>
	// delay 50uS
	for(u8 i= 0; i <= 54; i++);
 800085c:	2300      	movs	r3, #0
 800085e:	723b      	strb	r3, [r7, #8]
 8000860:	e002      	b.n	8000868 <LCD_function_set_4bit+0x110>
 8000862:	7a3b      	ldrb	r3, [r7, #8]
 8000864:	3301      	adds	r3, #1
 8000866:	723b      	strb	r3, [r7, #8]
 8000868:	7a3b      	ldrb	r3, [r7, #8]
 800086a:	2b36      	cmp	r3, #54	; 0x36
 800086c:	d9f9      	bls.n	8000862 <LCD_function_set_4bit+0x10a>
	// Enable pin is high to send the packet
	GPIO_voidWriteData(lcd_ctrl_port, lcd_EN, HIGH);
 800086e:	2201      	movs	r2, #1
 8000870:	2100      	movs	r1, #0
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff fcf0 	bl	8000258 <GPIO_voidWriteData>
	// delay 1uS
	for(u8 i= 0; i <= 5; i++);
 8000878:	2300      	movs	r3, #0
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	e002      	b.n	8000884 <LCD_function_set_4bit+0x12c>
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	3301      	adds	r3, #1
 8000882:	71fb      	strb	r3, [r7, #7]
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b05      	cmp	r3, #5
 8000888:	d9f9      	bls.n	800087e <LCD_function_set_4bit+0x126>
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++){
 800088a:	2300      	movs	r3, #0
 800088c:	71bb      	strb	r3, [r7, #6]
 800088e:	e012      	b.n	80008b6 <LCD_function_set_4bit+0x15e>
		BitValue = get_bit(0b1000, i);
 8000890:	79bb      	ldrb	r3, [r7, #6]
 8000892:	2208      	movs	r2, #8
 8000894:	fa42 f303 	asr.w	r3, r2, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	70fb      	strb	r3, [r7, #3]
		GPIO_voidWriteData(lcd_data_port, i+4, BitValue);
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	3304      	adds	r3, #4
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	78fa      	ldrb	r2, [r7, #3]
 80008a8:	4619      	mov	r1, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff fcd4 	bl	8000258 <GPIO_voidWriteData>
	for(u8 i= 0; i< 4; i++){
 80008b0:	79bb      	ldrb	r3, [r7, #6]
 80008b2:	3301      	adds	r3, #1
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d9e9      	bls.n	8000890 <LCD_function_set_4bit+0x138>
	}
	// delay 1uS
	for(u8 i= 0; i <= 5; i++);
 80008bc:	2300      	movs	r3, #0
 80008be:	717b      	strb	r3, [r7, #5]
 80008c0:	e002      	b.n	80008c8 <LCD_function_set_4bit+0x170>
 80008c2:	797b      	ldrb	r3, [r7, #5]
 80008c4:	3301      	adds	r3, #1
 80008c6:	717b      	strb	r3, [r7, #5]
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	2b05      	cmp	r3, #5
 80008cc:	d9f9      	bls.n	80008c2 <LCD_function_set_4bit+0x16a>
	// Enable pin low
	GPIO_voidWriteData(lcd_ctrl_port, lcd_EN, LOW);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2001      	movs	r0, #1
 80008d4:	f7ff fcc0 	bl	8000258 <GPIO_voidWriteData>
	// delay 50uS
	for(u8 i= 0; i <= 54; i++);
 80008d8:	2300      	movs	r3, #0
 80008da:	713b      	strb	r3, [r7, #4]
 80008dc:	e002      	b.n	80008e4 <LCD_function_set_4bit+0x18c>
 80008de:	793b      	ldrb	r3, [r7, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	713b      	strb	r3, [r7, #4]
 80008e4:	793b      	ldrb	r3, [r7, #4]
 80008e6:	2b36      	cmp	r3, #54	; 0x36
 80008e8:	d9f9      	bls.n	80008de <LCD_function_set_4bit+0x186>
}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000018 	.word	0x20000018

080008f8 <LCD_init>:
*/

/******************************************************************************/

/* User interfacing functions implementation */
void LCD_init(void){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
	LCD_write_cmd_8bit(display_clear);
	// delay 2 mS
	for(u16 i= 0; i <= 10667; i++);
#elif _LCD_interface_ == _4bit_interface
	// Configure the I/O Data pins
	for(u8 i= 4; i < 8; i++){
 80008fe:	2304      	movs	r3, #4
 8000900:	73fb      	strb	r3, [r7, #15]
 8000902:	e00a      	b.n	800091a <LCD_init+0x22>
		GPIO_voidSetPinMode(lcd_data_port, LCD_DataPins[i], MODE_OUTPUT);
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	4a28      	ldr	r2, [pc, #160]	; (80009a8 <LCD_init+0xb0>)
 8000908:	5cd3      	ldrb	r3, [r2, r3]
 800090a:	2201      	movs	r2, #1
 800090c:	4619      	mov	r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff fc68 	bl	80001e4 <GPIO_voidSetPinMode>
	for(u8 i= 4; i < 8; i++){
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	3301      	adds	r3, #1
 8000918:	73fb      	strb	r3, [r7, #15]
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	2b07      	cmp	r3, #7
 800091e:	d9f1      	bls.n	8000904 <LCD_init+0xc>
	}
	// Configure the I/O control pins
	GPIO_voidSetPinMode(lcd_ctrl_port, lcd_EN, MODE_OUTPUT);
 8000920:	2201      	movs	r2, #1
 8000922:	2100      	movs	r1, #0
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fc5d 	bl	80001e4 <GPIO_voidSetPinMode>
	GPIO_voidSetPinMode(lcd_ctrl_port, lcd_RW, MODE_OUTPUT);
 800092a:	2201      	movs	r2, #1
 800092c:	2101      	movs	r1, #1
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff fc58 	bl	80001e4 <GPIO_voidSetPinMode>
	GPIO_voidSetPinMode(lcd_ctrl_port, lcd_RS, MODE_OUTPUT);
 8000934:	2201      	movs	r2, #1
 8000936:	2102      	movs	r1, #2
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fc53 	bl	80001e4 <GPIO_voidSetPinMode>

	// delay 50 mS
	for(u32 i= 0; i <= 266667; i++);
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	e002      	b.n	800094a <LCD_init+0x52>
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	3301      	adds	r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	4a17      	ldr	r2, [pc, #92]	; (80009ac <LCD_init+0xb4>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d9f8      	bls.n	8000944 <LCD_init+0x4c>
	// Send the function set command
	LCD_function_set_4bit();
 8000952:	f7ff ff01 	bl	8000758 <LCD_function_set_4bit>
	// delay 50uS
	for(u8 i= 0; i <= 54; i++);
 8000956:	2300      	movs	r3, #0
 8000958:	71fb      	strb	r3, [r7, #7]
 800095a:	e002      	b.n	8000962 <LCD_init+0x6a>
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	3301      	adds	r3, #1
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b36      	cmp	r3, #54	; 0x36
 8000966:	d9f9      	bls.n	800095c <LCD_init+0x64>
	// Send the display on command
	LCD_write_cmd_4bit(display_on);
 8000968:	200c      	movs	r0, #12
 800096a:	f7ff fe63 	bl	8000634 <LCD_write_cmd_4bit>
	// delay 50uS
	for(u8 i= 0; i <= 54; i++);
 800096e:	2300      	movs	r3, #0
 8000970:	71bb      	strb	r3, [r7, #6]
 8000972:	e002      	b.n	800097a <LCD_init+0x82>
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	3301      	adds	r3, #1
 8000978:	71bb      	strb	r3, [r7, #6]
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	2b36      	cmp	r3, #54	; 0x36
 800097e:	d9f9      	bls.n	8000974 <LCD_init+0x7c>
	// Send the display clean command
	LCD_write_cmd_4bit(display_clear);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff fe57 	bl	8000634 <LCD_write_cmd_4bit>
	// delay 2 mS
	for(u16 i= 0; i <= 10667; i++);
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	e002      	b.n	8000992 <LCD_init+0x9a>
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	3301      	adds	r3, #1
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	f642 12ab 	movw	r2, #10667	; 0x29ab
 8000998:	4293      	cmp	r3, r2
 800099a:	d9f7      	bls.n	800098c <LCD_init+0x94>
#endif
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000018 	.word	0x20000018
 80009ac:	000411ab 	.word	0x000411ab

080009b0 <RCC_voidInitSysClock>:
												*( M N P Q )      	: By #define


*/
void RCC_voidInitSysClock(void )
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

	// Configuring the clock source

#if		RCC_Clk_SRC == RCC_HSI
	// Set the HSI on bit to enable
	set_bit(RCC_CR, RCC_HSION_bit);
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <RCC_voidInitSysClock+0x84>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <RCC_voidInitSysClock+0x84>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6013      	str	r3, [r2, #0]
	#endif

#endif

	// Mask the clock configuration register
	RCC_PLLCFGR &= RCC_CFGR_mask;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <RCC_voidInitSysClock+0x88>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <RCC_voidInitSysClock+0x88>)
 80009c6:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80009ca:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80009ce:	6013      	str	r3, [r2, #0]
	//while(get_bit(RCC_CR, RCC_PLLRDY_bit));

#else
	#if		RCC_Clk_SRC == RCC_HSI
		// Select the HSI clk source
		RCC_PLLCFGR |= RCC_HSI_Clk_Src;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <RCC_voidInitSysClock+0x88>)
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <RCC_voidInitSysClock+0x88>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6013      	str	r3, [r2, #0]

	#endif
#endif

	// Setting the AHP pre-scaler
	RCC_CFGR |= (RCC_HPRE << RCC_PRE_bit);
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <RCC_voidInitSysClock+0x8c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <RCC_voidInitSysClock+0x8c>)
 80009de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e2:	6013      	str	r3, [r2, #0]
	// Setting the APB1 pre-scaler
	RCC_CFGR |= (RCC_PPRE1 << RCC_PPRE1_bit);
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <RCC_voidInitSysClock+0x8c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <RCC_voidInitSysClock+0x8c>)
 80009ea:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80009ee:	6013      	str	r3, [r2, #0]
	// Setting the APB2 pre-scaler
	RCC_CFGR |= (RCC_PPRE2 << RCC_PPRE2_bit);
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <RCC_voidInitSysClock+0x8c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <RCC_voidInitSysClock+0x8c>)
 80009f6:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 80009fa:	6013      	str	r3, [r2, #0]

	// Enable and disable peripherals of Bus AHB1
	RCC_AHB1ENR |= RCC_AHB1LPENR_init;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <RCC_voidInitSysClock+0x90>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <RCC_voidInitSysClock+0x90>)
 8000a02:	f043 0303 	orr.w	r3, r3, #3
 8000a06:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus AHB1
	RCC_AHB2ENR |= RCC_AHB2LPENR_init;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <RCC_voidInitSysClock+0x94>)
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <RCC_voidInitSysClock+0x94>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus ABP1
	RCC_APB1ENR |= RCC_APB1LPENR_init;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <RCC_voidInitSysClock+0x98>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <RCC_voidInitSysClock+0x98>)
 8000a16:	f043 030f 	orr.w	r3, r3, #15
 8000a1a:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus ABP2
	RCC_APB2ENR |= RCC_APB2LPENR_init;
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <RCC_voidInitSysClock+0x9c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <RCC_voidInitSysClock+0x9c>)
 8000a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40023804 	.word	0x40023804
 8000a3c:	40023808 	.word	0x40023808
 8000a40:	40023830 	.word	0x40023830
 8000a44:	40023834 	.word	0x40023834
 8000a48:	40023840 	.word	0x40023840
 8000a4c:	40023844 	.word	0x40023844

08000a50 <main>:
#include "../Inc/GPIO/GPIO_interface.h"
#include "../Inc/ICU/ICU_interface.h"
#include "../Inc/LCD/LCD_interface.h"

int main( void )
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

	RCC_voidInitSysClock();
 8000a54:	f7ff ffac 	bl	80009b0 <RCC_voidInitSysClock>
	GPIO_voidSysInit();
 8000a58:	f7ff fbbc 	bl	80001d4 <GPIO_voidSysInit>
	GPIO_voidSetPinMode(GPIOA_PORT, PIN0, MODE_ALTF);
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fbbf 	bl	80001e4 <GPIO_voidSetPinMode>
	GPIO_voidPinSetAltFn(GPIOA_PORT, PIN0, (0b0010u));
 8000a66:	2202      	movs	r2, #2
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fc2a 	bl	80002c4 <GPIO_voidPinSetAltFn>
	GPIO_voidSetPinMode(GPIOA_PORT, PIN1, MODE_ALTF);
 8000a70:	2202      	movs	r2, #2
 8000a72:	2101      	movs	r1, #1
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff fbb5 	bl	80001e4 <GPIO_voidSetPinMode>
	GPIO_voidPinSetAltFn(GPIOA_PORT, PIN1, (0b0010u));
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff fc20 	bl	80002c4 <GPIO_voidPinSetAltFn>
	GPIO_voidSetPinMode(GPIOA_PORT, PIN2, MODE_ALTF);
 8000a84:	2202      	movs	r2, #2
 8000a86:	2102      	movs	r1, #2
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fbab 	bl	80001e4 <GPIO_voidSetPinMode>
	GPIO_voidPinSetAltFn(GPIOA_PORT, PIN2, (0b0010u));
 8000a8e:	2202      	movs	r2, #2
 8000a90:	2102      	movs	r1, #2
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff fc16 	bl	80002c4 <GPIO_voidPinSetAltFn>
	ICU_u8Init(TIMER5ID);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f7ff fc9b 	bl	80003d4 <ICU_u8Init>
	LCD_init();
 8000a9e:	f7ff ff2b 	bl	80008f8 <LCD_init>
    ICU_u8StartTim(TIMER5ID);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f7ff fd00 	bl	80004a8 <ICU_u8StartTim>
    ICU_u8StartCh(TIMER5ID, CH1ID);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff fd34 	bl	8000518 <ICU_u8StartCh>
    ICU_u8StartCh(TIMER5ID, CH2ID);
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fd30 	bl	8000518 <ICU_u8StartCh>
    ICU_u8StartCh(TIMER5ID, CH3ID);
 8000ab8:	2102      	movs	r1, #2
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fd2c 	bl	8000518 <ICU_u8StartCh>


	/* Loop forever */
	while( 1 )
 8000ac0:	e7fe      	b.n	8000ac0 <main+0x70>
	...

08000ac4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ac6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <LoopForever+0xe>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	; (8000b10 <LoopForever+0x16>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000af2:	f000 f811 	bl	8000b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff ffab 	bl	8000a50 <main>

08000afa <LoopForever>:

LoopForever:
  b LoopForever
 8000afa:	e7fe      	b.n	8000afa <LoopForever>
  ldr   r0, =_estack
 8000afc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b08:	08000b80 	.word	0x08000b80
  ldr r2, =_sbss
 8000b0c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b10:	20000040 	.word	0x20000040

08000b14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC_IRQHandler>
	...

08000b18 <__libc_init_array>:
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	4d0d      	ldr	r5, [pc, #52]	; (8000b50 <__libc_init_array+0x38>)
 8000b1c:	4c0d      	ldr	r4, [pc, #52]	; (8000b54 <__libc_init_array+0x3c>)
 8000b1e:	1b64      	subs	r4, r4, r5
 8000b20:	10a4      	asrs	r4, r4, #2
 8000b22:	2600      	movs	r6, #0
 8000b24:	42a6      	cmp	r6, r4
 8000b26:	d109      	bne.n	8000b3c <__libc_init_array+0x24>
 8000b28:	4d0b      	ldr	r5, [pc, #44]	; (8000b58 <__libc_init_array+0x40>)
 8000b2a:	4c0c      	ldr	r4, [pc, #48]	; (8000b5c <__libc_init_array+0x44>)
 8000b2c:	f000 f818 	bl	8000b60 <_init>
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	10a4      	asrs	r4, r4, #2
 8000b34:	2600      	movs	r6, #0
 8000b36:	42a6      	cmp	r6, r4
 8000b38:	d105      	bne.n	8000b46 <__libc_init_array+0x2e>
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b40:	4798      	blx	r3
 8000b42:	3601      	adds	r6, #1
 8000b44:	e7ee      	b.n	8000b24 <__libc_init_array+0xc>
 8000b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b4a:	4798      	blx	r3
 8000b4c:	3601      	adds	r6, #1
 8000b4e:	e7f2      	b.n	8000b36 <__libc_init_array+0x1e>
 8000b50:	08000b78 	.word	0x08000b78
 8000b54:	08000b78 	.word	0x08000b78
 8000b58:	08000b78 	.word	0x08000b78
 8000b5c:	08000b7c 	.word	0x08000b7c

08000b60 <_init>:
 8000b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b62:	bf00      	nop
 8000b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b66:	bc08      	pop	{r3}
 8000b68:	469e      	mov	lr, r3
 8000b6a:	4770      	bx	lr

08000b6c <_fini>:
 8000b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6e:	bf00      	nop
 8000b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b72:	bc08      	pop	{r3}
 8000b74:	469e      	mov	lr, r3
 8000b76:	4770      	bx	lr
