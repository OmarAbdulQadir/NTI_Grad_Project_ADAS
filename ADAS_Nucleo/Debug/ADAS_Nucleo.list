
ADAS_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000710  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008a4  080008a4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008a4  080008a4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080008a4  080008a4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008a4  080008a4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008a4  080008a4  000108a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008a8  080008a8  000108a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080008ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000018  080008c4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080008c4  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006ab  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000033e  00000000  00000000  00020736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000100  00000000  00000000  00020a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ae  00000000  00000000  00020b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000807  00000000  00000000  00020c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000812  00000000  00000000  0002142d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005801  00000000  00000000  00021c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000002bc  00000000  00000000  00027440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000276fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800088c 	.word	0x0800088c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	0800088c 	.word	0x0800088c

080001d4 <GPIO_voidSysInit>:

/**********************************************************************************
 *******************		 		GPIO_voidSysInit				***************
 **********************************************************************************/
/*		Function configure the GPIO peripherals initially		*/
void GPIO_voidSysInit(void ){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
		GPIO_bases[GPIOH_PORT] -> AFRL = GPIOA_CONFIG_AFRL;
		GPIO_bases[GPIOH_PORT] -> AFRH = GPIOA_CONFIG_AFRH;

	#endif

}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
	...

080001e4 <GPIO_voidSetPinMode>:
									MODE_ALTF
									MODE_ANALOG	

*/
void GPIO_voidSetPinMode(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8MODE)
 {
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
 80001ee:	460b      	mov	r3, r1
 80001f0:	71bb      	strb	r3, [r7, #6]
 80001f2:	4613      	mov	r3, r2
 80001f4:	717b      	strb	r3, [r7, #5]
	 if((copy_u8PORT <= GPIOH_PORT) && (copy_u8PIN <= PIN15) && (copy_u8MODE <= MODE_ANALOG)){
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b05      	cmp	r3, #5
 80001fa:	d825      	bhi.n	8000248 <GPIO_voidSetPinMode+0x64>
 80001fc:	79bb      	ldrb	r3, [r7, #6]
 80001fe:	2b0f      	cmp	r3, #15
 8000200:	d822      	bhi.n	8000248 <GPIO_voidSetPinMode+0x64>
 8000202:	797b      	ldrb	r3, [r7, #5]
 8000204:	2b03      	cmp	r3, #3
 8000206:	d81f      	bhi.n	8000248 <GPIO_voidSetPinMode+0x64>

		 GPIO_bases[copy_u8PORT] -> MODER &= GPIO_MODER_MASK( copy_u8PIN * 2 );
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	4a12      	ldr	r2, [pc, #72]	; (8000254 <GPIO_voidSetPinMode+0x70>)
 800020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000210:	6819      	ldr	r1, [r3, #0]
 8000212:	79bb      	ldrb	r3, [r7, #6]
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	2203      	movs	r2, #3
 8000218:	fa02 f303 	lsl.w	r3, r2, r3
 800021c:	43da      	mvns	r2, r3
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	480c      	ldr	r0, [pc, #48]	; (8000254 <GPIO_voidSetPinMode+0x70>)
 8000222:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000226:	400a      	ands	r2, r1
 8000228:	601a      	str	r2, [r3, #0]
		 GPIO_bases[copy_u8PORT] -> MODER |= ( ( ( u32 ) copy_u8MODE ) << ( copy_u8PIN * 2 ) );
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	4a09      	ldr	r2, [pc, #36]	; (8000254 <GPIO_voidSetPinMode+0x70>)
 800022e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000232:	6819      	ldr	r1, [r3, #0]
 8000234:	797a      	ldrb	r2, [r7, #5]
 8000236:	79bb      	ldrb	r3, [r7, #6]
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	409a      	lsls	r2, r3
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <GPIO_voidSetPinMode+0x70>)
 8000240:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000244:	430a      	orrs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]

	 }
	 else{

	 }
 }
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	20000000 	.word	0x20000000

08000258 <GPIO_voidPinSetAltFn>:
 **********************************************************************************/  
/*
			Function Set The AltFn		: Every Pin Need 4 Bits SO We Have High AND Low
*/
void GPIO_voidPinSetAltFn(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8AlT)
{
 8000258:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800025c:	b082      	sub	sp, #8
 800025e:	af00      	add	r7, sp, #0
 8000260:	4603      	mov	r3, r0
 8000262:	71fb      	strb	r3, [r7, #7]
 8000264:	460b      	mov	r3, r1
 8000266:	71bb      	strb	r3, [r7, #6]
 8000268:	4613      	mov	r3, r2
 800026a:	717b      	strb	r3, [r7, #5]
	if((copy_u8PORT <= GPIOH_PORT) && (copy_u8PIN <= PIN15) && (copy_u8AlT <= GPIO_AFR_MAX)){
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	2b05      	cmp	r3, #5
 8000270:	d873      	bhi.n	800035a <GPIO_voidPinSetAltFn+0x102>
 8000272:	79bb      	ldrb	r3, [r7, #6]
 8000274:	2b0f      	cmp	r3, #15
 8000276:	d870      	bhi.n	800035a <GPIO_voidPinSetAltFn+0x102>
 8000278:	797b      	ldrb	r3, [r7, #5]
 800027a:	2b0f      	cmp	r3, #15
 800027c:	d86d      	bhi.n	800035a <GPIO_voidPinSetAltFn+0x102>
		if(copy_u8PIN <= PIN7)
 800027e:	79bb      	ldrb	r3, [r7, #6]
 8000280:	2b07      	cmp	r3, #7
 8000282:	d833      	bhi.n	80002ec <GPIO_voidPinSetAltFn+0x94>
		{
			GPIO_bases[copy_u8PORT] -> AFRL &= GPIO_AFR_MASK( copy_u8PIN * 4 );
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	4a38      	ldr	r2, [pc, #224]	; (8000368 <GPIO_voidPinSetAltFn+0x110>)
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	6a1b      	ldr	r3, [r3, #32]
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	79bb      	ldrb	r3, [r7, #6]
 8000292:	0099      	lsls	r1, r3, #2
 8000294:	f04f 020f 	mov.w	r2, #15
 8000298:	f04f 0300 	mov.w	r3, #0
 800029c:	f1a1 0620 	sub.w	r6, r1, #32
 80002a0:	f1c1 0020 	rsb	r0, r1, #32
 80002a4:	fa03 f901 	lsl.w	r9, r3, r1
 80002a8:	fa02 f606 	lsl.w	r6, r2, r6
 80002ac:	ea49 0906 	orr.w	r9, r9, r6
 80002b0:	fa22 f000 	lsr.w	r0, r2, r0
 80002b4:	ea49 0900 	orr.w	r9, r9, r0
 80002b8:	fa02 f801 	lsl.w	r8, r2, r1
 80002bc:	4643      	mov	r3, r8
 80002be:	43da      	mvns	r2, r3
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4929      	ldr	r1, [pc, #164]	; (8000368 <GPIO_voidPinSetAltFn+0x110>)
 80002c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c8:	6839      	ldr	r1, [r7, #0]
 80002ca:	400a      	ands	r2, r1
 80002cc:	621a      	str	r2, [r3, #32]
			GPIO_bases[copy_u8PORT] -> AFRL |= ( ( ( u32 ) copy_u8AlT ) << copy_u8PIN * 4 );
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4a25      	ldr	r2, [pc, #148]	; (8000368 <GPIO_voidPinSetAltFn+0x110>)
 80002d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d6:	6a19      	ldr	r1, [r3, #32]
 80002d8:	797a      	ldrb	r2, [r7, #5]
 80002da:	79bb      	ldrb	r3, [r7, #6]
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	409a      	lsls	r2, r3
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	4821      	ldr	r0, [pc, #132]	; (8000368 <GPIO_voidPinSetAltFn+0x110>)
 80002e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80002e8:	430a      	orrs	r2, r1
 80002ea:	621a      	str	r2, [r3, #32]
		}
		if(copy_u8PIN > PIN7)
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	2b07      	cmp	r3, #7
 80002f0:	d933      	bls.n	800035a <GPIO_voidPinSetAltFn+0x102>
		{
			GPIO_bases[copy_u8PORT] -> AFRH &= GPIO_AFR_MASK( ( copy_u8PIN - PIN8 ) * 4 );
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <GPIO_voidPinSetAltFn+0x110>)
 80002f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002fc:	603b      	str	r3, [r7, #0]
 80002fe:	79bb      	ldrb	r3, [r7, #6]
 8000300:	3b08      	subs	r3, #8
 8000302:	0099      	lsls	r1, r3, #2
 8000304:	f04f 020f 	mov.w	r2, #15
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	f1a1 0620 	sub.w	r6, r1, #32
 8000310:	f1c1 0020 	rsb	r0, r1, #32
 8000314:	fa03 f501 	lsl.w	r5, r3, r1
 8000318:	fa02 f606 	lsl.w	r6, r2, r6
 800031c:	4335      	orrs	r5, r6
 800031e:	fa22 f000 	lsr.w	r0, r2, r0
 8000322:	4305      	orrs	r5, r0
 8000324:	fa02 f401 	lsl.w	r4, r2, r1
 8000328:	4623      	mov	r3, r4
 800032a:	43da      	mvns	r2, r3
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	490e      	ldr	r1, [pc, #56]	; (8000368 <GPIO_voidPinSetAltFn+0x110>)
 8000330:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000334:	6839      	ldr	r1, [r7, #0]
 8000336:	400a      	ands	r2, r1
 8000338:	625a      	str	r2, [r3, #36]	; 0x24
			GPIO_bases[copy_u8PORT] -> AFRH |= ( ( ( u32 ) copy_u8AlT ) << ( copy_u8PIN - PIN8 ) * 4 );
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <GPIO_voidPinSetAltFn+0x110>)
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000344:	797a      	ldrb	r2, [r7, #5]
 8000346:	79bb      	ldrb	r3, [r7, #6]
 8000348:	3b08      	subs	r3, #8
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	409a      	lsls	r2, r3
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	4805      	ldr	r0, [pc, #20]	; (8000368 <GPIO_voidPinSetAltFn+0x110>)
 8000352:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000356:	430a      	orrs	r2, r1
 8000358:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	20000000 	.word	0x20000000

0800036c <PWM_u8Init>:
/* Initialize timer registers */
/*< Driver Should contain a static global flag to ensure that init is done before use and do not allow re-init >*/
static u8 init_Tim3_Is_Done = 0;
static u8 init_Tim4_Is_Done = 0;

u8 PWM_u8Init(u8 timerID) {
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	if (((timerID == TIM3_ID) || (timerID == TIM4_ID))) {
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d003      	beq.n	8000384 <PWM_u8Init+0x18>
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	2b04      	cmp	r3, #4
 8000380:	f040 8092 	bne.w	80004a8 <PWM_u8Init+0x13c>

		switch (timerID) {
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2b03      	cmp	r3, #3
 8000388:	d002      	beq.n	8000390 <PWM_u8Init+0x24>
 800038a:	2b04      	cmp	r3, #4
 800038c:	d044      	beq.n	8000418 <PWM_u8Init+0xac>
 800038e:	e089      	b.n	80004a4 <PWM_u8Init+0x138>
		case TIM3_ID:
			if (init_Tim3_Is_Done == 0) {
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <PWM_u8Init+0x14c>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	f040 8082 	bne.w	800049e <PWM_u8Init+0x132>
				init_Tim3_Is_Done = 1u;
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <PWM_u8Init+0x14c>)
 800039c:	2201      	movs	r2, #1
 800039e:	701a      	strb	r2, [r3, #0]
				switch (DIRECTION) {
				case UPCOUNTER:
					agn_bit(TIM3_CR1, DIR, UPCOUNTER)
 80003a0:	4b46      	ldr	r3, [pc, #280]	; (80004bc <PWM_u8Init+0x150>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a45      	ldr	r2, [pc, #276]	; (80004bc <PWM_u8Init+0x150>)
 80003a6:	f023 0310 	bic.w	r3, r3, #16
 80003aa:	6013      	str	r3, [r2, #0]
					;
					break;
 80003ac:	bf00      	nop
				}

				/*auto reload preload register*/
				switch (AUTO_RELOAD_PRELOAD) {
				case EN_AUTO_RELOAD_PRELOAD:
					agn_bit(TIM3_CR1, ARPE, EN_AUTO_RELOAD_PRELOAD)
 80003ae:	4b43      	ldr	r3, [pc, #268]	; (80004bc <PWM_u8Init+0x150>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a42      	ldr	r2, [pc, #264]	; (80004bc <PWM_u8Init+0x150>)
 80003b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b8:	6013      	str	r3, [r2, #0]
					;
					break;
 80003ba:	bf00      	nop
				}

				/*PWM mode 1*/
				switch (PWM_MODE) {
				case PWM_MODE1:
					clr_bit(TIM3_CCMR2, OC4M0);
 80003bc:	4b40      	ldr	r3, [pc, #256]	; (80004c0 <PWM_u8Init+0x154>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a3f      	ldr	r2, [pc, #252]	; (80004c0 <PWM_u8Init+0x154>)
 80003c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003c6:	6013      	str	r3, [r2, #0]
					set_bit(TIM3_CCMR2, OC4M1);
 80003c8:	4b3d      	ldr	r3, [pc, #244]	; (80004c0 <PWM_u8Init+0x154>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a3c      	ldr	r2, [pc, #240]	; (80004c0 <PWM_u8Init+0x154>)
 80003ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003d2:	6013      	str	r3, [r2, #0]
					set_bit(TIM3_CCMR2, OC4M2);
 80003d4:	4b3a      	ldr	r3, [pc, #232]	; (80004c0 <PWM_u8Init+0x154>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a39      	ldr	r2, [pc, #228]	; (80004c0 <PWM_u8Init+0x154>)
 80003da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003de:	6013      	str	r3, [r2, #0]
					break;
 80003e0:	bf00      	nop
					set_bit(TIM3_CCMR2, OC4M2);
					break;
				}

				/*enable output compare 1 preload*/
				set_bit(TIM3_CCMR2, OC4PE);
 80003e2:	4b37      	ldr	r3, [pc, #220]	; (80004c0 <PWM_u8Init+0x154>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a36      	ldr	r2, [pc, #216]	; (80004c0 <PWM_u8Init+0x154>)
 80003e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ec:	6013      	str	r3, [r2, #0]

				/*Active high polarity*/
				switch (OUTPUT_POLARITY) {
				case ACTIVE_HIGH_POL:
					agn_bit(TIM3_CCER, CC4P, ACTIVE_HIGH_POL)
 80003ee:	4b35      	ldr	r3, [pc, #212]	; (80004c4 <PWM_u8Init+0x158>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a34      	ldr	r2, [pc, #208]	; (80004c4 <PWM_u8Init+0x158>)
 80003f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80003f8:	6013      	str	r3, [r2, #0]
					;
					break;
 80003fa:	bf00      	nop
					agn_bit(TIM3_CCER, CC4P, ACTIVE_LOW_POL)
					;
					break;
				}

				TIM3_PSC = PRESCALER;
 80003fc:	4b32      	ldr	r3, [pc, #200]	; (80004c8 <PWM_u8Init+0x15c>)
 80003fe:	f240 623f 	movw	r2, #1599	; 0x63f
 8000402:	601a      	str	r2, [r3, #0]
				TIM3_ARR = AUTO_RELOAD_VAL;
 8000404:	4b31      	ldr	r3, [pc, #196]	; (80004cc <PWM_u8Init+0x160>)
 8000406:	22ff      	movs	r2, #255	; 0xff
 8000408:	601a      	str	r2, [r3, #0]

				/*initialize all the registers*/
				set_bit(TIM3_EGR, UG);
 800040a:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <PWM_u8Init+0x164>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a30      	ldr	r2, [pc, #192]	; (80004d0 <PWM_u8Init+0x164>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6013      	str	r3, [r2, #0]
			}
			else{

			}
			break;
 8000416:	e042      	b.n	800049e <PWM_u8Init+0x132>




		case TIM4_ID:
			if (init_Tim4_Is_Done == 0) {
 8000418:	4b2e      	ldr	r3, [pc, #184]	; (80004d4 <PWM_u8Init+0x168>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d140      	bne.n	80004a2 <PWM_u8Init+0x136>
				init_Tim4_Is_Done = 1u;
 8000420:	4b2c      	ldr	r3, [pc, #176]	; (80004d4 <PWM_u8Init+0x168>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
				switch (DIRECTION) {
				case UPCOUNTER:
					agn_bit(TIM4_CR1, DIR, UPCOUNTER)
 8000426:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <PWM_u8Init+0x16c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a2b      	ldr	r2, [pc, #172]	; (80004d8 <PWM_u8Init+0x16c>)
 800042c:	f023 0310 	bic.w	r3, r3, #16
 8000430:	6013      	str	r3, [r2, #0]
					;
					break;
 8000432:	bf00      	nop
				}

				/*auto reload preload register*/
				switch (AUTO_RELOAD_PRELOAD) {
				case EN_AUTO_RELOAD_PRELOAD:
					agn_bit(TIM4_CR1, ARPE, EN_AUTO_RELOAD_PRELOAD)
 8000434:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <PWM_u8Init+0x16c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a27      	ldr	r2, [pc, #156]	; (80004d8 <PWM_u8Init+0x16c>)
 800043a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800043e:	6013      	str	r3, [r2, #0]
					;
					break;
 8000440:	bf00      	nop
				}

				/*PWM mode 1*/
				switch (PWM_MODE) {
				case PWM_MODE1:
					clr_bit(TIM4_CCMR2, OC4M0);
 8000442:	4b26      	ldr	r3, [pc, #152]	; (80004dc <PWM_u8Init+0x170>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a25      	ldr	r2, [pc, #148]	; (80004dc <PWM_u8Init+0x170>)
 8000448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800044c:	6013      	str	r3, [r2, #0]
					set_bit(TIM4_CCMR2, OC4M1);
 800044e:	4b23      	ldr	r3, [pc, #140]	; (80004dc <PWM_u8Init+0x170>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a22      	ldr	r2, [pc, #136]	; (80004dc <PWM_u8Init+0x170>)
 8000454:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000458:	6013      	str	r3, [r2, #0]
					set_bit(TIM4_CCMR2, OC4M2);
 800045a:	4b20      	ldr	r3, [pc, #128]	; (80004dc <PWM_u8Init+0x170>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a1f      	ldr	r2, [pc, #124]	; (80004dc <PWM_u8Init+0x170>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000464:	6013      	str	r3, [r2, #0]
					break;
 8000466:	bf00      	nop
					set_bit(TIM4_CCMR2, OC4M2);
					break;
				}

				/*enable output compare 1 preload*/
				set_bit(TIM4_CCMR2, OC4PE);
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <PWM_u8Init+0x170>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a1b      	ldr	r2, [pc, #108]	; (80004dc <PWM_u8Init+0x170>)
 800046e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000472:	6013      	str	r3, [r2, #0]

				/*Active high polarity*/
				switch (OUTPUT_POLARITY) {
				case ACTIVE_HIGH_POL:
					agn_bit(TIM4_CCER, CC4P, ACTIVE_HIGH_POL)
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <PWM_u8Init+0x174>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a19      	ldr	r2, [pc, #100]	; (80004e0 <PWM_u8Init+0x174>)
 800047a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800047e:	6013      	str	r3, [r2, #0]
					;
					break;
 8000480:	bf00      	nop
					agn_bit(TIM4_CCER, CC4P, ACTIVE_LOW_POL)
					;
					break;
				}

				TIM4_PSC = PRESCALER;
 8000482:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <PWM_u8Init+0x178>)
 8000484:	f240 623f 	movw	r2, #1599	; 0x63f
 8000488:	601a      	str	r2, [r3, #0]
				TIM4_ARR = AUTO_RELOAD_VAL;
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <PWM_u8Init+0x17c>)
 800048c:	22ff      	movs	r2, #255	; 0xff
 800048e:	601a      	str	r2, [r3, #0]

				/*initialize all the registers*/
				set_bit(TIM4_EGR, UG);
 8000490:	4b16      	ldr	r3, [pc, #88]	; (80004ec <PWM_u8Init+0x180>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a15      	ldr	r2, [pc, #84]	; (80004ec <PWM_u8Init+0x180>)
 8000496:	f043 0301 	orr.w	r3, r3, #1
 800049a:	6013      	str	r3, [r2, #0]
			}
			else{

			}
			break;
 800049c:	e001      	b.n	80004a2 <PWM_u8Init+0x136>
			break;
 800049e:	bf00      	nop
 80004a0:	e000      	b.n	80004a4 <PWM_u8Init+0x138>
			break;
 80004a2:	bf00      	nop

		}
		return STD_TRUE;
 80004a4:	2301      	movs	r3, #1
 80004a6:	e000      	b.n	80004aa <PWM_u8Init+0x13e>
	} else {
		return STD_FALSE;
 80004a8:	2300      	movs	r3, #0
	}
	/*< All IFs should have an else :: Misra C >*/

}
 80004aa:	4618      	mov	r0, r3
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	20000034 	.word	0x20000034
 80004bc:	40000400 	.word	0x40000400
 80004c0:	4000041c 	.word	0x4000041c
 80004c4:	40000420 	.word	0x40000420
 80004c8:	40000428 	.word	0x40000428
 80004cc:	4000042c 	.word	0x4000042c
 80004d0:	40000414 	.word	0x40000414
 80004d4:	20000035 	.word	0x20000035
 80004d8:	40000800 	.word	0x40000800
 80004dc:	4000081c 	.word	0x4000081c
 80004e0:	40000820 	.word	0x40000820
 80004e4:	40000828 	.word	0x40000828
 80004e8:	4000082c 	.word	0x4000082c
 80004ec:	40000814 	.word	0x40000814

080004f0 <PWM_u8Start>:





u8 PWM_u8Start(u8 timerID, u8 duty) {
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	71bb      	strb	r3, [r7, #6]
	if ((timerID == TIM3_ID) || (timerID == TIM4_ID)) {
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	2b03      	cmp	r3, #3
 8000504:	d002      	beq.n	800050c <PWM_u8Start+0x1c>
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b04      	cmp	r3, #4
 800050a:	d13d      	bne.n	8000588 <PWM_u8Start+0x98>
		switch (timerID) {
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	2b03      	cmp	r3, #3
 8000510:	d002      	beq.n	8000518 <PWM_u8Start+0x28>
 8000512:	2b04      	cmp	r3, #4
 8000514:	d01b      	beq.n	800054e <PWM_u8Start+0x5e>
 8000516:	e035      	b.n	8000584 <PWM_u8Start+0x94>
		case TIM3_ID:
			/* map duty from 0-100 to 0-255*/
			if ((duty >= 0) && (duty <= 100)) {
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	2b64      	cmp	r3, #100	; 0x64
 800051c:	d809      	bhi.n	8000532 <PWM_u8Start+0x42>
				TIM3_CCR4 = ((u16) 255 * duty) / 100;
 800051e:	79ba      	ldrb	r2, [r7, #6]
 8000520:	4613      	mov	r3, r2
 8000522:	021b      	lsls	r3, r3, #8
 8000524:	1a9b      	subs	r3, r3, r2
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <PWM_u8Start+0xa8>)
 8000528:	491c      	ldr	r1, [pc, #112]	; (800059c <PWM_u8Start+0xac>)
 800052a:	fba1 1303 	umull	r1, r3, r1, r3
 800052e:	095b      	lsrs	r3, r3, #5
 8000530:	6013      	str	r3, [r2, #0]
			} else {

			}

			/*enable counter*/
			set_bit(TIM3_CR1, CEN);
 8000532:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <PWM_u8Start+0xb0>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a1a      	ldr	r2, [pc, #104]	; (80005a0 <PWM_u8Start+0xb0>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6013      	str	r3, [r2, #0]
				break;
			case CHANNEL3_ID:
				set_bit(TIM3_CCER, CC3E);
				break;
			case CHANNEL4_ID:
				set_bit(TIM3_CCER, CC4E);
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <PWM_u8Start+0xb4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a18      	ldr	r2, [pc, #96]	; (80005a4 <PWM_u8Start+0xb4>)
 8000544:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000548:	6013      	str	r3, [r2, #0]
				break;
 800054a:	bf00      	nop
			}
			/*< Feeding the Compare register with the new values should by done before enable and not vise versa >*/

			break;
 800054c:	e01a      	b.n	8000584 <PWM_u8Start+0x94>
		case TIM4_ID:
			if ((duty >= 0) && (duty <= 100)) {
 800054e:	79bb      	ldrb	r3, [r7, #6]
 8000550:	2b64      	cmp	r3, #100	; 0x64
 8000552:	d809      	bhi.n	8000568 <PWM_u8Start+0x78>
				TIM4_CCR4 = ((u16) 255 * duty) / 100;
 8000554:	79ba      	ldrb	r2, [r7, #6]
 8000556:	4613      	mov	r3, r2
 8000558:	021b      	lsls	r3, r3, #8
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <PWM_u8Start+0xb8>)
 800055e:	490f      	ldr	r1, [pc, #60]	; (800059c <PWM_u8Start+0xac>)
 8000560:	fba1 1303 	umull	r1, r3, r1, r3
 8000564:	095b      	lsrs	r3, r3, #5
 8000566:	6013      	str	r3, [r2, #0]
			} else {

			}
			/*enable counter*/
			set_bit(TIM4_CR1, CEN);
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <PWM_u8Start+0xbc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <PWM_u8Start+0xbc>)
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	6013      	str	r3, [r2, #0]
				break;
			case CHANNEL3_ID:
				set_bit(TIM4_CCER, CC3E);
				break;
			case CHANNEL4_ID:
				set_bit(TIM4_CCER, CC4E);
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <PWM_u8Start+0xc0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <PWM_u8Start+0xc0>)
 800057a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800057e:	6013      	str	r3, [r2, #0]
				break;
 8000580:	bf00      	nop
			}
			/*< Feeding the Compare register with the new values should by done before enable and not vise versa >*/

			break;
 8000582:	bf00      	nop
		}
		return STD_TRUE;
 8000584:	2301      	movs	r3, #1
 8000586:	e000      	b.n	800058a <PWM_u8Start+0x9a>
	} else {
		return STD_FALSE;
 8000588:	2300      	movs	r3, #0
	}
	// All IFs should have an else :: Misra C

}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40000440 	.word	0x40000440
 800059c:	51eb851f 	.word	0x51eb851f
 80005a0:	40000400 	.word	0x40000400
 80005a4:	40000420 	.word	0x40000420
 80005a8:	40000840 	.word	0x40000840
 80005ac:	40000800 	.word	0x40000800
 80005b0:	40000820 	.word	0x40000820

080005b4 <PWM_u8Stop>:

u8 PWM_u8Stop(u8 timerID) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	if ((timerID == TIM3_ID) || (timerID == TIM4_ID)) {
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d002      	beq.n	80005ca <PWM_u8Stop+0x16>
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d11b      	bne.n	8000602 <PWM_u8Stop+0x4e>

		switch (timerID) {
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d002      	beq.n	80005d6 <PWM_u8Stop+0x22>
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d00a      	beq.n	80005ea <PWM_u8Stop+0x36>
 80005d4:	e013      	b.n	80005fe <PWM_u8Stop+0x4a>
		case TIM3_ID:
			/* duty = 0 */
			TIM3_CCR4 = 0;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <PWM_u8Stop+0x5c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
			/*disable counter*/
			clr_bit(TIM3_CR1, CEN);
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <PWM_u8Stop+0x60>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <PWM_u8Stop+0x60>)
 80005e2:	f023 0301 	bic.w	r3, r3, #1
 80005e6:	6013      	str	r3, [r2, #0]
			break;
 80005e8:	e009      	b.n	80005fe <PWM_u8Stop+0x4a>
		case TIM4_ID:
			TIM4_CCR4 = 0;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <PWM_u8Stop+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
			/*disable counter*/
			clr_bit(TIM4_CR1, CEN);
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <PWM_u8Stop+0x68>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a09      	ldr	r2, [pc, #36]	; (800061c <PWM_u8Stop+0x68>)
 80005f6:	f023 0301 	bic.w	r3, r3, #1
 80005fa:	6013      	str	r3, [r2, #0]
			break;
 80005fc:	bf00      	nop
		}
		return STD_TRUE;
 80005fe:	2301      	movs	r3, #1
 8000600:	e000      	b.n	8000604 <PWM_u8Stop+0x50>
	} else {
		return STD_FALSE;
 8000602:	2300      	movs	r3, #0
	}
	/*< All IFs should have an else :: Misra C */

}
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40000440 	.word	0x40000440
 8000614:	40000400 	.word	0x40000400
 8000618:	40000840 	.word	0x40000840
 800061c:	40000800 	.word	0x40000800

08000620 <RCC_voidInitSysClock>:
												*( M N P Q )      	: By #define


*/
void RCC_voidInitSysClock(void )
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

	// Configuring the clock source

#if		RCC_Clk_SRC == RCC_HSI
	// Set the HSI on bit to enable
	set_bit(RCC_CR, RCC_HSION_bit);
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <RCC_voidInitSysClock+0x84>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <RCC_voidInitSysClock+0x84>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6013      	str	r3, [r2, #0]
	#endif

#endif

	// Mask the clock configuration register
	RCC_PLLCFGR &= RCC_CFGR_mask;
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <RCC_voidInitSysClock+0x88>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <RCC_voidInitSysClock+0x88>)
 8000636:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800063a:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800063e:	6013      	str	r3, [r2, #0]
	//while(get_bit(RCC_CR, RCC_PLLRDY_bit));

#else
	#if		RCC_Clk_SRC == RCC_HSI
		// Select the HSI clk source
		RCC_PLLCFGR |= RCC_HSI_Clk_Src;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <RCC_voidInitSysClock+0x88>)
 8000642:	4a19      	ldr	r2, [pc, #100]	; (80006a8 <RCC_voidInitSysClock+0x88>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6013      	str	r3, [r2, #0]

	#endif
#endif

	// Setting the AHP pre-scaler
	RCC_CFGR |= (RCC_HPRE << RCC_PRE_bit);
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <RCC_voidInitSysClock+0x8c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a17      	ldr	r2, [pc, #92]	; (80006ac <RCC_voidInitSysClock+0x8c>)
 800064e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000652:	6013      	str	r3, [r2, #0]
	// Setting the APB1 pre-scaler
	RCC_CFGR |= (RCC_PPRE1 << RCC_PPRE1_bit);
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <RCC_voidInitSysClock+0x8c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <RCC_voidInitSysClock+0x8c>)
 800065a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800065e:	6013      	str	r3, [r2, #0]
	// Setting the APB2 pre-scaler
	RCC_CFGR |= (RCC_PPRE2 << RCC_PPRE2_bit);
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <RCC_voidInitSysClock+0x8c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a11      	ldr	r2, [pc, #68]	; (80006ac <RCC_voidInitSysClock+0x8c>)
 8000666:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 800066a:	6013      	str	r3, [r2, #0]

	// Enable and disable peripherals of Bus AHB1
	RCC_AHB1ENR |= RCC_AHB1LPENR_init;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <RCC_voidInitSysClock+0x90>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <RCC_voidInitSysClock+0x90>)
 8000672:	f043 0303 	orr.w	r3, r3, #3
 8000676:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus AHB1
	RCC_AHB2ENR |= RCC_AHB2LPENR_init;
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <RCC_voidInitSysClock+0x94>)
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <RCC_voidInitSysClock+0x94>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus ABP1
	RCC_APB1ENR |= RCC_APB1LPENR_init;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <RCC_voidInitSysClock+0x98>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <RCC_voidInitSysClock+0x98>)
 8000686:	f043 030f 	orr.w	r3, r3, #15
 800068a:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus ABP2
	RCC_APB2ENR |= RCC_APB2LPENR_init;
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <RCC_voidInitSysClock+0x9c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <RCC_voidInitSysClock+0x9c>)
 8000692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40023804 	.word	0x40023804
 80006ac:	40023808 	.word	0x40023808
 80006b0:	40023830 	.word	0x40023830
 80006b4:	40023834 	.word	0x40023834
 80006b8:	40023840 	.word	0x40023840
 80006bc:	40023844 	.word	0x40023844

080006c0 <RCC_voidEnableClock>:
												- BusName_t      	: The Bus Of The Peripheral ( AHB1 , AHB2 , AHB3 , APB1 , APB2 ) Every One Detect Which REG To Choice Pripheral From It
												- Copy_u8PerName 	: The Order Of Peripheral On The Selected Reg

*/
void RCC_voidEnableClock (u8 BusName, u8 Copy_u8PerName)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	460a      	mov	r2, r1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	4613      	mov	r3, r2
 80006ce:	71bb      	strb	r3, [r7, #6]
	 switch(BusName)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	d836      	bhi.n	8000744 <RCC_voidEnableClock+0x84>
 80006d6:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <RCC_voidEnableClock+0x1c>)
 80006d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006dc:	080006ed 	.word	0x080006ed
 80006e0:	08000703 	.word	0x08000703
 80006e4:	08000719 	.word	0x08000719
 80006e8:	0800072f 	.word	0x0800072f
	 {
		case AHB1_BUS:
			set_bit(RCC_AHB1ENR, Copy_u8PerName);
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <RCC_voidEnableClock+0x94>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	79ba      	ldrb	r2, [r7, #6]
 80006f2:	2101      	movs	r1, #1
 80006f4:	fa01 f202 	lsl.w	r2, r1, r2
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a16      	ldr	r2, [pc, #88]	; (8000754 <RCC_voidEnableClock+0x94>)
 80006fc:	430b      	orrs	r3, r1
 80006fe:	6013      	str	r3, [r2, #0]
		break;
 8000700:	e021      	b.n	8000746 <RCC_voidEnableClock+0x86>
		case AHB2_BUS:
			set_bit(RCC_AHB2ENR, Copy_u8PerName);
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <RCC_voidEnableClock+0x98>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	79ba      	ldrb	r2, [r7, #6]
 8000708:	2101      	movs	r1, #1
 800070a:	fa01 f202 	lsl.w	r2, r1, r2
 800070e:	4611      	mov	r1, r2
 8000710:	4a11      	ldr	r2, [pc, #68]	; (8000758 <RCC_voidEnableClock+0x98>)
 8000712:	430b      	orrs	r3, r1
 8000714:	6013      	str	r3, [r2, #0]
		break;
 8000716:	e016      	b.n	8000746 <RCC_voidEnableClock+0x86>
		case APB1_BUS:
			set_bit(RCC_APB1LPENR, Copy_u8PerName);
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <RCC_voidEnableClock+0x9c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	79ba      	ldrb	r2, [r7, #6]
 800071e:	2101      	movs	r1, #1
 8000720:	fa01 f202 	lsl.w	r2, r1, r2
 8000724:	4611      	mov	r1, r2
 8000726:	4a0d      	ldr	r2, [pc, #52]	; (800075c <RCC_voidEnableClock+0x9c>)
 8000728:	430b      	orrs	r3, r1
 800072a:	6013      	str	r3, [r2, #0]
		break;
 800072c:	e00b      	b.n	8000746 <RCC_voidEnableClock+0x86>
		case APB2_BUS:
			set_bit(RCC_APB2LPENR, Copy_u8PerName);
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <RCC_voidEnableClock+0xa0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	79ba      	ldrb	r2, [r7, #6]
 8000734:	2101      	movs	r1, #1
 8000736:	fa01 f202 	lsl.w	r2, r1, r2
 800073a:	4611      	mov	r1, r2
 800073c:	4a08      	ldr	r2, [pc, #32]	; (8000760 <RCC_voidEnableClock+0xa0>)
 800073e:	430b      	orrs	r3, r1
 8000740:	6013      	str	r3, [r2, #0]
		break;
 8000742:	e000      	b.n	8000746 <RCC_voidEnableClock+0x86>
		default:

		break;
 8000744:	bf00      	nop
	 }
 }
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40023830 	.word	0x40023830
 8000758:	40023834 	.word	0x40023834
 800075c:	40023860 	.word	0x40023860
 8000760:	40023864 	.word	0x40023864

08000764 <main>:

#include "../Inc/RCC/RCC_interface.h"
#include "../Inc/GPIO/GPIO_interface.h"
#include "../Inc/PWM/PWM_interface.h"

int main(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 800076a:	f7ff ff59 	bl	8000620 <RCC_voidInitSysClock>
	RCC_voidEnableClock(AHB1_BUS, RCC_GPIOBEN_bit);
 800076e:	2101      	movs	r1, #1
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff ffa5 	bl	80006c0 <RCC_voidEnableClock>
	RCC_voidEnableClock(APB1_BUS, RCC_TIM3EN_bit);
 8000776:	2101      	movs	r1, #1
 8000778:	2002      	movs	r0, #2
 800077a:	f7ff ffa1 	bl	80006c0 <RCC_voidEnableClock>
	RCC_voidEnableClock(APB1_BUS, RCC_TIM4EN_bit);
 800077e:	2102      	movs	r1, #2
 8000780:	2002      	movs	r0, #2
 8000782:	f7ff ff9d 	bl	80006c0 <RCC_voidEnableClock>

	GPIO_voidSysInit();
 8000786:	f7ff fd25 	bl	80001d4 <GPIO_voidSysInit>
	GPIO_voidSetPinMode(GPIOB_PORT, PIN1, MODE_ALTF);
 800078a:	2202      	movs	r2, #2
 800078c:	2101      	movs	r1, #1
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff fd28 	bl	80001e4 <GPIO_voidSetPinMode>
	GPIO_voidPinSetAltFn(GPIOB_PORT, PIN1, (0b0010u));
 8000794:	2202      	movs	r2, #2
 8000796:	2101      	movs	r1, #1
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff fd5d 	bl	8000258 <GPIO_voidPinSetAltFn>
	GPIO_voidSetPinMode(GPIOB_PORT, PIN9, MODE_ALTF);
 800079e:	2202      	movs	r2, #2
 80007a0:	2109      	movs	r1, #9
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff fd1e 	bl	80001e4 <GPIO_voidSetPinMode>
	GPIO_voidPinSetAltFn(GPIOB_PORT, PIN9, (0b0010u));
 80007a8:	2202      	movs	r2, #2
 80007aa:	2109      	movs	r1, #9
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff fd53 	bl	8000258 <GPIO_voidPinSetAltFn>

	PWM_u8Init(TIM3_ID);
 80007b2:	2003      	movs	r0, #3
 80007b4:	f7ff fdda 	bl	800036c <PWM_u8Init>
	PWM_u8Init(TIM4_ID);
 80007b8:	2004      	movs	r0, #4
 80007ba:	f7ff fdd7 	bl	800036c <PWM_u8Init>

	PWM_u8Start(TIM3_ID, 10);
 80007be:	210a      	movs	r1, #10
 80007c0:	2003      	movs	r0, #3
 80007c2:	f7ff fe95 	bl	80004f0 <PWM_u8Start>
	PWM_u8Start(TIM4_ID, 50);
 80007c6:	2132      	movs	r1, #50	; 0x32
 80007c8:	2004      	movs	r0, #4
 80007ca:	f7ff fe91 	bl	80004f0 <PWM_u8Start>
	u16 i;
	for(i=0; i<500000; i++);
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	e002      	b.n	80007da <main+0x76>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3301      	adds	r3, #1
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a03      	ldr	r2, [pc, #12]	; (80007ec <main+0x88>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d9f8      	bls.n	80007d4 <main+0x70>
	PWM_u8Stop(TIM4_ID);
 80007e2:	2004      	movs	r0, #4
 80007e4:	f7ff fee6 	bl	80005b4 <PWM_u8Stop>

	/* Loop forever */
	while (1) {
 80007e8:	e7fe      	b.n	80007e8 <main+0x84>
 80007ea:	bf00      	nop
 80007ec:	0007a11f 	.word	0x0007a11f

080007f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <LoopForever+0x6>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	; (8000830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <LoopForever+0xe>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	; (800083c <LoopForever+0x16>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081e:	f000 f811 	bl	8000844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000822:	f7ff ff9f 	bl	8000764 <main>

08000826 <LoopForever>:

LoopForever:
  b LoopForever
 8000826:	e7fe      	b.n	8000826 <LoopForever>
  ldr   r0, =_estack
 8000828:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000834:	080008ac 	.word	0x080008ac
  ldr r2, =_sbss
 8000838:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800083c:	20000038 	.word	0x20000038

08000840 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC_IRQHandler>
	...

08000844 <__libc_init_array>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	4d0d      	ldr	r5, [pc, #52]	; (800087c <__libc_init_array+0x38>)
 8000848:	4c0d      	ldr	r4, [pc, #52]	; (8000880 <__libc_init_array+0x3c>)
 800084a:	1b64      	subs	r4, r4, r5
 800084c:	10a4      	asrs	r4, r4, #2
 800084e:	2600      	movs	r6, #0
 8000850:	42a6      	cmp	r6, r4
 8000852:	d109      	bne.n	8000868 <__libc_init_array+0x24>
 8000854:	4d0b      	ldr	r5, [pc, #44]	; (8000884 <__libc_init_array+0x40>)
 8000856:	4c0c      	ldr	r4, [pc, #48]	; (8000888 <__libc_init_array+0x44>)
 8000858:	f000 f818 	bl	800088c <_init>
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	10a4      	asrs	r4, r4, #2
 8000860:	2600      	movs	r6, #0
 8000862:	42a6      	cmp	r6, r4
 8000864:	d105      	bne.n	8000872 <__libc_init_array+0x2e>
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f855 3b04 	ldr.w	r3, [r5], #4
 800086c:	4798      	blx	r3
 800086e:	3601      	adds	r6, #1
 8000870:	e7ee      	b.n	8000850 <__libc_init_array+0xc>
 8000872:	f855 3b04 	ldr.w	r3, [r5], #4
 8000876:	4798      	blx	r3
 8000878:	3601      	adds	r6, #1
 800087a:	e7f2      	b.n	8000862 <__libc_init_array+0x1e>
 800087c:	080008a4 	.word	0x080008a4
 8000880:	080008a4 	.word	0x080008a4
 8000884:	080008a4 	.word	0x080008a4
 8000888:	080008a8 	.word	0x080008a8

0800088c <_init>:
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088e:	bf00      	nop
 8000890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000892:	bc08      	pop	{r3}
 8000894:	469e      	mov	lr, r3
 8000896:	4770      	bx	lr

08000898 <_fini>:
 8000898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089a:	bf00      	nop
 800089c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800089e:	bc08      	pop	{r3}
 80008a0:	469e      	mov	lr, r3
 80008a2:	4770      	bx	lr
