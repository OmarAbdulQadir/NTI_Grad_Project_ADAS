
ADAS_Blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000380  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000514  0800051c  0001051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000514  08000514  0001051c  2**0
                  CONTENTS
  4 .ARM          00000000  08000514  08000514  0001051c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000514  0800051c  0001051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000518  08000518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800051c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800051c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001051c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001054c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000082f  00000000  00000000  0001058f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000375  00000000  00000000  00010dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00011138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c4  00000000  00000000  00011258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000007a2  00000000  00000000  0001131c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000007b9  00000000  00000000  00011abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000051a5  00000000  00000000  00012277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000035c  00000000  00000000  0001741c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00017778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004fc 	.word	0x080004fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004fc 	.word	0x080004fc

080001d4 <GPIO_voidSysInit>:

/**********************************************************************************
 *******************		 		GPIO_voidSysInit				***************
 **********************************************************************************/
/*		Function configure the GPIO peripherals initially		*/
void GPIO_voidSysInit(void ){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
		GPIO_bases[GPIOH_PORT] -> AFRL = GPIOA_CONFIG_AFRL;
		GPIO_bases[GPIOH_PORT] -> AFRH = GPIOA_CONFIG_AFRH;

	#endif

}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr

080001e2 <NVIC_u8EnableIRQ>:

/* Enables the IRQx interrupt										*/
/* Input Parameters: IRQx ID										*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Failed			*/
STD_ReturnType NVIC_u8EnableIRQ( u8 copy_u8IRQ_ID )
{
 80001e2:	b480      	push	{r7}
 80001e4:	b085      	sub	sp, #20
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	4603      	mov	r3, r0
 80001ea:	71fb      	strb	r3, [r7, #7]
	// Check data validity and if valid address the IRQ to its register
	if(copy_u8IRQ_ID <= IRQ_MAX)
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	2b54      	cmp	r3, #84	; 0x54
 80001f0:	d820      	bhi.n	8000234 <NVIC_u8EnableIRQ+0x52>
	{// if ID is valid
		// Calculate the register ID
		u8 IRQ_RegID = copy_u8IRQ_ID / REGSC_MAX_IRQ;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	095b      	lsrs	r3, r3, #5
 80001f6:	73fb      	strb	r3, [r7, #15]
		// Calculate the bits location for the selected IRQ
		u8 IRQ_BitLOC = ( ( copy_u8IRQ_ID - ( IRQ_RegID * REGSC_MAX_IRQ ) ) );
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	015b      	lsls	r3, r3, #5
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	79fa      	ldrb	r2, [r7, #7]
 8000200:	1ad3      	subs	r3, r2, r3
 8000202:	73bb      	strb	r3, [r7, #14]
		// Set enable IRQ bit
		set_bit(NVIC_ISERx_ARD(IRQ_RegID), IRQ_BitLOC);
 8000204:	7bfb      	ldrb	r3, [r7, #15]
 8000206:	009b      	lsls	r3, r3, #2
 8000208:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800020c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	7bbb      	ldrb	r3, [r7, #14]
 8000214:	2101      	movs	r1, #1
 8000216:	fa01 f303 	lsl.w	r3, r1, r3
 800021a:	4618      	mov	r0, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	009b      	lsls	r3, r3, #2
 8000220:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000224:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000228:	4619      	mov	r1, r3
 800022a:	ea42 0300 	orr.w	r3, r2, r0
 800022e:	600b      	str	r3, [r1, #0]
		// Return success
		return STD_TRUE;
 8000230:	2301      	movs	r3, #1
 8000232:	e000      	b.n	8000236 <NVIC_u8EnableIRQ+0x54>
	}
	else
	{// If not valid return failed
		// Return failed
		return STD_FALSE;
 8000234:	2300      	movs	r3, #0
	}
}
 8000236:	4618      	mov	r0, r3
 8000238:	3714      	adds	r7, #20
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
	...

08000244 <NVIC_u8DisableIRQ>:
/*--------------------------------------------------------------------------------*/
/* Disable the IRQx interrupt										*/
/* Input Parameters: IRQx ID										*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Failed			*/
STD_ReturnType NVIC_u8DisableIRQ( u8 copy_u8IRQ_ID )
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
	// Check data validity and if valid address the IRQ to its register
	if(copy_u8IRQ_ID <= IRQ_MAX)
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	2b54      	cmp	r3, #84	; 0x54
 8000252:	d81e      	bhi.n	8000292 <NVIC_u8DisableIRQ+0x4e>
	{// if ID is valid
		// Calculate the register ID
		u8 IRQ_RegID = copy_u8IRQ_ID / REGSC_MAX_IRQ;
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	095b      	lsrs	r3, r3, #5
 8000258:	73fb      	strb	r3, [r7, #15]
		// Calculate the bits location for the selected IRQ
		u8 IRQ_BitLOC = ( ( copy_u8IRQ_ID - ( IRQ_RegID * REGSC_MAX_IRQ ) ) );
 800025a:	7bfb      	ldrb	r3, [r7, #15]
 800025c:	015b      	lsls	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	79fa      	ldrb	r2, [r7, #7]
 8000262:	1ad3      	subs	r3, r2, r3
 8000264:	73bb      	strb	r3, [r7, #14]
		// Set disable IRQ bit
		set_bit(NVIC_ICERx_ARD(IRQ_RegID), IRQ_BitLOC);
 8000266:	7bfb      	ldrb	r3, [r7, #15]
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	461a      	mov	r2, r3
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <NVIC_u8DisableIRQ+0x5c>)
 800026e:	4413      	add	r3, r2
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	7bbb      	ldrb	r3, [r7, #14]
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
 800027a:	4618      	mov	r0, r3
 800027c:	7bfb      	ldrb	r3, [r7, #15]
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	4619      	mov	r1, r3
 8000282:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <NVIC_u8DisableIRQ+0x5c>)
 8000284:	440b      	add	r3, r1
 8000286:	4619      	mov	r1, r3
 8000288:	ea42 0300 	orr.w	r3, r2, r0
 800028c:	600b      	str	r3, [r1, #0]
		// Return success
		return STD_TRUE;
 800028e:	2301      	movs	r3, #1
 8000290:	e000      	b.n	8000294 <NVIC_u8DisableIRQ+0x50>
	}
	else
	{// If not valid return failed
		// Return failed
		return STD_FALSE;
 8000292:	2300      	movs	r3, #0
	}
}
 8000294:	4618      	mov	r0, r3
 8000296:	3714      	adds	r7, #20
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	e000e180 	.word	0xe000e180

080002a4 <NVIC_u8SetPriority>:
/*--------------------------------------------------------------------------------*/
/* Set priority value for the IRQx interrupt						*/
/* Input Parameters: IRQx ID, Priority u8 value						*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Failed			*/
STD_ReturnType NVIC_u8SetPriority( u8 copy_u8IRQ_ID , u8 copy_u8IRQ_Priority )
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	460a      	mov	r2, r1
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	4613      	mov	r3, r2
 80002b2:	71bb      	strb	r3, [r7, #6]
	// Check data validity and if valid address the IRQ to its register
	if(copy_u8IRQ_ID <= IRQ_MAX)
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	2b54      	cmp	r3, #84	; 0x54
 80002b8:	d835      	bhi.n	8000326 <NVIC_u8SetPriority+0x82>
	{// if ID is valid
		// Calculate the register ID
		u8 IRQ_RegID = copy_u8IRQ_ID / REGP_MAX_IRQ;
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	089b      	lsrs	r3, r3, #2
 80002be:	73fb      	strb	r3, [r7, #15]
		// Calculate the bits location for the selected IRQ
		u8 IRQ_BitLOC = ( ( copy_u8IRQ_ID - ( IRQ_RegID * REGP_MAX_IRQ ) ) * REGP_IRQ_BITS );
 80002c0:	79fa      	ldrb	r2, [r7, #7]
 80002c2:	7bfb      	ldrb	r3, [r7, #15]
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	00db      	lsls	r3, r3, #3
 80002cc:	73bb      	strb	r3, [r7, #14]
		// Masking whatever the value of the priority to zeros
		NVIC_IPRx_ADR( IRQ_RegID ) &= NVIC_IPRx_SETMASK( IRQ_BitLOC );
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80002d6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80002da:	6819      	ldr	r1, [r3, #0]
 80002dc:	7bbb      	ldrb	r3, [r7, #14]
 80002de:	22ff      	movs	r2, #255	; 0xff
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	43da      	mvns	r2, r3
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80002ee:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80002f2:	4618      	mov	r0, r3
 80002f4:	ea01 0302 	and.w	r3, r1, r2
 80002f8:	6003      	str	r3, [r0, #0]
		// assign the new priority value
		NVIC_IPRx_ADR( IRQ_RegID ) |= ( ( (u32) copy_u8IRQ_Priority ) << IRQ_BitLOC );
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000302:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000306:	6819      	ldr	r1, [r3, #0]
 8000308:	79ba      	ldrb	r2, [r7, #6]
 800030a:	7bbb      	ldrb	r3, [r7, #14]
 800030c:	409a      	lsls	r2, r3
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000316:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800031a:	4618      	mov	r0, r3
 800031c:	ea41 0302 	orr.w	r3, r1, r2
 8000320:	6003      	str	r3, [r0, #0]
		// Return success
		return STD_TRUE;
 8000322:	2301      	movs	r3, #1
 8000324:	e000      	b.n	8000328 <NVIC_u8SetPriority+0x84>
	}
	else
	{// If not valid return failed
		// Return failed
		return STD_FALSE;
 8000326:	2300      	movs	r3, #0
	}
}
 8000328:	4618      	mov	r0, r3
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <NVIC_u8GetPriority>:
/*--------------------------------------------------------------------------------*/
/* Get priority value for the IRQx interrupt						*/
/* Input Parameters: IRQx ID, Pointer to u8 variable				*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Failed			*/
STD_ReturnType NVIC_u8GetPriority( u8 copy_u8IRQ_ID , u8* copy_u8IRQ_Priority )
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	6039      	str	r1, [r7, #0]
 800033e:	71fb      	strb	r3, [r7, #7]
	// Check data validity and if valid address the IRQ to its register
	if(copy_u8IRQ_ID <= IRQ_MAX)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2b54      	cmp	r3, #84	; 0x54
 8000344:	d81a      	bhi.n	800037c <NVIC_u8GetPriority+0x48>
	{// if ID is valid
		// Calculate the register ID
		u8 IRQ_RegID = copy_u8IRQ_ID / REGP_MAX_IRQ;
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	089b      	lsrs	r3, r3, #2
 800034a:	73fb      	strb	r3, [r7, #15]
		// Calculate the bits location for the selected IRQ
		u8 IRQ_BitLOC = ( ( copy_u8IRQ_ID - ( IRQ_RegID * REGP_MAX_IRQ ) ) * REGP_IRQ_BITS );
 800034c:	79fa      	ldrb	r2, [r7, #7]
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	1ad3      	subs	r3, r2, r3
 8000354:	b2db      	uxtb	r3, r3
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	73bb      	strb	r3, [r7, #14]
		// Read the register value to a local variable
		u32 PriorityRegvalue = NVIC_IPRx_ADR( IRQ_RegID );
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000362:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	60bb      	str	r3, [r7, #8]
		// Return the priority value in the IRQ priority container
		*copy_u8IRQ_Priority = NVIC_IPRx_GETMASK( PriorityRegvalue , IRQ_BitLOC );
 800036a:	7bbb      	ldrb	r3, [r7, #14]
 800036c:	68ba      	ldr	r2, [r7, #8]
 800036e:	fa22 f303 	lsr.w	r3, r2, r3
 8000372:	b2da      	uxtb	r2, r3
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	701a      	strb	r2, [r3, #0]
		// Return success
		return STD_TRUE;
 8000378:	2301      	movs	r3, #1
 800037a:	e000      	b.n	800037e <NVIC_u8GetPriority+0x4a>
	}
	else
	{// If not valid return failed
		// Return failed
		return STD_FALSE;
 800037c:	2300      	movs	r3, #0
	}
}
 800037e:	4618      	mov	r0, r3
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
	...

0800038c <RCC_voidInitSysClock>:
												*( M N P Q )      	: By #define


*/
void RCC_voidInitSysClock(void )
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0

	// Configuring the clock source

#if		RCC_Clk_SRC == RCC_HSI
	// Set the HSI on bit to enable
	set_bit(RCC_CR, RCC_HSION_bit);
 8000390:	4b1f      	ldr	r3, [pc, #124]	; (8000410 <RCC_voidInitSysClock+0x84>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1e      	ldr	r2, [pc, #120]	; (8000410 <RCC_voidInitSysClock+0x84>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6013      	str	r3, [r2, #0]
	#endif

#endif

	// Mask the clock configuration register
	RCC_PLLCFGR &= RCC_CFGR_mask;
 800039c:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <RCC_voidInitSysClock+0x88>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a1c      	ldr	r2, [pc, #112]	; (8000414 <RCC_voidInitSysClock+0x88>)
 80003a2:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80003a6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80003aa:	6013      	str	r3, [r2, #0]
	//while(get_bit(RCC_CR, RCC_PLLRDY_bit));

#else
	#if		RCC_Clk_SRC == RCC_HSI
		// Select the HSI clk source
		RCC_PLLCFGR |= RCC_HSI_Clk_Src;
 80003ac:	4b19      	ldr	r3, [pc, #100]	; (8000414 <RCC_voidInitSysClock+0x88>)
 80003ae:	4a19      	ldr	r2, [pc, #100]	; (8000414 <RCC_voidInitSysClock+0x88>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	6013      	str	r3, [r2, #0]

	#endif
#endif

	// Setting the AHP pre-scaler
	RCC_CFGR |= (RCC_HPRE << RCC_PRE_bit);
 80003b4:	4b18      	ldr	r3, [pc, #96]	; (8000418 <RCC_voidInitSysClock+0x8c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a17      	ldr	r2, [pc, #92]	; (8000418 <RCC_voidInitSysClock+0x8c>)
 80003ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003be:	6013      	str	r3, [r2, #0]
	// Setting the APB1 pre-scaler
	RCC_CFGR |= (RCC_PPRE1 << RCC_PPRE1_bit);
 80003c0:	4b15      	ldr	r3, [pc, #84]	; (8000418 <RCC_voidInitSysClock+0x8c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a14      	ldr	r2, [pc, #80]	; (8000418 <RCC_voidInitSysClock+0x8c>)
 80003c6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80003ca:	6013      	str	r3, [r2, #0]
	// Setting the APB2 pre-scaler
	RCC_CFGR |= (RCC_PPRE2 << RCC_PPRE2_bit);
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <RCC_voidInitSysClock+0x8c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a11      	ldr	r2, [pc, #68]	; (8000418 <RCC_voidInitSysClock+0x8c>)
 80003d2:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 80003d6:	6013      	str	r3, [r2, #0]

	// Enable and disable peripherals of Bus AHB1
	RCC_AHB1ENR |= RCC_AHB1LPENR_init;
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <RCC_voidInitSysClock+0x90>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a0f      	ldr	r2, [pc, #60]	; (800041c <RCC_voidInitSysClock+0x90>)
 80003de:	f043 0303 	orr.w	r3, r3, #3
 80003e2:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus AHB1
	RCC_AHB2ENR |= RCC_AHB2LPENR_init;
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <RCC_voidInitSysClock+0x94>)
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <RCC_voidInitSysClock+0x94>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus ABP1
	RCC_APB1ENR |= RCC_APB1LPENR_init;
 80003ec:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <RCC_voidInitSysClock+0x98>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <RCC_voidInitSysClock+0x98>)
 80003f2:	f043 030f 	orr.w	r3, r3, #15
 80003f6:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus ABP2
	RCC_APB2ENR |= RCC_APB2LPENR_init;
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <RCC_voidInitSysClock+0x9c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <RCC_voidInitSysClock+0x9c>)
 80003fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000402:	6013      	str	r3, [r2, #0]
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40023800 	.word	0x40023800
 8000414:	40023804 	.word	0x40023804
 8000418:	40023808 	.word	0x40023808
 800041c:	40023830 	.word	0x40023830
 8000420:	40023834 	.word	0x40023834
 8000424:	40023840 	.word	0x40023840
 8000428:	40023844 	.word	0x40023844

0800042c <main>:
/*  Temporary Global Variables  */
u8 Global_u8ReRightUS = 0;
u8 Global_u8ReLeftUS  = 0;

int main( void )
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0

	RCC_voidInitSysClock();
 8000432:	f7ff ffab 	bl	800038c <RCC_voidInitSysClock>
	GPIO_voidSysInit();
 8000436:	f7ff fecd 	bl	80001d4 <GPIO_voidSysInit>
	NVIC_u8EnableIRQ(NVIC_IRQ_ID_USART1);
 800043a:	2025      	movs	r0, #37	; 0x25
 800043c:	f7ff fed1 	bl	80001e2 <NVIC_u8EnableIRQ>
	NVIC_u8SetPriority(NVIC_IRQ_ID_USART1, NVIC_PRIORITY_4);
 8000440:	2140      	movs	r1, #64	; 0x40
 8000442:	2025      	movs	r0, #37	; 0x25
 8000444:	f7ff ff2e 	bl	80002a4 <NVIC_u8SetPriority>
	u8 P= 0;
 8000448:	2300      	movs	r3, #0
 800044a:	71fb      	strb	r3, [r7, #7]
	NVIC_u8GetPriority(NVIC_IRQ_ID_USART1, &P);
 800044c:	1dfb      	adds	r3, r7, #7
 800044e:	4619      	mov	r1, r3
 8000450:	2025      	movs	r0, #37	; 0x25
 8000452:	f7ff ff6f 	bl	8000334 <NVIC_u8GetPriority>
	//NVIC_u8SetPendingIRQ(NVIC_IRQ_ID_USART1);
	NVIC_u8DisableIRQ(NVIC_IRQ_ID_USART1);
 8000456:	2025      	movs	r0, #37	; 0x25
 8000458:	f7ff fef4 	bl	8000244 <NVIC_u8DisableIRQ>


	/* Loop forever */
	while( 1 )
 800045c:	e7fe      	b.n	800045c <main+0x30>
	...

08000460 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000460:	480d      	ldr	r0, [pc, #52]	; (8000498 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000462:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000464:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000468:	480c      	ldr	r0, [pc, #48]	; (800049c <LoopForever+0x6>)
  ldr r1, =_edata
 800046a:	490d      	ldr	r1, [pc, #52]	; (80004a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800046c:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <LoopForever+0xe>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000480:	4c0a      	ldr	r4, [pc, #40]	; (80004ac <LoopForever+0x16>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800048e:	f000 f811 	bl	80004b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000492:	f7ff ffcb 	bl	800042c <main>

08000496 <LoopForever>:

LoopForever:
  b LoopForever
 8000496:	e7fe      	b.n	8000496 <LoopForever>
  ldr   r0, =_estack
 8000498:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800049c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004a4:	0800051c 	.word	0x0800051c
  ldr r2, =_sbss
 80004a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004ac:	2000001c 	.word	0x2000001c

080004b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b0:	e7fe      	b.n	80004b0 <ADC_IRQHandler>
	...

080004b4 <__libc_init_array>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	4d0d      	ldr	r5, [pc, #52]	; (80004ec <__libc_init_array+0x38>)
 80004b8:	4c0d      	ldr	r4, [pc, #52]	; (80004f0 <__libc_init_array+0x3c>)
 80004ba:	1b64      	subs	r4, r4, r5
 80004bc:	10a4      	asrs	r4, r4, #2
 80004be:	2600      	movs	r6, #0
 80004c0:	42a6      	cmp	r6, r4
 80004c2:	d109      	bne.n	80004d8 <__libc_init_array+0x24>
 80004c4:	4d0b      	ldr	r5, [pc, #44]	; (80004f4 <__libc_init_array+0x40>)
 80004c6:	4c0c      	ldr	r4, [pc, #48]	; (80004f8 <__libc_init_array+0x44>)
 80004c8:	f000 f818 	bl	80004fc <_init>
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	10a4      	asrs	r4, r4, #2
 80004d0:	2600      	movs	r6, #0
 80004d2:	42a6      	cmp	r6, r4
 80004d4:	d105      	bne.n	80004e2 <__libc_init_array+0x2e>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004dc:	4798      	blx	r3
 80004de:	3601      	adds	r6, #1
 80004e0:	e7ee      	b.n	80004c0 <__libc_init_array+0xc>
 80004e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e6:	4798      	blx	r3
 80004e8:	3601      	adds	r6, #1
 80004ea:	e7f2      	b.n	80004d2 <__libc_init_array+0x1e>
 80004ec:	08000514 	.word	0x08000514
 80004f0:	08000514 	.word	0x08000514
 80004f4:	08000514 	.word	0x08000514
 80004f8:	08000518 	.word	0x08000518

080004fc <_init>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr

08000508 <_fini>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr
