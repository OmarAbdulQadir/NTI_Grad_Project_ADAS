
ADAS_Blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000948  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000adc  08000adc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000adc  08000adc  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000adc  08000adc  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000adc  08000adc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000adc  08000adc  00010adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae0  08000ae0  00010ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000024  08000b08  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000b08  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e13  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000060c  00000000  00000000  00020eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  000214b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000152  00000000  00000000  00021698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000a8f  00000000  00000000  000217ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f41  00000000  00000000  00022279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005fd5  00000000  00000000  000231ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000618  00000000  00000000  00029190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000297a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ac4 	.word	0x08000ac4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	08000ac4 	.word	0x08000ac4

080001d4 <GPIO_voidSetPinMode>:
									MODE_ALTF
									MODE_ANALOG	

*/
void GPIO_voidSetPinMode(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8MODE)
 {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]
	 if((copy_u8PORT <= GPIOH_PORT) && (copy_u8PIN <= PIN15) && (copy_u8MODE <= MODE_ANALOG)){
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b05      	cmp	r3, #5
 80001ea:	d825      	bhi.n	8000238 <GPIO_voidSetPinMode+0x64>
 80001ec:	79bb      	ldrb	r3, [r7, #6]
 80001ee:	2b0f      	cmp	r3, #15
 80001f0:	d822      	bhi.n	8000238 <GPIO_voidSetPinMode+0x64>
 80001f2:	797b      	ldrb	r3, [r7, #5]
 80001f4:	2b03      	cmp	r3, #3
 80001f6:	d81f      	bhi.n	8000238 <GPIO_voidSetPinMode+0x64>

		 GPIO_bases[copy_u8PORT] -> MODER &= GPIO_MODER_MASK( copy_u8PIN * 2 );
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	4a12      	ldr	r2, [pc, #72]	; (8000244 <GPIO_voidSetPinMode+0x70>)
 80001fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000200:	6819      	ldr	r1, [r3, #0]
 8000202:	79bb      	ldrb	r3, [r7, #6]
 8000204:	005b      	lsls	r3, r3, #1
 8000206:	2203      	movs	r2, #3
 8000208:	fa02 f303 	lsl.w	r3, r2, r3
 800020c:	43da      	mvns	r2, r3
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	480c      	ldr	r0, [pc, #48]	; (8000244 <GPIO_voidSetPinMode+0x70>)
 8000212:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000216:	400a      	ands	r2, r1
 8000218:	601a      	str	r2, [r3, #0]
		 GPIO_bases[copy_u8PORT] -> MODER |= ( ( ( u32 ) copy_u8MODE ) << ( copy_u8PIN * 2 ) );
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	4a09      	ldr	r2, [pc, #36]	; (8000244 <GPIO_voidSetPinMode+0x70>)
 800021e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000222:	6819      	ldr	r1, [r3, #0]
 8000224:	797a      	ldrb	r2, [r7, #5]
 8000226:	79bb      	ldrb	r3, [r7, #6]
 8000228:	005b      	lsls	r3, r3, #1
 800022a:	409a      	lsls	r2, r3
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	4805      	ldr	r0, [pc, #20]	; (8000244 <GPIO_voidSetPinMode+0x70>)
 8000230:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]

	 }
	 else{

	 }
 }
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	20000000 	.word	0x20000000

08000248 <GPIO_voidPinSetAltFn>:
 **********************************************************************************/  
/*
			Function Set The AltFn		: Every Pin Need 4 Bits SO We Have High AND Low
*/
void GPIO_voidPinSetAltFn(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8AlT)
{
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
 8000250:	4603      	mov	r3, r0
 8000252:	71fb      	strb	r3, [r7, #7]
 8000254:	460b      	mov	r3, r1
 8000256:	71bb      	strb	r3, [r7, #6]
 8000258:	4613      	mov	r3, r2
 800025a:	717b      	strb	r3, [r7, #5]
	if((copy_u8PORT <= GPIOH_PORT) && (copy_u8PIN <= PIN15) && (copy_u8AlT <= GPIO_AFR_MAX)){
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	2b05      	cmp	r3, #5
 8000260:	d873      	bhi.n	800034a <GPIO_voidPinSetAltFn+0x102>
 8000262:	79bb      	ldrb	r3, [r7, #6]
 8000264:	2b0f      	cmp	r3, #15
 8000266:	d870      	bhi.n	800034a <GPIO_voidPinSetAltFn+0x102>
 8000268:	797b      	ldrb	r3, [r7, #5]
 800026a:	2b0f      	cmp	r3, #15
 800026c:	d86d      	bhi.n	800034a <GPIO_voidPinSetAltFn+0x102>
		if(copy_u8PIN <= PIN7)
 800026e:	79bb      	ldrb	r3, [r7, #6]
 8000270:	2b07      	cmp	r3, #7
 8000272:	d833      	bhi.n	80002dc <GPIO_voidPinSetAltFn+0x94>
		{
			GPIO_bases[copy_u8PORT] -> AFRL &= GPIO_AFR_MASK( copy_u8PIN * 4 );
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a38      	ldr	r2, [pc, #224]	; (8000358 <GPIO_voidPinSetAltFn+0x110>)
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	6a1b      	ldr	r3, [r3, #32]
 800027e:	603b      	str	r3, [r7, #0]
 8000280:	79bb      	ldrb	r3, [r7, #6]
 8000282:	0099      	lsls	r1, r3, #2
 8000284:	f04f 020f 	mov.w	r2, #15
 8000288:	f04f 0300 	mov.w	r3, #0
 800028c:	f1a1 0620 	sub.w	r6, r1, #32
 8000290:	f1c1 0020 	rsb	r0, r1, #32
 8000294:	fa03 f901 	lsl.w	r9, r3, r1
 8000298:	fa02 f606 	lsl.w	r6, r2, r6
 800029c:	ea49 0906 	orr.w	r9, r9, r6
 80002a0:	fa22 f000 	lsr.w	r0, r2, r0
 80002a4:	ea49 0900 	orr.w	r9, r9, r0
 80002a8:	fa02 f801 	lsl.w	r8, r2, r1
 80002ac:	4643      	mov	r3, r8
 80002ae:	43da      	mvns	r2, r3
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4929      	ldr	r1, [pc, #164]	; (8000358 <GPIO_voidPinSetAltFn+0x110>)
 80002b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b8:	6839      	ldr	r1, [r7, #0]
 80002ba:	400a      	ands	r2, r1
 80002bc:	621a      	str	r2, [r3, #32]
			GPIO_bases[copy_u8PORT] -> AFRL |= ( ( ( u32 ) copy_u8AlT ) << copy_u8PIN * 4 );
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	4a25      	ldr	r2, [pc, #148]	; (8000358 <GPIO_voidPinSetAltFn+0x110>)
 80002c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c6:	6a19      	ldr	r1, [r3, #32]
 80002c8:	797a      	ldrb	r2, [r7, #5]
 80002ca:	79bb      	ldrb	r3, [r7, #6]
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	409a      	lsls	r2, r3
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	4821      	ldr	r0, [pc, #132]	; (8000358 <GPIO_voidPinSetAltFn+0x110>)
 80002d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80002d8:	430a      	orrs	r2, r1
 80002da:	621a      	str	r2, [r3, #32]
		}
		if(copy_u8PIN > PIN7)
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d933      	bls.n	800034a <GPIO_voidPinSetAltFn+0x102>
		{
			GPIO_bases[copy_u8PORT] -> AFRH &= GPIO_AFR_MASK( ( copy_u8PIN - PIN8 ) * 4 );
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4a1c      	ldr	r2, [pc, #112]	; (8000358 <GPIO_voidPinSetAltFn+0x110>)
 80002e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ec:	603b      	str	r3, [r7, #0]
 80002ee:	79bb      	ldrb	r3, [r7, #6]
 80002f0:	3b08      	subs	r3, #8
 80002f2:	0099      	lsls	r1, r3, #2
 80002f4:	f04f 020f 	mov.w	r2, #15
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	f1a1 0620 	sub.w	r6, r1, #32
 8000300:	f1c1 0020 	rsb	r0, r1, #32
 8000304:	fa03 f501 	lsl.w	r5, r3, r1
 8000308:	fa02 f606 	lsl.w	r6, r2, r6
 800030c:	4335      	orrs	r5, r6
 800030e:	fa22 f000 	lsr.w	r0, r2, r0
 8000312:	4305      	orrs	r5, r0
 8000314:	fa02 f401 	lsl.w	r4, r2, r1
 8000318:	4623      	mov	r3, r4
 800031a:	43da      	mvns	r2, r3
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	490e      	ldr	r1, [pc, #56]	; (8000358 <GPIO_voidPinSetAltFn+0x110>)
 8000320:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000324:	6839      	ldr	r1, [r7, #0]
 8000326:	400a      	ands	r2, r1
 8000328:	625a      	str	r2, [r3, #36]	; 0x24
			GPIO_bases[copy_u8PORT] -> AFRH |= ( ( ( u32 ) copy_u8AlT ) << ( copy_u8PIN - PIN8 ) * 4 );
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <GPIO_voidPinSetAltFn+0x110>)
 800032e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000332:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000334:	797a      	ldrb	r2, [r7, #5]
 8000336:	79bb      	ldrb	r3, [r7, #6]
 8000338:	3b08      	subs	r3, #8
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	409a      	lsls	r2, r3
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	4805      	ldr	r0, [pc, #20]	; (8000358 <GPIO_voidPinSetAltFn+0x110>)
 8000342:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000346:	430a      	orrs	r2, r1
 8000348:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000000 	.word	0x20000000

0800035c <ICU_u8StopCh>:
/*--------------------------------------------------------------------------------*/
/* Stop ICU detection and counting									*/
/* Input Parameters: TIMER Peripheral ID, Input channel ID			*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Failed			*/
STD_ReturnType ICU_u8StopCh( u8 copy_u8TIM_ID ,  u8 copy_u8CH_ID )
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	460a      	mov	r2, r1
 8000366:	71fb      	strb	r3, [r7, #7]
 8000368:	4613      	mov	r3, r2
 800036a:	71bb      	strb	r3, [r7, #6]
	// Check data validity
	if( ( ( ( ( ICU_Init & TIM2_Init  ) == TIM2_Init   ) && ( copy_u8TIM_ID == TIMER2ID  ) ) ||
 800036c:	4b57      	ldr	r3, [pc, #348]	; (80004cc <ICU_u8StopCh+0x170>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	f003 0303 	and.w	r3, r3, #3
 8000374:	2b03      	cmp	r3, #3
 8000376:	d102      	bne.n	800037e <ICU_u8StopCh+0x22>
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d013      	beq.n	80003a6 <ICU_u8StopCh+0x4a>
		  ( ( ( ICU_Init & TIM5_Init  ) == TIM5_Init   ) && ( copy_u8TIM_ID == TIMER5ID  ) ) ||
 800037e:	4b53      	ldr	r3, [pc, #332]	; (80004cc <ICU_u8StopCh+0x170>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	f003 030c 	and.w	r3, r3, #12
	if( ( ( ( ( ICU_Init & TIM2_Init  ) == TIM2_Init   ) && ( copy_u8TIM_ID == TIMER2ID  ) ) ||
 8000386:	2b0c      	cmp	r3, #12
 8000388:	d102      	bne.n	8000390 <ICU_u8StopCh+0x34>
		  ( ( ( ICU_Init & TIM5_Init  ) == TIM5_Init   ) && ( copy_u8TIM_ID == TIMER5ID  ) ) ||
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d00a      	beq.n	80003a6 <ICU_u8StopCh+0x4a>
		  ( ( ( ICU_Init & TIM10_Init ) == TIM10_Init  ) && ( copy_u8TIM_ID == TIMER10ID ) ) ) &&
 8000390:	4b4e      	ldr	r3, [pc, #312]	; (80004cc <ICU_u8StopCh+0x170>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	f003 0330 	and.w	r3, r3, #48	; 0x30
		  ( ( ( ICU_Init & TIM5_Init  ) == TIM5_Init   ) && ( copy_u8TIM_ID == TIMER5ID  ) ) ||
 8000398:	2b30      	cmp	r3, #48	; 0x30
 800039a:	f040 8090 	bne.w	80004be <ICU_u8StopCh+0x162>
		  ( ( ( ICU_Init & TIM10_Init ) == TIM10_Init  ) && ( copy_u8TIM_ID == TIMER10ID ) ) ) &&
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	2b02      	cmp	r3, #2
 80003a2:	f040 808c 	bne.w	80004be <ICU_u8StopCh+0x162>
 80003a6:	79bb      	ldrb	r3, [r7, #6]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	f200 8088 	bhi.w	80004be <ICU_u8StopCh+0x162>
		  ( copy_u8CH_ID <= CH4ID ) )
	{
		// Check which channel is selected
		switch( copy_u8CH_ID )
 80003ae:	79bb      	ldrb	r3, [r7, #6]
 80003b0:	2b03      	cmp	r3, #3
 80003b2:	f200 8080 	bhi.w	80004b6 <ICU_u8StopCh+0x15a>
 80003b6:	a201      	add	r2, pc, #4	; (adr r2, 80003bc <ICU_u8StopCh+0x60>)
 80003b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003bc:	080003cd 	.word	0x080003cd
 80003c0:	0800040f 	.word	0x0800040f
 80003c4:	08000447 	.word	0x08000447
 80003c8:	0800047f 	.word	0x0800047f
		{
		case CH1ID: // Case of Channel 1 is selected
			// Check which timer is selected
			switch( copy_u8TIM_ID )
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	d014      	beq.n	80003fc <ICU_u8StopCh+0xa0>
 80003d2:	2b02      	cmp	r3, #2
 80003d4:	dc19      	bgt.n	800040a <ICU_u8StopCh+0xae>
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <ICU_u8StopCh+0x84>
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d007      	beq.n	80003ee <ICU_u8StopCh+0x92>
			case TIMER10ID: // Case of timer 10 is selected
				// Enable the selected channel
				clr_bit( TIM10_CCER_ADR , TIMx_CH1EN );
				break;
			default: // Case of wrong timer selection
				break;
 80003de:	e014      	b.n	800040a <ICU_u8StopCh+0xae>
				clr_bit( TIM2_CCER_ADR , TIMx_CH1EN );
 80003e0:	4b3b      	ldr	r3, [pc, #236]	; (80004d0 <ICU_u8StopCh+0x174>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a3a      	ldr	r2, [pc, #232]	; (80004d0 <ICU_u8StopCh+0x174>)
 80003e6:	f023 0301 	bic.w	r3, r3, #1
 80003ea:	6013      	str	r3, [r2, #0]
				break;
 80003ec:	e00e      	b.n	800040c <ICU_u8StopCh+0xb0>
				clr_bit( TIM5_CCER_ADR , TIMx_CH1EN );
 80003ee:	4b39      	ldr	r3, [pc, #228]	; (80004d4 <ICU_u8StopCh+0x178>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a38      	ldr	r2, [pc, #224]	; (80004d4 <ICU_u8StopCh+0x178>)
 80003f4:	f023 0301 	bic.w	r3, r3, #1
 80003f8:	6013      	str	r3, [r2, #0]
				break;
 80003fa:	e007      	b.n	800040c <ICU_u8StopCh+0xb0>
				clr_bit( TIM10_CCER_ADR , TIMx_CH1EN );
 80003fc:	4b35      	ldr	r3, [pc, #212]	; (80004d4 <ICU_u8StopCh+0x178>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a34      	ldr	r2, [pc, #208]	; (80004d4 <ICU_u8StopCh+0x178>)
 8000402:	f023 0301 	bic.w	r3, r3, #1
 8000406:	6013      	str	r3, [r2, #0]
				break;
 8000408:	e000      	b.n	800040c <ICU_u8StopCh+0xb0>
				break;
 800040a:	bf00      	nop
			}
			break;
 800040c:	e055      	b.n	80004ba <ICU_u8StopCh+0x15e>
		case CH2ID: // Case of Channel 2 is selected
			// Check which timer is selected
			switch( copy_u8TIM_ID )
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b02      	cmp	r3, #2
 8000412:	d014      	beq.n	800043e <ICU_u8StopCh+0xe2>
 8000414:	2b02      	cmp	r3, #2
 8000416:	dc14      	bgt.n	8000442 <ICU_u8StopCh+0xe6>
 8000418:	2b00      	cmp	r3, #0
 800041a:	d002      	beq.n	8000422 <ICU_u8StopCh+0xc6>
 800041c:	2b01      	cmp	r3, #1
 800041e:	d007      	beq.n	8000430 <ICU_u8StopCh+0xd4>
				break;
			case TIMER10ID: // Case of timer 10 is selected
				// Enable the selected channel
				return STD_FALSE;
			default: // Case of wrong timer selection
				break;
 8000420:	e00f      	b.n	8000442 <ICU_u8StopCh+0xe6>
				clr_bit( TIM2_CCER_ADR , TIMx_CH2EN );
 8000422:	4b2b      	ldr	r3, [pc, #172]	; (80004d0 <ICU_u8StopCh+0x174>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a2a      	ldr	r2, [pc, #168]	; (80004d0 <ICU_u8StopCh+0x174>)
 8000428:	f023 0310 	bic.w	r3, r3, #16
 800042c:	6013      	str	r3, [r2, #0]
				break;
 800042e:	e009      	b.n	8000444 <ICU_u8StopCh+0xe8>
				clr_bit( TIM5_CCER_ADR , TIMx_CH2EN );
 8000430:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <ICU_u8StopCh+0x178>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a27      	ldr	r2, [pc, #156]	; (80004d4 <ICU_u8StopCh+0x178>)
 8000436:	f023 0310 	bic.w	r3, r3, #16
 800043a:	6013      	str	r3, [r2, #0]
				break;
 800043c:	e002      	b.n	8000444 <ICU_u8StopCh+0xe8>
				return STD_FALSE;
 800043e:	2300      	movs	r3, #0
 8000440:	e03e      	b.n	80004c0 <ICU_u8StopCh+0x164>
				break;
 8000442:	bf00      	nop
			}
			break;
 8000444:	e039      	b.n	80004ba <ICU_u8StopCh+0x15e>
		case CH3ID: // Case of Channel 3 is selected
			// Check which timer is selected
			switch( copy_u8TIM_ID )
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	2b02      	cmp	r3, #2
 800044a:	d014      	beq.n	8000476 <ICU_u8StopCh+0x11a>
 800044c:	2b02      	cmp	r3, #2
 800044e:	dc14      	bgt.n	800047a <ICU_u8StopCh+0x11e>
 8000450:	2b00      	cmp	r3, #0
 8000452:	d002      	beq.n	800045a <ICU_u8StopCh+0xfe>
 8000454:	2b01      	cmp	r3, #1
 8000456:	d007      	beq.n	8000468 <ICU_u8StopCh+0x10c>
				break;
			case TIMER10ID: // Case of timer 10 is selected
				// Enable the selected channel
				return STD_FALSE;
			default: // Case of wrong timer selection
				break;
 8000458:	e00f      	b.n	800047a <ICU_u8StopCh+0x11e>
				clr_bit( TIM2_CCER_ADR , TIMx_CH3EN );
 800045a:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <ICU_u8StopCh+0x174>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a1c      	ldr	r2, [pc, #112]	; (80004d0 <ICU_u8StopCh+0x174>)
 8000460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000464:	6013      	str	r3, [r2, #0]
				break;
 8000466:	e009      	b.n	800047c <ICU_u8StopCh+0x120>
				clr_bit( TIM5_CCER_ADR , TIMx_CH3EN );
 8000468:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <ICU_u8StopCh+0x178>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a19      	ldr	r2, [pc, #100]	; (80004d4 <ICU_u8StopCh+0x178>)
 800046e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000472:	6013      	str	r3, [r2, #0]
				break;
 8000474:	e002      	b.n	800047c <ICU_u8StopCh+0x120>
				return STD_FALSE;
 8000476:	2300      	movs	r3, #0
 8000478:	e022      	b.n	80004c0 <ICU_u8StopCh+0x164>
				break;
 800047a:	bf00      	nop
			}
			break;
 800047c:	e01d      	b.n	80004ba <ICU_u8StopCh+0x15e>
		case CH4ID: // Case of Channel 4 is selected
			// Check which timer is selected
			switch( copy_u8TIM_ID )
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2b02      	cmp	r3, #2
 8000482:	d014      	beq.n	80004ae <ICU_u8StopCh+0x152>
 8000484:	2b02      	cmp	r3, #2
 8000486:	dc14      	bgt.n	80004b2 <ICU_u8StopCh+0x156>
 8000488:	2b00      	cmp	r3, #0
 800048a:	d002      	beq.n	8000492 <ICU_u8StopCh+0x136>
 800048c:	2b01      	cmp	r3, #1
 800048e:	d007      	beq.n	80004a0 <ICU_u8StopCh+0x144>
				break;
			case TIMER10ID: // Case of timer 10 is selected
				// Enable the selected channel
				return STD_FALSE;
			default: // Case of wrong timer selection
				break;
 8000490:	e00f      	b.n	80004b2 <ICU_u8StopCh+0x156>
				clr_bit( TIM2_CCER_ADR , TIMx_CH4EN );
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <ICU_u8StopCh+0x174>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <ICU_u8StopCh+0x174>)
 8000498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800049c:	6013      	str	r3, [r2, #0]
				break;
 800049e:	e009      	b.n	80004b4 <ICU_u8StopCh+0x158>
				clr_bit( TIM5_CCER_ADR , TIMx_CH4EN );
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <ICU_u8StopCh+0x178>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <ICU_u8StopCh+0x178>)
 80004a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80004aa:	6013      	str	r3, [r2, #0]
				break;
 80004ac:	e002      	b.n	80004b4 <ICU_u8StopCh+0x158>
				return STD_FALSE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	e006      	b.n	80004c0 <ICU_u8StopCh+0x164>
				break;
 80004b2:	bf00      	nop
			}
			break;
 80004b4:	e001      	b.n	80004ba <ICU_u8StopCh+0x15e>
		default: // Case of wrong channel selection
			// Return false
			return STD_FALSE;
 80004b6:	2300      	movs	r3, #0
 80004b8:	e002      	b.n	80004c0 <ICU_u8StopCh+0x164>
			break;
		}
		return STD_TRUE;
 80004ba:	2301      	movs	r3, #1
 80004bc:	e000      	b.n	80004c0 <ICU_u8StopCh+0x164>
	}
	else
	{// In case of in valid data or re-init
		// Return false
		return STD_FALSE;
 80004be:	2300      	movs	r3, #0
	}
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	20000040 	.word	0x20000040
 80004d0:	40000020 	.word	0x40000020
 80004d4:	40000c20 	.word	0x40000c20

080004d8 <ICU_u8StopTim>:
/*--------------------------------------------------------------------------------*/
/* Disable the timer and stop counting								*/
/* Input Parameters: TIMER Peripheral ID							*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Failed			*/
STD_ReturnType ICU_u8StopTim( u8 copy_u8TIM_ID )
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	// Check data validity
	if( ( ( ICU_Init == TIM2_Init ) && ( copy_u8TIM_ID == TIMER2ID ) ) ||
 80004e2:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <ICU_u8StopTim+0x80>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d102      	bne.n	80004f0 <ICU_u8StopTim+0x18>
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d006      	beq.n	80004fe <ICU_u8StopTim+0x26>
		( ( ICU_Init == TIM5_Init ) && ( copy_u8TIM_ID == TIMER5ID ) ) )
 80004f0:	4b19      	ldr	r3, [pc, #100]	; (8000558 <ICU_u8StopTim+0x80>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
	if( ( ( ICU_Init == TIM2_Init ) && ( copy_u8TIM_ID == TIMER2ID ) ) ||
 80004f4:	2b0c      	cmp	r3, #12
 80004f6:	d127      	bne.n	8000548 <ICU_u8StopTim+0x70>
		( ( ICU_Init == TIM5_Init ) && ( copy_u8TIM_ID == TIMER5ID ) ) )
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d124      	bne.n	8000548 <ICU_u8StopTim+0x70>
	{
		// Check which timer is selected to be initiated
		switch( copy_u8TIM_ID )
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d016      	beq.n	8000532 <ICU_u8StopTim+0x5a>
 8000504:	2b02      	cmp	r3, #2
 8000506:	dc1b      	bgt.n	8000540 <ICU_u8StopTim+0x68>
 8000508:	2b00      	cmp	r3, #0
 800050a:	d002      	beq.n	8000512 <ICU_u8StopTim+0x3a>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d009      	beq.n	8000524 <ICU_u8StopTim+0x4c>
 8000510:	e016      	b.n	8000540 <ICU_u8StopTim+0x68>
		{
		case TIMER2ID:// Case of timer 2 is selected
			// Disable timer 2
			clr_bit( TIM2_CR1_ADR , TIMx_EN );
 8000512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800051c:	f023 0301 	bic.w	r3, r3, #1
 8000520:	6013      	str	r3, [r2, #0]
			break;
 8000522:	e00f      	b.n	8000544 <ICU_u8StopTim+0x6c>
		case TIMER5ID: // Case of timer 5 is selected
			// Disable timer 5
			clr_bit( TIM5_CR1_ADR , TIMx_EN );
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <ICU_u8StopTim+0x84>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <ICU_u8StopTim+0x84>)
 800052a:	f023 0301 	bic.w	r3, r3, #1
 800052e:	6013      	str	r3, [r2, #0]
			break;
 8000530:	e008      	b.n	8000544 <ICU_u8StopTim+0x6c>
		case TIMER10ID: // Case of timer 10 is selected
			// Disable timer 10
			clr_bit( TIM10_CR1_ADR , TIMx_EN );
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <ICU_u8StopTim+0x84>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <ICU_u8StopTim+0x84>)
 8000538:	f023 0301 	bic.w	r3, r3, #1
 800053c:	6013      	str	r3, [r2, #0]
			break;
 800053e:	e001      	b.n	8000544 <ICU_u8StopTim+0x6c>
		default: // Case of wrong selection
			// Return false
			return STD_FALSE;
 8000540:	2300      	movs	r3, #0
 8000542:	e002      	b.n	800054a <ICU_u8StopTim+0x72>
			break;
		}
		// Return true
		return STD_TRUE;
 8000544:	2301      	movs	r3, #1
 8000546:	e000      	b.n	800054a <ICU_u8StopTim+0x72>
	}
	else
	{// In case of in valid data or re-init
		// Return false
		return STD_FALSE;
 8000548:	2300      	movs	r3, #0
	}
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000040 	.word	0x20000040
 800055c:	40000c00 	.word	0x40000c00

08000560 <TIM5_IRQHandler>:
/*--------------------------------------------------------------------------------*/
/* Timer 5 Interrupt request handler								*/
/* Input Parameters: void											*/
/* Return value: void												*/
void TIM5_IRQHandler( void )
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	TIM5_CNT_ADR = TIM_RESET_VALUE;
 8000564:	4b4f      	ldr	r3, [pc, #316]	; (80006a4 <TIM5_IRQHandler+0x144>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
	static u8 CurrentState = ICU_MODE_LOW;
	if(CurrentState == ICU_MODE_LOW)
 800056a:	4b4f      	ldr	r3, [pc, #316]	; (80006a8 <TIM5_IRQHandler+0x148>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d13b      	bne.n	80005ea <TIM5_IRQHandler+0x8a>
	{
		if(get_bit( TIM5_SR_ADR , TIMx_CH1IF ) == ICU_CH_EN)
 8000572:	4b4e      	ldr	r3, [pc, #312]	; (80006ac <TIM5_IRQHandler+0x14c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	085b      	lsrs	r3, r3, #1
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	2b01      	cmp	r3, #1
 800057e:	d107      	bne.n	8000590 <TIM5_IRQHandler+0x30>
		{
			ICU_CaptureCompareDataTIM5[CH1ID] = TIM5_CRR1_ADR;
 8000580:	4b4b      	ldr	r3, [pc, #300]	; (80006b0 <TIM5_IRQHandler+0x150>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a4b      	ldr	r2, [pc, #300]	; (80006b4 <TIM5_IRQHandler+0x154>)
 8000586:	6013      	str	r3, [r2, #0]
			CurrentState = ICU_MODE_HIGH;
 8000588:	4b47      	ldr	r3, [pc, #284]	; (80006a8 <TIM5_IRQHandler+0x148>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		// Do nothing
	}
}
 800058e:	e087      	b.n	80006a0 <TIM5_IRQHandler+0x140>
		else if(get_bit( TIM5_SR_ADR , TIMx_CH2IF ) == ICU_CH_EN)
 8000590:	4b46      	ldr	r3, [pc, #280]	; (80006ac <TIM5_IRQHandler+0x14c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	089b      	lsrs	r3, r3, #2
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	2b01      	cmp	r3, #1
 800059c:	d107      	bne.n	80005ae <TIM5_IRQHandler+0x4e>
			ICU_CaptureCompareDataTIM5[CH2ID] = TIM5_CRR2_ADR;
 800059e:	4b46      	ldr	r3, [pc, #280]	; (80006b8 <TIM5_IRQHandler+0x158>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a44      	ldr	r2, [pc, #272]	; (80006b4 <TIM5_IRQHandler+0x154>)
 80005a4:	6053      	str	r3, [r2, #4]
			CurrentState = ICU_MODE_HIGH;
 80005a6:	4b40      	ldr	r3, [pc, #256]	; (80006a8 <TIM5_IRQHandler+0x148>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
}
 80005ac:	e078      	b.n	80006a0 <TIM5_IRQHandler+0x140>
		else if(get_bit( TIM5_SR_ADR , TIMx_CH3IF ) == ICU_CH_EN)
 80005ae:	4b3f      	ldr	r3, [pc, #252]	; (80006ac <TIM5_IRQHandler+0x14c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	08db      	lsrs	r3, r3, #3
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d107      	bne.n	80005cc <TIM5_IRQHandler+0x6c>
			ICU_CaptureCompareDataTIM5[CH3ID] = TIM5_CRR2_ADR;
 80005bc:	4b3e      	ldr	r3, [pc, #248]	; (80006b8 <TIM5_IRQHandler+0x158>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a3c      	ldr	r2, [pc, #240]	; (80006b4 <TIM5_IRQHandler+0x154>)
 80005c2:	6093      	str	r3, [r2, #8]
			CurrentState = ICU_MODE_HIGH;
 80005c4:	4b38      	ldr	r3, [pc, #224]	; (80006a8 <TIM5_IRQHandler+0x148>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	e069      	b.n	80006a0 <TIM5_IRQHandler+0x140>
		else if(get_bit( TIM5_SR_ADR , TIMx_CH4IF ) == ICU_CH_EN)
 80005cc:	4b37      	ldr	r3, [pc, #220]	; (80006ac <TIM5_IRQHandler+0x14c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	091b      	lsrs	r3, r3, #4
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d162      	bne.n	80006a0 <TIM5_IRQHandler+0x140>
			ICU_CaptureCompareDataTIM5[CH4ID] = TIM5_CRR2_ADR;
 80005da:	4b37      	ldr	r3, [pc, #220]	; (80006b8 <TIM5_IRQHandler+0x158>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a35      	ldr	r2, [pc, #212]	; (80006b4 <TIM5_IRQHandler+0x154>)
 80005e0:	60d3      	str	r3, [r2, #12]
			CurrentState = ICU_MODE_HIGH;
 80005e2:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <TIM5_IRQHandler+0x148>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	701a      	strb	r2, [r3, #0]
}
 80005e8:	e05a      	b.n	80006a0 <TIM5_IRQHandler+0x140>
	else if(CurrentState == ICU_MODE_HIGH)
 80005ea:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <TIM5_IRQHandler+0x148>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d156      	bne.n	80006a0 <TIM5_IRQHandler+0x140>
		if(get_bit( TIM5_SR_ADR , TIMx_CH1IF ) == ICU_CH_EN)
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <TIM5_IRQHandler+0x14c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	085b      	lsrs	r3, r3, #1
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d10e      	bne.n	800061e <TIM5_IRQHandler+0xbe>
			ICU_CaptureCompareDataTIM5[CH1ID] = TIM5_CRR1_ADR;
 8000600:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <TIM5_IRQHandler+0x150>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a2b      	ldr	r2, [pc, #172]	; (80006b4 <TIM5_IRQHandler+0x154>)
 8000606:	6013      	str	r3, [r2, #0]
			ICU_u8StopCh(TIMER5ID, CH1ID);
 8000608:	2100      	movs	r1, #0
 800060a:	2001      	movs	r0, #1
 800060c:	f7ff fea6 	bl	800035c <ICU_u8StopCh>
			ICU_u8StopTim(TIMER5ID);
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff ff61 	bl	80004d8 <ICU_u8StopTim>
			CurrentState = ICU_MODE_LOW;
 8000616:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <TIM5_IRQHandler+0x148>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
}
 800061c:	e040      	b.n	80006a0 <TIM5_IRQHandler+0x140>
		else if(get_bit( TIM5_SR_ADR , TIMx_CH2IF ) == ICU_CH_EN)
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <TIM5_IRQHandler+0x14c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	2b01      	cmp	r3, #1
 800062a:	d10e      	bne.n	800064a <TIM5_IRQHandler+0xea>
			ICU_CaptureCompareDataTIM5[CH2ID] = TIM5_CRR2_ADR;
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <TIM5_IRQHandler+0x158>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <TIM5_IRQHandler+0x154>)
 8000632:	6053      	str	r3, [r2, #4]
			ICU_u8StopCh(TIMER5ID, CH2ID);
 8000634:	2101      	movs	r1, #1
 8000636:	2001      	movs	r0, #1
 8000638:	f7ff fe90 	bl	800035c <ICU_u8StopCh>
			ICU_u8StopTim(TIMER5ID);
 800063c:	2001      	movs	r0, #1
 800063e:	f7ff ff4b 	bl	80004d8 <ICU_u8StopTim>
			CurrentState = ICU_MODE_LOW;
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <TIM5_IRQHandler+0x148>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
}
 8000648:	e02a      	b.n	80006a0 <TIM5_IRQHandler+0x140>
		else if(get_bit( TIM5_SR_ADR , TIMx_CH3IF ) == ICU_CH_EN)
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <TIM5_IRQHandler+0x14c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	2b01      	cmp	r3, #1
 8000656:	d10e      	bne.n	8000676 <TIM5_IRQHandler+0x116>
			ICU_CaptureCompareDataTIM5[CH3ID] = TIM5_CRR2_ADR;
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <TIM5_IRQHandler+0x158>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <TIM5_IRQHandler+0x154>)
 800065e:	6093      	str	r3, [r2, #8]
			ICU_u8StopCh(TIMER5ID, CH3ID);
 8000660:	2102      	movs	r1, #2
 8000662:	2001      	movs	r0, #1
 8000664:	f7ff fe7a 	bl	800035c <ICU_u8StopCh>
			ICU_u8StopTim(TIMER5ID);
 8000668:	2001      	movs	r0, #1
 800066a:	f7ff ff35 	bl	80004d8 <ICU_u8StopTim>
			CurrentState = ICU_MODE_LOW;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <TIM5_IRQHandler+0x148>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
}
 8000674:	e014      	b.n	80006a0 <TIM5_IRQHandler+0x140>
		else if(get_bit( TIM5_SR_ADR , TIMx_CH4IF ) == ICU_CH_EN)
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <TIM5_IRQHandler+0x14c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	091b      	lsrs	r3, r3, #4
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10d      	bne.n	80006a0 <TIM5_IRQHandler+0x140>
			ICU_CaptureCompareDataTIM5[CH4ID] = TIM5_CRR2_ADR;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <TIM5_IRQHandler+0x158>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <TIM5_IRQHandler+0x154>)
 800068a:	60d3      	str	r3, [r2, #12]
			ICU_u8StopCh(TIMER5ID, CH4ID);
 800068c:	2103      	movs	r1, #3
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff fe64 	bl	800035c <ICU_u8StopCh>
			ICU_u8StopTim(TIMER5ID);
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff ff1f 	bl	80004d8 <ICU_u8StopTim>
			CurrentState = ICU_MODE_LOW;
 800069a:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <TIM5_IRQHandler+0x148>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40000c24 	.word	0x40000c24
 80006a8:	20000054 	.word	0x20000054
 80006ac:	40000c10 	.word	0x40000c10
 80006b0:	40000c34 	.word	0x40000c34
 80006b4:	20000044 	.word	0x20000044
 80006b8:	40000c38 	.word	0x40000c38

080006bc <TIM2_IRQHandler>:
/*--------------------------------------------------------------------------------*/
/* Timer 2 Interrupt request handler								*/
/* Input Parameters: void											*/
/* Return value: void												*/
void TIM2_IRQHandler( void )
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <TIM1_UP_TIM10_IRQHandler>:
/*--------------------------------------------------------------------------------*/
/* Timer 2 Interrupt request handler								*/
/* Input Parameters: void											*/
/* Return value: void												*/
void TIM1_UP_TIM10_IRQHandler( void )
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <NVIC_u8EnableIRQ>:

/* Enables the IRQx interrupt										*/
/* Input Parameters: IRQx ID										*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Failed			*/
STD_ReturnType NVIC_u8EnableIRQ( u8 copy_u8IRQ_ID )
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	// Check data validity and if valid address the IRQ to its register
	if(copy_u8IRQ_ID <= IRQ_MAX)
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2b54      	cmp	r3, #84	; 0x54
 80006e6:	d820      	bhi.n	800072a <NVIC_u8EnableIRQ+0x52>
	{// if ID is valid
		// Calculate the register ID
		u8 IRQ_RegID = copy_u8IRQ_ID / REGSC_MAX_IRQ;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	095b      	lsrs	r3, r3, #5
 80006ec:	73fb      	strb	r3, [r7, #15]
		// Calculate the bits location for the selected IRQ
		u8 IRQ_BitLOC = ( ( copy_u8IRQ_ID - ( IRQ_RegID * REGSC_MAX_IRQ ) ) );
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	015b      	lsls	r3, r3, #5
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	79fa      	ldrb	r2, [r7, #7]
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	73bb      	strb	r3, [r7, #14]
		// Set enable IRQ bit
		set_bit(NVIC_ISERx_ARD(IRQ_RegID), IRQ_BitLOC);
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000702:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	2101      	movs	r1, #1
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	4618      	mov	r0, r3
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800071a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800071e:	4619      	mov	r1, r3
 8000720:	ea42 0300 	orr.w	r3, r2, r0
 8000724:	600b      	str	r3, [r1, #0]
		// Return success
		return STD_TRUE;
 8000726:	2301      	movs	r3, #1
 8000728:	e000      	b.n	800072c <NVIC_u8EnableIRQ+0x54>
	}
	else
	{// If not valid return failed
		// Return failed
		return STD_FALSE;
 800072a:	2300      	movs	r3, #0
	}
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <RCC_voidInitSysClock>:
												*( M N P Q )      	: By #define


*/
void RCC_voidInitSysClock(void )
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

	// Configuring the clock source

#if		RCC_Clk_SRC == RCC_HSI
	// Set the HSI on bit to enable
	set_bit(RCC_CR, RCC_HSION_bit);
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <RCC_voidInitSysClock+0x94>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a22      	ldr	r2, [pc, #136]	; (80007cc <RCC_voidInitSysClock+0x94>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]
	// Wait till HSI is locked
	while(get_bit(RCC_CR, RCC_HSIRDY_bit) == 0);
 8000748:	bf00      	nop
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <RCC_voidInitSysClock+0x94>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0f9      	beq.n	800074a <RCC_voidInitSysClock+0x12>
	#endif

#endif

	// Mask the clock configuration register
	RCC_PLLCFGR &= RCC_CFGR_mask;
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <RCC_voidInitSysClock+0x98>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <RCC_voidInitSysClock+0x98>)
 800075c:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000760:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000764:	6013      	str	r3, [r2, #0]
	while(get_bit(RCC_CR, RCC_PLLRDY_bit) == 0);

#else
	#if		RCC_Clk_SRC == RCC_HSI
		// Select the HSI clk source
		RCC_PLLCFGR |= RCC_HSI_Clk_Src;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <RCC_voidInitSysClock+0x98>)
 8000768:	4a19      	ldr	r2, [pc, #100]	; (80007d0 <RCC_voidInitSysClock+0x98>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6013      	str	r3, [r2, #0]

	#endif
#endif

	// Setting the AHP pre-scaler
	RCC_CFGR |= (RCC_HPRE << RCC_PRE_bit);
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <RCC_voidInitSysClock+0x9c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <RCC_voidInitSysClock+0x9c>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6013      	str	r3, [r2, #0]
	// Setting the APB1 pre-scaler
	RCC_CFGR |= (RCC_PPRE1 << RCC_PPRE1_bit);
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <RCC_voidInitSysClock+0x9c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <RCC_voidInitSysClock+0x9c>)
 8000780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000784:	6013      	str	r3, [r2, #0]
	// Setting the APB2 pre-scaler
	RCC_CFGR |= (RCC_PPRE2 << RCC_PPRE2_bit);
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <RCC_voidInitSysClock+0x9c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <RCC_voidInitSysClock+0x9c>)
 800078c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000790:	6013      	str	r3, [r2, #0]

	// Enable and disable peripherals of Bus AHB1
	RCC_AHB1ENR |= RCC_AHB1LPENR_init;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <RCC_voidInitSysClock+0xa0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <RCC_voidInitSysClock+0xa0>)
 8000798:	f043 0303 	orr.w	r3, r3, #3
 800079c:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus AHB1
	RCC_AHB2ENR |= RCC_AHB2LPENR_init;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <RCC_voidInitSysClock+0xa4>)
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <RCC_voidInitSysClock+0xa4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus ABP1
	RCC_APB1ENR |= RCC_APB1LPENR_init;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <RCC_voidInitSysClock+0xa8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <RCC_voidInitSysClock+0xa8>)
 80007ac:	f043 030f 	orr.w	r3, r3, #15
 80007b0:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus ABP2
	RCC_APB2ENR |= RCC_APB2LPENR_init;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <RCC_voidInitSysClock+0xac>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <RCC_voidInitSysClock+0xac>)
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6013      	str	r3, [r2, #0]
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40023804 	.word	0x40023804
 80007d4:	40023808 	.word	0x40023808
 80007d8:	40023830 	.word	0x40023830
 80007dc:	40023834 	.word	0x40023834
 80007e0:	40023840 	.word	0x40023840
 80007e4:	40023844 	.word	0x40023844

080007e8 <UART_u8Init>:

/* Configure UART Peripheral using pre-build configurations			*/
/* Input Parameters: UART Peripheral ID								*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Failed			*/
STD_ReturnType UART_u8Init( u8 copy_u8UART_ID )
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	// Check input data validity
	if( ( copy_u8UART_ID == UART1ID ) && ( ( UART_Init & UART1_INIT ) == UART_NOT_INIT ) )
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d12d      	bne.n	8000854 <UART_u8Init+0x6c>
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <UART_u8Init+0x7c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	f003 0303 	and.w	r3, r3, #3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d127      	bne.n	8000854 <UART_u8Init+0x6c>
	{// If valid
		// Check which channel is selected
		switch( copy_u8UART_ID )
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d01f      	beq.n	800084a <UART_u8Init+0x62>
 800080a:	2b02      	cmp	r3, #2
 800080c:	dc1b      	bgt.n	8000846 <UART_u8Init+0x5e>
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <UART_u8Init+0x30>
 8000812:	2b01      	cmp	r3, #1
 8000814:	d01b      	beq.n	800084e <UART_u8Init+0x66>
 8000816:	e016      	b.n	8000846 <UART_u8Init+0x5e>
		{
		case UART1ID: // Case of selecting UART 1
			// Set the Boad Rate value
			UART_bases[copy_u8UART_ID]->UART_BRR = ( ( UART1_MANTISSA << UART_MANTISSA_BIT ) | UART1_FRACTION );
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4a13      	ldr	r2, [pc, #76]	; (8000868 <UART_u8Init+0x80>)
 800081c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000820:	f640 5203 	movw	r2, #3331	; 0xd03
 8000824:	609a      	str	r2, [r3, #8]
			// Set the control register configurations
			UART_bases[copy_u8UART_ID]->UART_CR1 = UART1_CR1;
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <UART_u8Init+0x80>)
 800082a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8000832:	60da      	str	r2, [r3, #12]
			// Set init variable for UART1 init
			UART_Init |= UART1_INIT;
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <UART_u8Init+0x7c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	f043 0303 	orr.w	r3, r3, #3
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <UART_u8Init+0x7c>)
 8000840:	701a      	strb	r2, [r3, #0]
			// Return success
			return STD_TRUE;
 8000842:	2301      	movs	r3, #1
 8000844:	e007      	b.n	8000856 <UART_u8Init+0x6e>
			break;
		case UART6ID: // Case of selecting UART 6
			break;
		default: // Case of wrong selection
			// Return failed
			return STD_FALSE;
 8000846:	2300      	movs	r3, #0
 8000848:	e005      	b.n	8000856 <UART_u8Init+0x6e>
			break;
 800084a:	bf00      	nop
 800084c:	e000      	b.n	8000850 <UART_u8Init+0x68>
			break;
 800084e:	bf00      	nop
			break;
		}
		// Return failed
		return STD_FALSE;
 8000850:	2300      	movs	r3, #0
 8000852:	e000      	b.n	8000856 <UART_u8Init+0x6e>
	}
	else
	{// If not valid
		// Return failed
		return STD_FALSE;
 8000854:	2300      	movs	r3, #0
	}
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	2000005c 	.word	0x2000005c
 8000868:	20000018 	.word	0x20000018

0800086c <UART_u8SendByte>:
/*--------------------------------------------------------------------------------*/
/* Put one byte in the transmit buffer of the UART Peripheral		*/
/* Input Parameters: UART Peripheral ID, Data Byte					*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Collision action	*/
STD_ReturnType UART_u8SendByte( u8 copy_u8UART_ID , u8 copy_u8DataByte )
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	71bb      	strb	r3, [r7, #6]
	// Check data validity
	if( ( copy_u8UART_ID == UART1ID ) && ( ( UART_Init & UART1_INIT ) == UART1_INIT ) )
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d119      	bne.n	80008b6 <UART_u8SendByte+0x4a>
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <UART_u8SendByte+0x58>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	f003 0303 	and.w	r3, r3, #3
 800088a:	2b03      	cmp	r3, #3
 800088c:	d113      	bne.n	80008b6 <UART_u8SendByte+0x4a>
	{// If valid
		// It data transmission is ready or not
		if( get_bit( (UART_bases[copy_u8UART_ID]->UART_SR) , UART_TC_BIT ) == STD_TRUE )
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <UART_u8SendByte+0x5c>)
 8000892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	099b      	lsrs	r3, r3, #6
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d107      	bne.n	80008b2 <UART_u8SendByte+0x46>
		{// if available
			// Sent data byte to the buffer
			UART_bases[copy_u8UART_ID]->UART_DR = copy_u8DataByte;
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <UART_u8SendByte+0x5c>)
 80008a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008aa:	79ba      	ldrb	r2, [r7, #6]
 80008ac:	605a      	str	r2, [r3, #4]
			// Return success
			return STD_TRUE;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e002      	b.n	80008b8 <UART_u8SendByte+0x4c>
		}
		else
		{// if not available
			// Return failed
			return STD_FALSE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e000      	b.n	80008b8 <UART_u8SendByte+0x4c>
		}
	}
	else
	{// If not valid
		// Return failed
		return STD_FALSE;
 80008b6:	2300      	movs	r3, #0
	}
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	2000005c 	.word	0x2000005c
 80008c8:	20000018 	.word	0x20000018

080008cc <UART_u8ReceiveByte>:
/*--------------------------------------------------------------------------------*/
/* Get Data byte from the receive buffer of the UART peripheral		*/
/* Input Parameters: UART Peripheral ID, Ptr to Rx data variable	*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Collision action	*/
STD_ReturnType UART_u8ReceiveByte( u8 copy_u8UART_ID , u8* ptr_u8DataByte  )
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	71fb      	strb	r3, [r7, #7]
	// Check data validity
	if( ( copy_u8UART_ID == UART1ID ) && ( ( UART_Init & UART1_INIT ) == UART1_INIT ) )
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d10f      	bne.n	80008fe <UART_u8ReceiveByte+0x32>
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <UART_u8ReceiveByte+0x40>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	d109      	bne.n	80008fe <UART_u8ReceiveByte+0x32>
	{// If valid
		// It recived data is ready in the DR
		//if( get_bit( (UART_bases[copy_u8UART_ID]->UART_SR) , UART_RXNE_BIT ) == STD_TRUE )
		//{// if available
			// Recive data byte
			*ptr_u8DataByte = UART_bases[copy_u8UART_ID]->UART_DR;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4a08      	ldr	r2, [pc, #32]	; (8000910 <UART_u8ReceiveByte+0x44>)
 80008ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	701a      	strb	r2, [r3, #0]
			// Return success
			return STD_TRUE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <UART_u8ReceiveByte+0x34>
		//}
	}
	else
	{// If not valid
		// Return failed
		return STD_FALSE;
 80008fe:	2300      	movs	r3, #0
	}
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	2000005c 	.word	0x2000005c
 8000910:	20000018 	.word	0x20000018

08000914 <UART_u8SetCallback>:
/*--------------------------------------------------------------------------------*/
/* Set callback function for the UART receive by interrupt			*/
/* Input Parameters: UART Peripheral ID								*/
/* Return value: STD_TRUE -> Success, STD_FALSE -> Failed			*/
STD_ReturnType UART_u8SetCallback( u8 copy_u8UART_ID , void ( *ptr_UARTcallback )( void ) )
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
	// Check is the input pointer to function is not null
	if( (ptr_UARTcallback != Null) )
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d014      	beq.n	8000950 <UART_u8SetCallback+0x3c>
	{// if valid
		// Check which UART peripheral is selected
		switch(copy_u8UART_ID)
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d00d      	beq.n	8000948 <UART_u8SetCallback+0x34>
 800092c:	2b02      	cmp	r3, #2
 800092e:	dc0d      	bgt.n	800094c <UART_u8SetCallback+0x38>
 8000930:	2b00      	cmp	r3, #0
 8000932:	d002      	beq.n	800093a <UART_u8SetCallback+0x26>
 8000934:	2b01      	cmp	r3, #1
 8000936:	d005      	beq.n	8000944 <UART_u8SetCallback+0x30>
 8000938:	e008      	b.n	800094c <UART_u8SetCallback+0x38>
		{
		case UART1ID: // Case UART1 is selected
			// Set the interrupt callback
			ptr_UART1_IRQHandlerCallback = ptr_UARTcallback;
 800093a:	4a09      	ldr	r2, [pc, #36]	; (8000960 <UART_u8SetCallback+0x4c>)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	6013      	str	r3, [r2, #0]
			// Return success
			return STD_TRUE;
 8000940:	2301      	movs	r3, #1
 8000942:	e006      	b.n	8000952 <UART_u8SetCallback+0x3e>
			break;
		case UART2ID: // Case UART2 is selected
			// Set the interrupt callback

			// Return success
			return STD_FALSE;
 8000944:	2300      	movs	r3, #0
 8000946:	e004      	b.n	8000952 <UART_u8SetCallback+0x3e>
			break;
		case UART6ID: // Case UART6 is selected
			// Set the interrupt callback

			// Return success
			return STD_FALSE;
 8000948:	2300      	movs	r3, #0
 800094a:	e002      	b.n	8000952 <UART_u8SetCallback+0x3e>
			break;
		default: // Case of wrong selection
			// Return failed
			return STD_FALSE;
 800094c:	2300      	movs	r3, #0
 800094e:	e000      	b.n	8000952 <UART_u8SetCallback+0x3e>
		return STD_FALSE;
	}
	else
	{// if not valid
		// return failed
		return STD_FALSE;
 8000950:	2300      	movs	r3, #0
	}
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000058 	.word	0x20000058

08000964 <USART1_IRQHandler>:
/*--------------------------------------------------------------------------------*/
/* UART interrupt request handler									*/
/* Input Parameters: void											*/
/* Return value: void												*/
void USART1_IRQHandler( void )
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	if(ptr_UART1_IRQHandlerCallback != Null)
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <USART1_IRQHandler+0x18>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <USART1_IRQHandler+0x12>
		ptr_UART1_IRQHandlerCallback();
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <USART1_IRQHandler+0x18>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4798      	blx	r3
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000058 	.word	0x20000058

08000980 <main>:
u16 Global_u16FrRightUS = 0;
u16 Global_u16FrLeftUS  = 0;
u8* Recived_UART_ptr;

int main( void )
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	u8 Recived_UART[2] = { 0 };
 8000986:	2300      	movs	r3, #0
 8000988:	80bb      	strh	r3, [r7, #4]
	Recived_UART_ptr = &Recived_UART;
 800098a:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <main+0x64>)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	6013      	str	r3, [r2, #0]
	RCC_voidInitSysClock();
 8000990:	f7ff fed2 	bl	8000738 <RCC_voidInitSysClock>
	GPIO_voidSetPinMode(GPIOA_PORT, PIN9, MODE_ALTF);
 8000994:	2202      	movs	r2, #2
 8000996:	2109      	movs	r1, #9
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff fc1b 	bl	80001d4 <GPIO_voidSetPinMode>
	GPIO_voidPinSetAltFn(GPIOA_PORT, PIN9, 0x07);
 800099e:	2207      	movs	r2, #7
 80009a0:	2109      	movs	r1, #9
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fc50 	bl	8000248 <GPIO_voidPinSetAltFn>
	GPIO_voidSetPinMode(GPIOA_PORT, PIN10, MODE_ALTF);
 80009a8:	2202      	movs	r2, #2
 80009aa:	210a      	movs	r1, #10
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff fc11 	bl	80001d4 <GPIO_voidSetPinMode>
	GPIO_voidPinSetAltFn(GPIOA_PORT, PIN10, 0x07);
 80009b2:	2207      	movs	r2, #7
 80009b4:	210a      	movs	r1, #10
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff fc46 	bl	8000248 <GPIO_voidPinSetAltFn>
	NVIC_u8EnableIRQ(NVIC_IRQ_ID_USART1);
 80009bc:	2025      	movs	r0, #37	; 0x25
 80009be:	f7ff fe8b 	bl	80006d8 <NVIC_u8EnableIRQ>
	UART_u8Init(UART1ID);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff ff10 	bl	80007e8 <UART_u8Init>
	UART_u8SetCallback(UART1ID, Callback_test);
 80009c8:	4907      	ldr	r1, [pc, #28]	; (80009e8 <main+0x68>)
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff ffa2 	bl	8000914 <UART_u8SetCallback>


	/* Loop forever */
	while( 1 )
	{
		UART_u8SendByte(UART1ID, 0x42);
 80009d0:	2142      	movs	r1, #66	; 0x42
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff ff4a 	bl	800086c <UART_u8SendByte>
		UART_u8SendByte(UART1ID, 0x43);
 80009d8:	2143      	movs	r1, #67	; 0x43
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff ff46 	bl	800086c <UART_u8SendByte>
		UART_u8SendByte(UART1ID, 0x42);
 80009e0:	e7f6      	b.n	80009d0 <main+0x50>
 80009e2:	bf00      	nop
 80009e4:	20000060 	.word	0x20000060
 80009e8:	080009ed 	.word	0x080009ed

080009ec <Callback_test>:
	}
	return 0;
}

void Callback_test( void )
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	static u8 index = 0;
	if(index == 2)
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <Callback_test+0x34>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d102      	bne.n	80009fe <Callback_test+0x12>
		index = 0;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <Callback_test+0x34>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	UART_u8ReceiveByte(UART1ID, Recived_UART_ptr+index);
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <Callback_test+0x38>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <Callback_test+0x34>)
 8000a04:	7812      	ldrb	r2, [r2, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff ff5e 	bl	80008cc <UART_u8ReceiveByte>
	index++;
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <Callback_test+0x34>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b01      	ldr	r3, [pc, #4]	; (8000a20 <Callback_test+0x34>)
 8000a1a:	701a      	strb	r2, [r3, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000064 	.word	0x20000064
 8000a24:	20000060 	.word	0x20000060

08000a28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a32:	490d      	ldr	r1, [pc, #52]	; (8000a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <LoopForever+0xe>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a48:	4c0a      	ldr	r4, [pc, #40]	; (8000a74 <LoopForever+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a56:	f000 f811 	bl	8000a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5a:	f7ff ff91 	bl	8000980 <main>

08000a5e <LoopForever>:

LoopForever:
  b LoopForever
 8000a5e:	e7fe      	b.n	8000a5e <LoopForever>
  ldr   r0, =_estack
 8000a60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000a6c:	08000ae4 	.word	0x08000ae4
  ldr r2, =_sbss
 8000a70:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000a74:	20000068 	.word	0x20000068

08000a78 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>
	...

08000a7c <__libc_init_array>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	4d0d      	ldr	r5, [pc, #52]	; (8000ab4 <__libc_init_array+0x38>)
 8000a80:	4c0d      	ldr	r4, [pc, #52]	; (8000ab8 <__libc_init_array+0x3c>)
 8000a82:	1b64      	subs	r4, r4, r5
 8000a84:	10a4      	asrs	r4, r4, #2
 8000a86:	2600      	movs	r6, #0
 8000a88:	42a6      	cmp	r6, r4
 8000a8a:	d109      	bne.n	8000aa0 <__libc_init_array+0x24>
 8000a8c:	4d0b      	ldr	r5, [pc, #44]	; (8000abc <__libc_init_array+0x40>)
 8000a8e:	4c0c      	ldr	r4, [pc, #48]	; (8000ac0 <__libc_init_array+0x44>)
 8000a90:	f000 f818 	bl	8000ac4 <_init>
 8000a94:	1b64      	subs	r4, r4, r5
 8000a96:	10a4      	asrs	r4, r4, #2
 8000a98:	2600      	movs	r6, #0
 8000a9a:	42a6      	cmp	r6, r4
 8000a9c:	d105      	bne.n	8000aaa <__libc_init_array+0x2e>
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa4:	4798      	blx	r3
 8000aa6:	3601      	adds	r6, #1
 8000aa8:	e7ee      	b.n	8000a88 <__libc_init_array+0xc>
 8000aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aae:	4798      	blx	r3
 8000ab0:	3601      	adds	r6, #1
 8000ab2:	e7f2      	b.n	8000a9a <__libc_init_array+0x1e>
 8000ab4:	08000adc 	.word	0x08000adc
 8000ab8:	08000adc 	.word	0x08000adc
 8000abc:	08000adc 	.word	0x08000adc
 8000ac0:	08000ae0 	.word	0x08000ae0

08000ac4 <_init>:
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac6:	bf00      	nop
 8000ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aca:	bc08      	pop	{r3}
 8000acc:	469e      	mov	lr, r3
 8000ace:	4770      	bx	lr

08000ad0 <_fini>:
 8000ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad2:	bf00      	nop
 8000ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad6:	bc08      	pop	{r3}
 8000ad8:	469e      	mov	lr, r3
 8000ada:	4770      	bx	lr
